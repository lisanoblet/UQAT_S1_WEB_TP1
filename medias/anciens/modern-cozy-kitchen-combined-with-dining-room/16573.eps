%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: Windows Cyrillic
%%Title: Modern cozy kitchen combined with dining room.eps
%%Creator: Adobe Illustrator(R) 16.0
%%For: Виталий Викторович
%%CreationDate: 9/2/2018
%%BoundingBox: 0 0 450 225
%%HiResBoundingBox: 0 0 450 225
%%CropBox: 0 0 450 225
%%LanguageLevel: 2
%%DocumentData: Clean7Bit
%ADOBeginClientInjection: DocumentHeader "AI11EPS"
%%AI8_CreatorVersion: 16.0.0%AI9_PrintingDataBegin%ADO_BuildNumber: Adobe Illustrator(R) 16.0.0 x682 R agm 4.6676 ct 5.2591%ADO_ContainsXMP: MainFirst
%ADOEndClientInjection: DocumentHeader "AI11EPS"
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentFonts: 
%%DocumentNeededFonts: 
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EndComments
         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 32 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq {pop /AGMCORE_currentbg load}{/Procedure get_res}ifelse
	dup currentblackgeneration eq {pop}{setblackgeneration}ifelse
	dup null eq {pop /AGMCORE_currentucr load}{/Procedure get_res}ifelse
	dup currentundercolorremoval eq {pop}{setundercolorremoval}ifelse
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			{/sep_colorspace_dict AGMCORE_gget/ForeignContent known not}{false}ifelse
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput/sep_colorspace_dict AGMCORE_gget/ForeignContent true put}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0
%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.
%%Version: 2.31 0
10 dict begin
/Adobe_CoolType_Passthru currentdict def
/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known def
Adobe_CoolType_Core_Defined
	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}
if
userdict/Adobe_CoolType_Core 70 dict dup begin put
/Adobe_CoolType_Version 2.31 def
/Level2?
	systemdict/languagelevel known dup
		{pop systemdict/languagelevel get 2 ge}
	if def
Level2? not
	{
	/currentglobal false def
	/setglobal/pop load def
	/gcheck{pop false}bind def
	/currentpacking false def
	/setpacking/pop load def
	/SharedFontDirectory 0 dict def
	}
if
currentpacking
true setpacking
currentglobal false setglobal
userdict/Adobe_CoolType_Data 2 copy known not
	{2 copy 10 dict put}
if
get
	 begin
	/@opStackCountByLevel 32 dict def
	/@opStackLevel 0 def
	/@dictStackCountByLevel 32 dict def
	/@dictStackLevel 0 def
	 end
setglobal
currentglobal true setglobal
userdict/Adobe_CoolType_GVMFonts known not
	{userdict/Adobe_CoolType_GVMFonts 10 dict put}
if
setglobal
currentglobal false setglobal
userdict/Adobe_CoolType_LVMFonts known not
	{userdict/Adobe_CoolType_LVMFonts 10 dict put}
if
setglobal
/ct_VMDictPut
	{
	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse
	3 1 roll put
	}bind def
/ct_VMDictUndef
	{
	dup Adobe_CoolType_GVMFonts exch known
		{Adobe_CoolType_GVMFonts exch undef}
		{
			dup Adobe_CoolType_LVMFonts exch known
			{Adobe_CoolType_LVMFonts exch undef}
			{pop}
			ifelse
		}ifelse
	}bind def
/ct_str1 1 string def
/ct_xshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_yshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0 exch
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_xyshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			{_ct_na _ct_i 1 add get}stopped 
			{pop pop pop}
			{
				_ct_x _ct_y moveto
				rmoveto
			}
			ifelse
		}
		ifelse
		/_ct_i _ct_i 2 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def
/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def
/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind def
currentglobal true setglobal
/ct_T3Defs
{
/BuildChar
{
	1 index/Encoding get exch get
	1 index/BuildGlyph get exec
}bind def
/BuildGlyph
{
	exch begin
	GlyphProcs exch get exec
	end
}bind def
}bind def
setglobal
/@_SaveStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@vmState currentglobal def false setglobal
		@opStackCountByLevel
		@opStackLevel
		2 copy known not
			{
			2 copy
			3 dict dup/args
			7 index
			5 add array put
			put get
			}
			{
			get dup/args get dup length 3 index lt
				{
				dup length 5 add array exch
				1 index exch 0 exch putinterval
				1 index exch/args exch put
				}
				{pop}
			ifelse
			}
		ifelse
			begin
			count 1 sub
			1 index lt
				{pop count}
			if
			dup/argCount exch def
			dup 0 gt
				{
				args exch 0 exch getinterval 
			astore pop
				}
				{pop}
			ifelse
			count
			/restCount exch def
			end
		/@opStackLevel @opStackLevel 1 add def
		countdictstack 1 sub
		@dictStackCountByLevel exch @dictStackLevel exch put
		/@dictStackLevel @dictStackLevel 1 add def
		@vmState setglobal
		end
	}bind def
/@_RestoreStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		@opStackCountByLevel @opStackLevel get
			begin
			count restCount sub dup 0 gt
				{{pop}repeat}
				{pop}
			ifelse
			args 0 argCount getinterval{}forall
			end
		/@dictStackLevel @dictStackLevel 1 sub def
		@dictStackCountByLevel @dictStackLevel get
		end
	countdictstack exch sub dup 0 gt
		{{end}repeat}
		{pop}
	ifelse
	}bind def
/@_PopStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		/@dictStackLevel @dictStackLevel 1 sub def
		end
	}bind def
/@Raise
	{
	exch cvx exch errordict exch get exec
	stop
	}bind def
/@ReRaise
	{
	cvx $error/errorname get errordict exch get exec
	stop
	}bind def
/@Stopped
	{
	0 @#Stopped
	}bind def
/@#Stopped
	{
	@_SaveStackLevels
	stopped
		{@_RestoreStackLevels true}
		{@_PopStackLevels false}
	ifelse
	}bind def
/@Arg
	{
	Adobe_CoolType_Data
		begin
		@opStackCountByLevel @opStackLevel 1 sub get
		begin
		args exch
		argCount 1 sub exch sub get
		end
		end
	}bind def
currentglobal true setglobal
/CTHasResourceForAllBug
	Level2?
		{
		1 dict dup
				/@shouldNotDisappearDictValue true def
				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put
				begin
				count @_SaveStackLevels
					{(*){pop stop}128 string/Category resourceforall}
				stopped pop
				@_RestoreStackLevels
				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll
					{
						 /@shouldNotDisappearDictValue known
								{
										 {
												end
												currentdict 1 index eq
													{pop exit}
												if
										 }
									 loop
								}
						 if
					}
					{
						 pop
						 end
					}
				ifelse
		}
		{false}
	ifelse
	def
true setglobal
/CTHasResourceStatusBug
	Level2?
		{
		mark
			{/steveamerige/Category resourcestatus}
		stopped
			{cleartomark true}
			{cleartomark currentglobal not}
		ifelse
		}
		{false}
	ifelse
	def
setglobal
/CTResourceStatus
		{
		mark 3 1 roll
		/Category findresource
			begin
			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
				{cleartomark false}
				{{3 2 roll pop true}{cleartomark false}ifelse}
			ifelse
			end
		}bind def
/CTWorkAroundBugs
	{
	Level2?
		{
		/cid_PreLoad/ProcSet resourcestatus
			{
			pop pop
			currentglobal
			mark
				{
				(*)
					{
					dup/CMap CTHasResourceStatusBug
						{CTResourceStatus}
						{resourcestatus}
					ifelse
						{
						pop dup 0 eq exch 1 eq or
							{
							dup/CMap findresource gcheck setglobal
							/CMap undefineresource
							}
							{
							pop CTHasResourceForAllBug
								{exit}
								{stop}
							ifelse
							}
						ifelse
						}
						{pop}
					ifelse
					}
				128 string/CMap resourceforall
				}
			stopped
				{cleartomark}
			stopped pop
			setglobal
			}
		if
		}
	if
	}bind def
/ds
	{
	Adobe_CoolType_Core
		begin
		CTWorkAroundBugs
		/mo/moveto load def
		/nf/newencodedfont load def
		/msf{makefont setfont}bind def
		/uf{dup undefinefont ct_VMDictUndef}bind def
		/ur/undefineresource load def
		/chp/charpath load def
		/awsh/awidthshow load def
		/wsh/widthshow load def
		/ash/ashow load def
		/@xshow/xshow load def
		/@yshow/yshow load def
		/@xyshow/xyshow load def
		/@cshow/cshow load def
		/sh/show load def
		/rp/repeat load def
		/.n/.notdef def
		end
		currentglobal false setglobal
	 userdict/Adobe_CoolType_Data 2 copy known not
		 {2 copy 10 dict put}
		if
		get
		begin
		/AddWidths? false def
		/CC 0 def
		/charcode 2 string def
		/@opStackCountByLevel 32 dict def
		/@opStackLevel 0 def
		/@dictStackCountByLevel 32 dict def
		/@dictStackLevel 0 def
		/InVMFontsByCMap 10 dict def
		/InVMDeepCopiedFonts 10 dict def
		end
		setglobal
	}bind def
/dt
	{
	currentdict Adobe_CoolType_Core eq
		{end}
	if
	}bind def
/ps
	{
	Adobe_CoolType_Core begin
	Adobe_CoolType_GVMFonts begin
	Adobe_CoolType_LVMFonts begin
	SharedFontDirectory begin
	}bind def
/pt
	{
	end
	end
	end
	end
	}bind def
/unload
	{
	systemdict/languagelevel known
		{
		systemdict/languagelevel get 2 ge
			{
			userdict/Adobe_CoolType_Core 2 copy known
				{undef}
				{pop pop}
			ifelse
			}
		if
		}
	if
	}bind def
/ndf
	{
	1 index where
		{pop pop pop}
		{dup xcheck{bind}if def}
	ifelse
	}def
/findfont systemdict
	begin
	userdict
		begin
		/globaldict where{/globaldict get begin}if
			dup where pop exch get
		/globaldict where{pop end}if
		end
	end
Adobe_CoolType_Core_Defined
	{/systemfindfont exch def}
	{
	/findfont 1 index def
	/systemfindfont exch def
	}
ifelse
/undefinefont
	{pop}ndf
/copyfont
	{
	currentglobal 3 1 roll
	1 index gcheck setglobal
	dup null eq{0}{dup length}ifelse
	2 index length add 1 add dict
		begin
		exch
			{
			1 index/FID eq
				{pop pop}
				{def}
			ifelse
			}
		forall
		dup null eq
			{pop}
			{{def}forall}
		ifelse
		currentdict
		end
	exch setglobal
	}bind def
/copyarray
	{
	currentglobal exch
	dup gcheck setglobal
	dup length array copy
	exch setglobal
	}bind def
/newencodedfont
	{
	currentglobal
		{
		SharedFontDirectory 3 index known
			{SharedFontDirectory 3 index get/FontReferenced known}
			{false}
		ifelse
		}
		{
		FontDirectory 3 index known
			{FontDirectory 3 index get/FontReferenced known}
			{
			SharedFontDirectory 3 index known
				{SharedFontDirectory 3 index get/FontReferenced known}
				{false}
			ifelse
			}
		ifelse
		}
	ifelse
	dup
		{
		3 index findfont/FontReferenced get
		2 index dup type/nametype eq
			{findfont}
		if ne
			{pop false}
		if
		}
	if
	dup
		{
		1 index dup type/nametype eq
			{findfont}
		 if
		dup/CharStrings known
			{
			/CharStrings get length
			4 index findfont/CharStrings get length
			ne
				{
				pop false
				}
			if 
			}
			{pop}
			ifelse
		}
	if
		{
		pop
		1 index findfont
		/Encoding get exch
		0 1 255
			{2 copy get 3 index 3 1 roll put}
		for
		pop pop pop
		}
		{
		currentglobal
	 4 1 roll
		dup type/nametype eq
		 {findfont}
	 if
	 dup gcheck setglobal
		dup dup maxlength 2 add dict
			begin
			exch
				{
				1 index/FID ne
				2 index/Encoding ne and
					{def}
					{pop pop}
				ifelse
				}
			forall
			/FontReferenced exch def
			/Encoding exch dup length array copy def
			/FontName 1 index dup type/stringtype eq{cvn}if def dup
			currentdict
			end
		definefont ct_VMDictPut
		setglobal
		}
	ifelse
	}bind def
/SetSubstituteStrategy
	{
	$SubstituteFont
		begin
		dup type/dicttype ne
			{0 dict}
		if
		currentdict/$Strategies known
			{
			exch $Strategies exch 
			2 copy known
				{
				get
				2 copy maxlength exch maxlength add dict
					begin
					{def}forall
					{def}forall
					currentdict
					dup/$Init known
						{dup/$Init get exec}
					if
					end
				/$Strategy exch def
				}
				{pop pop pop}
			ifelse
			}
			{pop pop}
		ifelse
		end
	}bind def
/scff
	{
	$SubstituteFont
		begin
		dup type/stringtype eq
			{dup length exch}
			{null}
		ifelse
		/$sname exch def
		/$slen exch def
		/$inVMIndex
			$sname null eq
				{
				1 index $str cvs
				dup length $slen sub $slen getinterval cvn
				}
				{$sname}
			ifelse def
		end
		{findfont}
	@Stopped
		{
		dup length 8 add string exch
		1 index 0(BadFont:)putinterval
		1 index exch 8 exch dup length string cvs putinterval cvn
			{findfont}
		@Stopped
			{pop/Courier findfont}
		if
		}
	if
	$SubstituteFont
		begin
		/$sname null def
		/$slen 0 def
		/$inVMIndex null def
		end
	}bind def
/isWidthsOnlyFont
	{
	dup/WidthsOnly known
		{pop pop true}
		{
		dup/FDepVector known
			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}
			{
			dup/FDArray known
				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}
				{pop}
			ifelse
			}
		ifelse
		}
	ifelse
	}bind def
/ct_StyleDicts 4 dict dup begin
		 /Adobe-Japan1 4 dict dup begin
					 Level2?
								{
								/Serif
								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMin-W3}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMin-W3/CIDFont resourcestatus
								{pop pop/HeiseiMin-W3}
								{/Ryumin-Light}
								ifelse
							}
							{/Ryumin-Light}
							ifelse
								}
								ifelse
								def
								/SansSerif
								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiKakuGo-W5/CIDFont resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{/GothicBBB-Medium}
								ifelse
							}
							{/GothicBBB-Medium}
							ifelse
								}
								ifelse
								def
								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMaruGo-W4/CIDFont resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
									/Jun101-Light-RKSJ-H/Font resourcestatus
									{pop pop/Jun101-Light}
									{SansSerif}
									ifelse
								}
								ifelse
							}
							{
								/Jun101-Light-RKSJ-H/Font resourcestatus
								{pop pop/Jun101-Light}
								{SansSerif}
								ifelse
							}
							ifelse
								}
								ifelse
								/RoundSansSerif exch def
								/Default Serif def
								}
								{
								/Serif/Ryumin-Light def
								/SansSerif/GothicBBB-Medium def
								{
								(fonts/Jun101-Light-83pv-RKSJ-H)status
								}stopped
								{pop}{
										 {pop pop pop pop/Jun101-Light}
										 {SansSerif}
										 ifelse
										 /RoundSansSerif exch def
								}ifelse
								/Default Serif def
								}
					 ifelse
		 end
		 def
		 /Adobe-Korea1 4 dict dup begin
					/Serif/HYSMyeongJo-Medium def
					/SansSerif/HYGoThic-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-GB1 4 dict dup begin
					/Serif/STSong-Light def
					/SansSerif/STHeiti-Regular def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-CNS1 4 dict dup begin
					/Serif/MKai-Medium def
					/SansSerif/MHei-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
end
def
Level2?{currentglobal true setglobal}if
/ct_BoldRomanWidthProc 
	{
	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth
	0 0
	}bind def
/ct_Type0WidthProc 
	{
	 dup stringwidth 0 0 moveto 
	 2 index true charpath pathbbox
	 0 -1 
	 7 index 2 div .88 
	 setcachedevice2
	 pop
	0 0
	}bind def
/ct_Type0WMode1WidthProc 
	{
	 dup stringwidth 
	 pop 2 div neg -0.88
	2 copy
	moveto 
	0 -1
	 5 -1 roll true charpath pathbbox
	 setcachedevice
	}bind def
/cHexEncoding
[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
/ct_BoldBaseFont 
	 11 dict begin
		/FontType 3 def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/Encoding cHexEncoding def 
		/_setwidthProc/ct_BoldRomanWidthProc load def
		/_bcstr1 1 string def
		/BuildChar
		{
			exch begin
				_basefont setfont
				_bcstr1 dup 0 4 -1 roll put
				dup 
				_setwidthProc
				3 copy 
				moveto				
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
systemdict/composefont known
{
/ct_DefineIdentity-H
{
	/Identity-H/CMap resourcestatus
	{
		pop pop
	}
	{
		/CIDInit/ProcSet findresource begin
		 12 dict begin
		 begincmap
		 /CIDSystemInfo 3 dict dup begin
			 /Registry(Adobe)def
			 /Ordering(Identity)def
			 /Supplement 0 def
		 end def
		 /CMapName/Identity-H def
		 /CMapVersion 1.000 def
		 /CMapType 1 def
		 1 begincodespacerange
		 <0000><FFFF>
		 endcodespacerange
		 1 begincidrange
		 <0000><FFFF>0
		 endcidrange
		 endcmap
		 CMapName currentdict/CMap defineresource pop
		 end
		 end
	 }
	 ifelse
}
def
/ct_BoldBaseCIDFont 
	 11 dict begin
		/CIDFontType 1 def
		/CIDFontName/ct_BoldBaseCIDFont def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/_setwidthProc/ct_Type0WidthProc load def
		/_bcstr2 2 string def
		/BuildGlyph
		{
			exch begin		 
				_basefont setfont
				_bcstr2 1 2 index 256 mod put
				_bcstr2 0 3 -1 roll 256 idiv put
				_bcstr2 dup _setwidthProc		 
				3 copy 
				moveto
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
}if
Level2?{setglobal}if
/ct_CopyFont{
	{
		1 index/FID ne 2 index/UniqueID ne and
		{def}{pop pop}ifelse
	}forall
}bind def
/ct_Type0CopyFont 
{
	exch
	dup length dict
	begin
	ct_CopyFont
	[
	exch
	FDepVector 
	{
		 dup/FontType get 0 eq
		{	
		1 index ct_Type0CopyFont 
		/_ctType0 exch definefont
		}
		{
		/_ctBaseFont exch
		2 index exec
		}
		 ifelse 
		 exch
	}
	forall 
	pop
	]				
	/FDepVector exch def
	currentdict
	end
}bind def
/ct_MakeBoldFont
{
	 dup/ct_SyntheticBold known
	{
		dup length 3 add dict begin 
		ct_CopyFont 
		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 
		/ct_SyntheticBold true def
		currentdict 
		end 
		definefont
	}
	{
		dup dup length 3 add dict
		begin
			ct_CopyFont
			/PaintType 2 def
			/StrokeWidth .03 0 FontMatrix idtransform pop def
			/dummybold currentdict
		end
		definefont
		dup/FontType get dup 9 ge exch 11 le and 
		{
			ct_BoldBaseCIDFont
			dup length 3 add dict copy begin
			dup/CIDSystemInfo get/CIDSystemInfo exch def
			ct_DefineIdentity-H
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefont exch def
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefonto exch def
			currentdict
			end
			/CIDFont defineresource
		}
		{
			ct_BoldBaseFont
			dup length 3 add dict copy begin
			/_basefont exch def
			/_basefonto exch def
			currentdict
			end
			definefont
		}
		ifelse
	}
	ifelse
}bind def
/ct_MakeBold{
	1 index 
	1 index
	findfont
	currentglobal 5 1 roll
	dup gcheck setglobal
		dup
		 /FontType get 0 eq
			{
				dup/WMode known{dup/WMode get 1 eq}{false}ifelse
				version length 4 ge
				and
					{version 0 4 getinterval cvi 2015 ge}
					{true}
				ifelse 
					{/ct_Type0WidthProc}
					{/ct_Type0WMode1WidthProc}
				ifelse
				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put
						{ct_MakeBoldFont}ct_Type0CopyFont definefont
			}
			{
				dup/_fauxfont known not 1 index/SubstMaster known not and
				{
					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put
					 ct_MakeBoldFont 
				}
				{
				2 index 2 index eq
					{exch pop	}
					{
						dup length dict begin
						ct_CopyFont
						currentdict
						end
						definefont 
					}
				ifelse
				}
			ifelse
			}
		 ifelse
		 pop pop pop
		 setglobal
}bind def
/?str1 256 string def
/?set
	{
	$SubstituteFont
		begin
		/$substituteFound false def
		/$fontname 1 index def
		/$doSmartSub false def
		end
	dup
	 findfont
	$SubstituteFont
		begin
		$substituteFound
			{false}
			{
			dup/FontName known
				{
				dup/FontName get $fontname eq
				1 index/DistillerFauxFont known not and
				/currentdistillerparams where
					{pop false 2 index isWidthsOnlyFont not and}
				if
				}
				{false}
			ifelse
			}
		ifelse
		exch pop
		/$doSmartSub true def
		end
		{
		5 1 roll pop pop pop pop
		findfont
		}
		{
		1 index
		findfont
		dup/FontType get 3 eq
		{
			6 1 roll pop pop pop pop pop false
		}
		{pop true}
		ifelse
		{
		$SubstituteFont
		begin
		pop pop
		/$styleArray 1 index def
		/$regOrdering 2 index def
		pop pop
		0 1 $styleArray length 1 sub
		{
			$styleArray exch get
			ct_StyleDicts $regOrdering
			2 copy known
			{
				get
				exch 2 copy known not
				{pop/Default}
				if
				get
				dup type/nametype eq
				{
				?str1 cvs length dup 1 add exch
				?str1 exch(-)putinterval
				exch dup length exch ?str1 exch 3 index exch putinterval
				add ?str1 exch 0 exch getinterval cvn
				}
				{
				pop pop/Unknown
				}
				ifelse
			}
			{
				pop pop pop pop/Unknown
			}
			ifelse
		}
		for
		end
		findfont 
		}if
		}
	ifelse
	currentglobal false setglobal 3 1 roll
	null copyfont definefont pop
	setglobal
	}bind def
setpacking
userdict/$SubstituteFont 25 dict put
1 dict
	begin
	/SubstituteFont
		dup $error exch 2 copy known
			{get}
			{pop pop{pop/Courier}bind}
		ifelse def
	/currentdistillerparams where dup
		{
		pop pop
		currentdistillerparams/CannotEmbedFontPolicy 2 copy known
			{get/Error eq}
			{pop pop false}
		ifelse
		}
	if not
		{
		countdictstack array dictstack 0 get
			begin
			userdict
				begin
				$SubstituteFont
					begin
					/$str 128 string def
					/$fontpat 128 string def
					/$slen 0 def
					/$sname null def
					/$match false def
					/$fontname null def
					/$substituteFound false def
					/$inVMIndex null def
					/$doSmartSub true def
					/$depth 0 def
					/$fontname null def
					/$italicangle 26.5 def
					/$dstack null def
					/$Strategies 10 dict dup
						begin
						/$Type3Underprint
							{
							currentglobal exch false setglobal
							11 dict
								begin
								/UseFont exch
									$WMode 0 ne
										{
										dup length dict copy
										dup/WMode $WMode put
										/UseFont exch definefont
										}
									if def
								/FontName $fontname dup type/stringtype eq{cvn}if def
								/FontType 3 def
								/FontMatrix[.001 0 0 .001 0 0]def
								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def
								/FontBBox[0 0 0 0]def
								/CCInfo 7 dict dup
									begin
									/cc null def
									/x 0 def
									/y 0 def
									end def
								/BuildChar
									{
									exch
										begin
										CCInfo
											begin
											1 string dup 0 3 index put exch pop
											/cc exch def
											UseFont 1000 scalefont setfont
											cc stringwidth/y exch def/x exch def
											x y setcharwidth
											$SubstituteFont/$Strategy get/$Underprint get exec
											0 0 moveto cc show
											x y moveto
											end
										end
									}bind def
								currentdict
								end
							exch setglobal
							}bind def
						/$GetaTint
							2 dict dup
								begin
								/$BuildFont
									{
									dup/WMode known
										{dup/WMode get}
										{0}
									ifelse
									/$WMode exch def
									$fontname exch
									dup/FontName known
										{
										dup/FontName get
										dup type/stringtype eq{cvn}if
										}
										{/unnamedfont}
									ifelse
									exch
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
									1 index/FontName get known
										{
										pop
										Adobe_CoolType_Data/InVMDeepCopiedFonts get
										1 index get
										null copyfont
										}
										{$deepcopyfont}
									ifelse
									exch 1 index exch/FontBasedOn exch put
									dup/FontName $fontname dup type/stringtype eq{cvn}if put
									definefont
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
										begin
										dup/FontBasedOn get 1 index def
										end
									}bind def
								/$Underprint
									{
									gsave
									x abs y abs gt
										{/y 1000 def}
										{/x -1000 def 500 120 translate}
									ifelse
									Level2?
										{
										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]
										setcolorspace
										}
										{0 setgray}
									ifelse
									10 setlinewidth
									x .8 mul
									[7 3]
										{
										y mul 8 div 120 sub x 10 div exch moveto
										0 y 4 div neg rlineto
										dup 0 rlineto
										0 y 4 div rlineto
										closepath
										gsave
										Level2?
											{.2 setcolor}
											{.8 setgray}
										ifelse
										fill grestore
										stroke
										}
									forall
									pop
									grestore
									}bind def
								end def
						/$Oblique
							1 dict dup
								begin
								/$BuildFont
									{
									currentglobal exch dup gcheck setglobal
									null copyfont
										begin
										/FontBasedOn
										currentdict/FontName known
											{
											FontName
											dup type/stringtype eq{cvn}if
											}
											{/unnamedfont}
										ifelse
										def
										/FontName $fontname dup type/stringtype eq{cvn}if def
										/currentdistillerparams where
											{pop}
											{
											/FontInfo currentdict/FontInfo known
												{FontInfo null copyfont}
												{2 dict}
											ifelse
											dup
												begin
												/ItalicAngle $italicangle def
												/FontMatrix FontMatrix
												[1 0 ItalicAngle dup sin exch cos div 1 0 0]
												matrix concatmatrix readonly
												end
											4 2 roll def
											def
											}
										ifelse
										FontName currentdict
										end
									definefont
									exch setglobal
									}bind def
								end def
						/$None
							1 dict dup
								begin
								/$BuildFont{}bind def
								end def
						end def
					/$Oblique SetSubstituteStrategy
					/$findfontByEnum
						{
						dup type/stringtype eq{cvn}if
						dup/$fontname exch def
						$sname null eq
							{$str cvs dup length $slen sub $slen getinterval}
							{pop $sname}
						ifelse
						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval
						/$match false def
						$SubstituteFont/$dstack countdictstack array dictstack put
						mark
							{
							$fontpat 0 $slen 7 add getinterval
								{/$match exch def exit}
							$str filenameforall
							}
						stopped
							{
							cleardictstack
							currentdict
							true
							$SubstituteFont/$dstack get
								{
								exch
									{
									1 index eq
										{pop false}
										{true}
									ifelse
									}
									{begin false}
								ifelse
								}
							forall
							pop
							}
						if
						cleartomark
						/$slen 0 def
						$match false ne
							{$match(fonts/)anchorsearch pop pop cvn}
							{/Courier}
						ifelse
						}bind def
					/$ROS 1 dict dup
						begin
						/Adobe 4 dict dup
							begin
							/Japan1 [/Ryumin-Light/HeiseiMin-W3
										 /GothicBBB-Medium/HeiseiKakuGo-W5
										 /HeiseiMaruGo-W4/Jun101-Light]def
							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def
							/GB1	 [/STSong-Light/STHeiti-Regular]def
							/CNS1	[/MKai-Medium/MHei-Medium]def
							end def
						end def
					/$cmapname null def
					/$deepcopyfont
						{
						dup/FontType get 0 eq
							{
							1 dict dup/FontName/copied put copyfont
								begin
								/FDepVector FDepVector copyarray
								0 1 2 index length 1 sub
									{
									2 copy get $deepcopyfont
									dup/FontName/copied put
									/copied exch definefont
									3 copy put pop pop
									}
								for
								def
								currentdict
								end
							}
							{$Strategies/$Type3Underprint get exec}
						ifelse
						}bind def
					/$buildfontname
						{
						dup/CIDFont findresource/CIDSystemInfo get
							begin
							Registry length Ordering length Supplement 8 string cvs
							3 copy length 2 add add add string
							dup 5 1 roll dup 0 Registry putinterval
							dup 4 index(-)putinterval
							dup 4 index 1 add Ordering putinterval
							4 2 roll add 1 add 2 copy(-)putinterval
							end
						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch
						anchorsearch
							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}
							{pop pop pop pop pop}
						ifelse
						length
						$str 1 index(-)putinterval 1 add
						$str 1 index $cmapname $fontpat cvs putinterval
						$cmapname length add
						$str exch 0 exch getinterval cvn
						}bind def
					/$findfontByROS
						{
						/$fontname exch def
						$ROS Registry 2 copy known
							{
							get Ordering 2 copy known
								{get}
								{pop pop[]}
							ifelse
							}
							{pop pop[]}
						ifelse
						false exch
							{
							dup/CIDFont resourcestatus
								{
								pop pop
								save
								1 index/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get}
									{false}
								ifelse
								exch pop
								exch restore
									{pop}
									{exch pop true exit}
								ifelse
								}
								{pop}
							ifelse
							}
						forall
							{$str cvs $buildfontname}
							{
							false(*)
								{
								save exch
								dup/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get not}
									{true}
								ifelse
								exch/CIDSystemInfo get
								dup/Registry get Registry eq
								exch/Ordering get Ordering eq and and
									{exch restore exch pop true exit}
									{pop restore}
								ifelse
								}
							$str/CIDFont resourceforall
								{$buildfontname}
								{$fontname $findfontByEnum}
							ifelse
							}
						ifelse
						}bind def
					end
				end
				currentdict/$error known currentdict/languagelevel known and dup
					{pop $error/SubstituteFont known}
				if
				dup
					{$error}
					{Adobe_CoolType_Core}
				ifelse
				begin
					{
					/SubstituteFont
					/CMap/Category resourcestatus
						{
						pop pop
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{
								$sname null eq
									{dup $str cvs dup length $slen sub $slen getinterval cvn}
									{$sname}
								ifelse
								Adobe_CoolType_Data/InVMFontsByCMap get
								1 index 2 copy known
									{
									get
									false exch
										{
										pop
										currentglobal
											{
											GlobalFontDirectory 1 index known
												{exch pop true exit}
												{pop}
											ifelse
											}
											{
											FontDirectory 1 index known
												{exch pop true exit}
												{
												GlobalFontDirectory 1 index known
													{exch pop true exit}
													{pop}
												ifelse
												}
											ifelse
											}
										ifelse
										}
									forall
									}
									{pop pop false}
								ifelse
									{
									exch pop exch pop
									}
									{
									dup/CMap resourcestatus
										{
										pop pop
										dup/$cmapname exch def
										/CMap findresource/CIDSystemInfo get{def}forall
										$findfontByROS
										}
										{
										128 string cvs
										dup(-)search
											{
											3 1 roll search
												{
												3 1 roll pop
													{dup cvi}
												stopped
													{pop pop pop pop pop $findfontByEnum}
													{
													4 2 roll pop pop
													exch length
													exch
													2 index length
													2 index
													sub
													exch 1 sub -1 0
														{
														$str cvs dup length
														4 index
														0
														4 index
														4 3 roll add
														getinterval
														exch 1 index exch 3 index exch
														putinterval
														dup/CMap resourcestatus
															{
															pop pop
															4 1 roll pop pop pop
															dup/$cmapname exch def
															/CMap findresource/CIDSystemInfo get{def}forall
															$findfontByROS
															true exit
															}
															{pop}
														ifelse
														}
													for
													dup type/booleantype eq
														{pop}
														{pop pop pop $findfontByEnum}
													ifelse
													}
												ifelse
												}
												{pop pop pop $findfontByEnum}
											ifelse
											}
											{pop pop $findfontByEnum}
										ifelse
										}
									ifelse
									}
								ifelse
								}
								{//SubstituteFont exec}
							ifelse
							/$slen 0 def
							end
						}
						}
						{
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{$findfontByEnum}
								{//SubstituteFont exec}
							ifelse
							end
						}
						}
					ifelse
					bind readonly def
					Adobe_CoolType_Core/scfindfont/systemfindfont load put
					}
					{
					/scfindfont
						{
						$SubstituteFont
							begin
							dup systemfindfont
							dup/FontName known
								{dup/FontName get dup 3 index ne}
								{/noname true}
							ifelse
							dup
								{
								/$origfontnamefound 2 index def
								/$origfontname 4 index def/$substituteFound true def
								}
							if
							exch pop
								{
								$slen 0 gt
								$sname null ne
								3 index length $slen gt or and
									{
									pop dup $findfontByEnum findfont
									dup maxlength 1 add dict
										begin
											{1 index/FID eq{pop pop}{def}ifelse}
										forall
										currentdict
										end
									definefont
									dup/FontName known{dup/FontName get}{null}ifelse
									$origfontnamefound ne
										{
										$origfontname $str cvs print
										( substitution revised, using )print
										dup/FontName known
											{dup/FontName get}{(unspecified font)}
										ifelse
										$str cvs print(.\n)print
										}
									if
									}
									{exch pop}
								ifelse
								}
								{exch pop}
							ifelse
							end
						}bind def
					}
				ifelse
				end
			end
		Adobe_CoolType_Core_Defined not
			{
			Adobe_CoolType_Core/findfont
				{
				$SubstituteFont
					begin
					$depth 0 eq
						{
						/$fontname 1 index dup type/stringtype ne{$str cvs}if def
						/$substituteFound false def
						}
					if
					/$depth $depth 1 add def
					end
				scfindfont
				$SubstituteFont
					begin
					/$depth $depth 1 sub def
					$substituteFound $depth 0 eq and
						{
						$inVMIndex null ne
							{dup $inVMIndex $AddInVMFont}
						if
						$doSmartSub
							{
							currentdict/$Strategy known
								{$Strategy/$BuildFont get exec}
							if
							}
						if
						}
					if
					end
				}bind put
			}
		if
		}
	if
	end
/$AddInVMFont
	{
	exch/FontName 2 copy known
		{
		get
		1 dict dup begin exch 1 index gcheck def end exch
		Adobe_CoolType_Data/InVMFontsByCMap get exch
		$DictAdd
		}
		{pop pop pop}
	ifelse
	}bind def
/$DictAdd
	{
	2 copy known not
		{2 copy 4 index length dict put}
	if
	Level2? not
		{
		2 copy get dup maxlength exch length 4 index length add lt
		2 copy get dup length 4 index length add exch maxlength 1 index lt
			{
			2 mul dict
				begin
				2 copy get{forall}def
				2 copy currentdict put
				end
			}
			{pop}
		ifelse
		}
	if
	get
		begin
			{def}
		forall
		end
	}bind def
end
end
%%EndResource
currentglobal true setglobal
%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.
%%Version: 1.23 0
systemdict/languagelevel known dup
	{currentglobal false setglobal}
	{false}
ifelse
exch
userdict/Adobe_CoolType_Utility 2 copy known
	{2 copy get dup maxlength 27 add dict copy}
	{27 dict}
ifelse put
Adobe_CoolType_Utility
	begin
	/@eexecStartData
		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E
		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C
		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def
	/@recognizeCIDFont null def
	/ct_Level2? exch def
	/ct_Clone? 1183615869 internaldict dup
			/CCRun known not
			exch/eCCRun known not
			ct_Level2? and or def
ct_Level2?
	{globaldict begin currentglobal true setglobal}
if
	/ct_AddStdCIDMap
		ct_Level2?
			{{
				mark
				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put
					{
					((Hex)57 StartData
					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0
					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60
					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8
					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec
					}
				stopped
					{
					 cleartomark
					 Adobe_CoolType_Utility/@recognizeCIDFont get
					 countdictstack dup array dictstack
					 exch 1 sub -1 0
						 {
						 2 copy get 3 index eq
								{1 index length exch sub 1 sub{end}repeat exit}
								{pop}
						 ifelse
						 }
					 for
					 pop pop
					 Adobe_CoolType_Utility/@eexecStartData get eexec
					}
					{cleartomark}
				ifelse
			}}
			{{
				Adobe_CoolType_Utility/@eexecStartData get eexec
			}}
		ifelse bind def
userdict/cid_extensions known
dup{cid_extensions/cid_UpdateDB known and}if
	{
	 cid_extensions
	 begin
	/cid_GetCIDSystemInfo
		{
		 1 index type/stringtype eq
			{exch cvn exch}
		 if
		 cid_extensions
			 begin
			 dup load 2 index known
				{
				 2 copy
				 cid_GetStatusInfo
				 dup null ne
					{
					 1 index load
					 3 index get
					 dup null eq
						 {pop pop cid_UpdateDB}
						 {
						 exch
						 1 index/Created get eq
							 {exch pop exch pop}
							 {pop cid_UpdateDB}
						 ifelse
						 }
					 ifelse
					}
					{pop cid_UpdateDB}
				 ifelse
				}
				{cid_UpdateDB}
			 ifelse
			 end
		}bind def
	 end
	}
if
ct_Level2?
	{end setglobal}
if
	/ct_UseNativeCapability? systemdict/composefont known def
	/ct_MakeOCF 35 dict def
	/ct_Vars 25 dict def
	/ct_GlyphDirProcs 6 dict def
	/ct_BuildCharDict 15 dict dup
		begin
		/charcode 2 string def
		/dst_string 1500 string def
		/nullstring()def
		/usewidths? true def
		end def
	ct_Level2?{setglobal}{pop}ifelse
	ct_GlyphDirProcs
		begin
		/GetGlyphDirectory
			{
			systemdict/languagelevel known
				{pop/CIDFont findresource/GlyphDirectory get}
				{
				1 index/CIDFont findresource/GlyphDirectory
				get dup type/dicttype eq
					{
					dup dup maxlength exch length sub 2 index lt
						{
						dup length 2 index add dict copy 2 index
						/CIDFont findresource/GlyphDirectory 2 index put
						}
					if
					}
				if
				exch pop exch pop
				}
			ifelse
			+
			}def
		/+
			{
			systemdict/languagelevel known
				{
				currentglobal false setglobal
				3 dict begin
					/vm exch def
				}
				{1 dict begin}
			ifelse
			/$ exch def
			systemdict/languagelevel known
				{
				vm setglobal
				/gvm currentglobal def
				$ gcheck setglobal
				}
			if
			?{$ begin}if
			}def
		/?{$ type/dicttype eq}def
		/|{
			userdict/Adobe_CoolType_Data known
				{
			Adobe_CoolType_Data/AddWidths? known
				{
				 currentdict Adobe_CoolType_Data
					begin
					 begin
						AddWidths?
								{
								Adobe_CoolType_Data/CC 3 index put
								?{def}{$ 3 1 roll put}ifelse
								CC charcode exch 1 index 0 2 index 256 idiv put
								1 index exch 1 exch 256 mod put
								stringwidth 2 array astore
								currentfont/Widths get exch CC exch put
								}
								{?{def}{$ 3 1 roll put}ifelse}
							ifelse
					end
				end
				}
				{?{def}{$ 3 1 roll put}ifelse}	ifelse
				}
				{?{def}{$ 3 1 roll put}ifelse}
			ifelse
			}def
		/!
			{
			?{end}if
			systemdict/languagelevel known
				{gvm setglobal}
			if
			end
			}def
		/:{string currentfile exch readstring pop}executeonly def
		end
	ct_MakeOCF
		begin
		/ct_cHexEncoding
		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
		/ct_CID_STR_SIZE 8000 def
		/ct_mkocfStr100 100 string def
		/ct_defaultFontMtx[.001 0 0 .001 0 0]def
		/ct_1000Mtx[1000 0 0 1000 0 0]def
		/ct_raise{exch cvx exch errordict exch get exec stop}bind def
		/ct_reraise
			{cvx $error/errorname get(Error: )print dup(						 )cvs print
					errordict exch get exec stop
			}bind def
		/ct_cvnsi
			{
			1 index add 1 sub 1 exch 0 4 1 roll
				{
				2 index exch get
				exch 8 bitshift
				add
				}
			for
			exch pop
			}bind def
		/ct_GetInterval
			{
			Adobe_CoolType_Utility/ct_BuildCharDict get
				begin
				/dst_index 0 def
				dup dst_string length gt
					{dup string/dst_string exch def}
				if
				1 index ct_CID_STR_SIZE idiv
				/arrayIndex exch def
				2 index arrayIndex get
				2 index
				arrayIndex ct_CID_STR_SIZE mul
				sub
					{
					dup 3 index add 2 index length le
						{
						2 index getinterval
						dst_string dst_index 2 index putinterval
						length dst_index add/dst_index exch def
						exit
						}
						{
						1 index length 1 index sub
						dup 4 1 roll
						getinterval
						dst_string dst_index 2 index putinterval
						pop dup dst_index add/dst_index exch def
						sub
						/arrayIndex arrayIndex 1 add def
						2 index dup length arrayIndex gt
							 {arrayIndex get}
							 {
							 pop
							 exit
							 }
						ifelse
						0
						}
					ifelse
					}
				loop
				pop pop pop
				dst_string 0 dst_index getinterval
				end
			}bind def
		ct_Level2?
			{
			/ct_resourcestatus
			currentglobal mark true setglobal
				{/unknowninstancename/Category resourcestatus}
			stopped
				{cleartomark setglobal true}
				{cleartomark currentglobal not exch setglobal}
			ifelse
				{
					{
					mark 3 1 roll/Category findresource
						begin
						ct_Vars/vm currentglobal put
						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
							{cleartomark false}
							{{3 2 roll pop true}{cleartomark false}ifelse}
						ifelse
						ct_Vars/vm get setglobal
						end
					}
				}
				{{resourcestatus}}
			ifelse bind def
			/CIDFont/Category ct_resourcestatus
				{pop pop}
				{
				currentglobal true setglobal
				/Generic/Category findresource
				dup length dict copy
				dup/InstanceType/dicttype put
				/CIDFont exch/Category defineresource pop
				setglobal
				}
			ifelse
			ct_UseNativeCapability?
				{
				/CIDInit/ProcSet findresource begin
				12 dict begin
				begincmap
				/CIDSystemInfo 3 dict dup begin
				 /Registry(Adobe)def
				 /Ordering(Identity)def
				 /Supplement 0 def
				end def
				/CMapName/Identity-H def
				/CMapVersion 1.000 def
				/CMapType 1 def
				1 begincodespacerange
				<0000><FFFF>
				endcodespacerange
				1 begincidrange
				<0000><FFFF>0
				endcidrange
				endcmap
				CMapName currentdict/CMap defineresource pop
				end
				end
				}
			if
			}
			{
			/ct_Category 2 dict begin
			/CIDFont 10 dict def
			/ProcSet	2 dict def
			currentdict
			end
			def
			/defineresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					dup dup maxlength exch length eq
						{
						dup length 10 add dict copy
						ct_Category 2 index 2 index put
						}
					if
					3 index 3 index put
					pop exch pop
					}
					{pop pop/defineresource/undefined ct_raise}
				ifelse
				}bind def
			/findresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index 2 copy known
						{get 3 1 roll pop pop}
						{pop pop/findresource/undefinedresource ct_raise}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/resourcestatus
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index known
					exch pop exch pop
						{
						0 -1 true
						}
						{
						false
						}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/ct_resourcestatus/resourcestatus load def
			}
		ifelse
		/ct_CIDInit 2 dict
			begin
			/ct_cidfont_stream_init
				{
					{
					dup(Binary)eq
						{
						pop
						null
						currentfile
						ct_Level2?
							{
								{cid_BYTE_COUNT()/SubFileDecode filter}
							stopped
								{pop pop pop}
							if
							}
						if
						/readstring load
						exit
						}
					if
					dup(Hex)eq
						{
						pop
						currentfile
						ct_Level2?
							{
								{null exch/ASCIIHexDecode filter/readstring}
							stopped
								{pop exch pop(>)exch/readhexstring}
							if
							}
							{(>)exch/readhexstring}
						ifelse
						load
						exit
						}
					if
					/StartData/typecheck ct_raise
					}
				loop
				cid_BYTE_COUNT ct_CID_STR_SIZE le
					{
					2 copy cid_BYTE_COUNT string exch exec
					pop
					1 array dup
					3 -1 roll
					0 exch put
					}
					{
					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi
					dup array exch 2 sub 0 exch 1 exch
						{
						2 copy
						5 index
						ct_CID_STR_SIZE
						string
						6 index exec
						pop
						put
						pop
						}
					for
					2 index
					cid_BYTE_COUNT ct_CID_STR_SIZE mod string
					3 index exec
					pop
					1 index exch
					1 index length 1 sub
					exch put
					}
				ifelse
				cid_CIDFONT exch/GlyphData exch put
				2 index null eq
					{
					pop pop pop
					}
					{
					pop/readstring load
					1 string exch
						{
						3 copy exec
						pop
						dup length 0 eq
							{
							pop pop pop pop pop
							true exit
							}
						if
						4 index
						eq
							{
							pop pop pop pop
							false exit
							}
						if
						}
					loop
					pop
					}
				ifelse
				}bind def
			/StartData
				{
				mark
					{
					currentdict
					dup/FDArray get 0 get/FontMatrix get
					0 get 0.001 eq
						{
						dup/CDevProc known not
							{
							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known
								{get}
								{
								pop pop
								{pop pop pop pop pop 0 -1000 7 index 2 div 880}
								}
							ifelse
							def
							}
						if
						}
						{
						/CDevProc
							{
							 pop pop pop pop pop
							 0
							 1 cid_temp/cid_CIDFONT get
							/FDArray get 0 get
							/FontMatrix get 0 get div
							 7 index 2 div
							 1 index 0.88 mul
							}def
						}
					ifelse
					/cid_temp 15 dict def
					cid_temp
						begin
						/cid_CIDFONT exch def
						3 copy pop
						dup/cid_BYTE_COUNT exch def 0 gt
							{
							ct_cidfont_stream_init
							FDArray
								{
								/Private get
								dup/SubrMapOffset known
									{
									begin
									/Subrs SubrCount array def
									Subrs
									SubrMapOffset
									SubrCount
									SDBytes
									ct_Level2?
										{
										currentdict dup/SubrMapOffset undef
										dup/SubrCount undef
										/SDBytes undef
										}
									if
									end
									/cid_SD_BYTES exch def
									/cid_SUBR_COUNT exch def
									/cid_SUBR_MAP_OFFSET exch def
									/cid_SUBRS exch def
									cid_SUBR_COUNT 0 gt
										{
										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval
										0 cid_SD_BYTES ct_cvnsi
										0 1 cid_SUBR_COUNT 1 sub
											{
											exch 1 index
											1 add
											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add
											GlyphData exch cid_SD_BYTES ct_GetInterval
											0 cid_SD_BYTES ct_cvnsi
											cid_SUBRS 4 2 roll
											GlyphData exch
											4 index
											1 index
											sub
											ct_GetInterval
											dup length string copy put
											}
										for
										pop
										}
									if
									}
									{pop}
								ifelse
								}
							forall
							}
						if
						cleartomark pop pop
						end
					CIDFontName currentdict/CIDFont defineresource pop
					end end
					}
				stopped
					{cleartomark/StartData ct_reraise}
				if
				}bind def
			currentdict
			end def
		/ct_saveCIDInit
			{
			/CIDInit/ProcSet ct_resourcestatus
				{true}
				{/CIDInitC/ProcSet ct_resourcestatus}
			ifelse
				{
				pop pop
				/CIDInit/ProcSet findresource
				ct_UseNativeCapability?
					{pop null}
					{/CIDInit ct_CIDInit/ProcSet defineresource pop}
				ifelse
				}
				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}
			ifelse
			ct_Vars exch/ct_oldCIDInit exch put
			}bind def
		/ct_restoreCIDInit
			{
			ct_Vars/ct_oldCIDInit get dup null ne
				{/CIDInit exch/ProcSet defineresource pop}
				{pop}
			ifelse
			}bind def
		/ct_BuildCharSetUp
			{
			1 index
				begin
				CIDFont
					begin
					Adobe_CoolType_Utility/ct_BuildCharDict get
						begin
						/ct_dfCharCode exch def
						/ct_dfDict exch def
						CIDFirstByte ct_dfCharCode add
						dup CIDCount ge
							{pop 0}
						if
						/cid exch def
							{
							GlyphDirectory cid 2 copy known
								{get}
								{pop pop nullstring}
							ifelse
							dup length FDBytes sub 0 gt
								{
								dup
								FDBytes 0 ne
									{0 FDBytes ct_cvnsi}
									{pop 0}
								ifelse
								/fdIndex exch def
								dup length FDBytes sub FDBytes exch getinterval
								/charstring exch def
								exit
								}
								{
								pop
								cid 0 eq
									{/charstring nullstring def exit}
								if
								/cid 0 def
								}
							ifelse
							}
						loop
			}def
		/ct_SetCacheDevice
			{
			0 0 moveto
			dup stringwidth
			3 -1 roll
			true charpath
			pathbbox
			0 -1000
			7 index 2 div 880
			setcachedevice2
			0 0 moveto
			}def
		/ct_CloneSetCacheProc
			{
			1 eq
				{
				stringwidth
				pop -2 div -880
				0 -1000 setcharwidth
				moveto
				}
				{
				usewidths?
					{
					currentfont/Widths get cid
					2 copy known
						{get exch pop aload pop}
						{pop pop stringwidth}
					ifelse
					}
					{stringwidth}
				ifelse
				setcharwidth
				0 0 moveto
				}
			ifelse
			}def
		/ct_Type3ShowCharString
			{
			ct_FDDict fdIndex 2 copy known
				{get}
				{
				currentglobal 3 1 roll
				1 index gcheck setglobal
				ct_Type1FontTemplate dup maxlength dict copy
					begin
					FDArray fdIndex get
					dup/FontMatrix 2 copy known
						{get}
						{pop pop ct_defaultFontMtx}
					ifelse
					/FontMatrix exch dup length array copy def
					/Private get
					/Private exch def
					/Widths rootfont/Widths get def
					/CharStrings 1 dict dup/.notdef
						<d841272cf18f54fc13>dup length string copy put def
					currentdict
					end
				/ct_Type1Font exch definefont
				dup 5 1 roll put
				setglobal
				}
			ifelse
			dup/CharStrings get 1 index/Encoding get
			ct_dfCharCode get charstring put
			rootfont/WMode 2 copy known
				{get}
				{pop pop 0}
			ifelse
			exch
			1000 scalefont setfont
			ct_str1 0 ct_dfCharCode put
			ct_str1 exch ct_dfSetCacheProc
			ct_SyntheticBold
				{
				currentpoint
				ct_str1 show
				newpath
				moveto
				ct_str1 true charpath
				ct_StrokeWidth setlinewidth
				stroke
				}
				{ct_str1 show}
			ifelse
			}def
		/ct_Type4ShowCharString
			{
			ct_dfDict ct_dfCharCode charstring
			FDArray fdIndex get
			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not
				{ct_1000Mtx matrix concatmatrix concat}
				{pop}
			ifelse
			/Private get
			Adobe_CoolType_Utility/ct_Level2? get not
				{
				ct_dfDict/Private
				3 -1 roll
					{put}
				1183615869 internaldict/superexec get exec
				}
			if
			1183615869 internaldict
			Adobe_CoolType_Utility/ct_Level2? get
				{1 index}
				{3 index/Private get mark 6 1 roll}
			ifelse
			dup/RunInt known
				{/RunInt get}
				{pop/CCRun}
			ifelse
			get exec
			Adobe_CoolType_Utility/ct_Level2? get not
				{cleartomark}
			if
			}bind def
		/ct_BuildCharIncremental
			{
				{
				Adobe_CoolType_Utility/ct_MakeOCF get begin
				ct_BuildCharSetUp
				ct_ShowCharString
				}
			stopped
				{stop}
			if
			end
			end
			end
			end
			}bind def
		/BaseFontNameStr(BF00)def
		/ct_Type1FontTemplate 14 dict
			begin
			/FontType 1 def
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/PaintType 0 def
			currentdict
			end def
		/BaseFontTemplate 11 dict
			begin
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/BuildChar/ct_BuildCharIncremental load def
			ct_Clone?
				{
				/FontType 3 def
				/ct_ShowCharString/ct_Type3ShowCharString load def
				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def
				/ct_SyntheticBold false def
				/ct_StrokeWidth 1 def
				}
				{
				/FontType 4 def
				/Private 1 dict dup/lenIV 4 put def
				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def
				/PaintType 0 def
				/ct_ShowCharString/ct_Type4ShowCharString load def
				}
			ifelse
			/ct_str1 1 string def
			currentdict
			end def
		/BaseFontDictSize BaseFontTemplate length 5 add def
		/ct_matrixeq
			{
			true 0 1 5
				{
				dup 4 index exch get exch 3 index exch get eq and
				dup not
					{exit}
				if
				}
			for
			exch pop exch pop
			}bind def
		/ct_makeocf
			{
			15 dict
				begin
				exch/WMode exch def
				exch/FontName exch def
				/FontType 0 def
				/FMapType 2 def
			dup/FontMatrix known
				{dup/FontMatrix get/FontMatrix exch def}
				{/FontMatrix matrix def}
			ifelse
				/bfCount 1 index/CIDCount get 256 idiv 1 add
					dup 256 gt{pop 256}if def
				/Encoding
					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for
					bfCount 1 255{2 copy bfCount put pop}for
					def
				/FDepVector bfCount dup 256 lt{1 add}if array def
				BaseFontTemplate BaseFontDictSize dict copy
					begin
					/CIDFont exch def
					CIDFont/FontBBox known
						{CIDFont/FontBBox get/FontBBox exch def}
					if
					CIDFont/CDevProc known
						{CIDFont/CDevProc get/CDevProc exch def}
					if
					currentdict
					end
				BaseFontNameStr 3(0)putinterval
				0 1 bfCount dup 256 eq{1 sub}if
					{
					FDepVector exch
					2 index BaseFontDictSize dict copy
						begin
						dup/CIDFirstByte exch 256 mul def
						FontType 3 eq
							{/ct_FDDict 2 dict def}
						if
						currentdict
						end
					1 index 16
					BaseFontNameStr 2 2 getinterval cvrs pop
					BaseFontNameStr exch definefont
					put
					}
				for
				ct_Clone?
					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}
				if
				FontName
				currentdict
				end
			definefont
			ct_Clone?
				{
				gsave
				dup 1000 scalefont setfont
				ct_BuildCharDict
					begin
					/usewidths? false def
					currentfont/Widths get
						begin
						exch/CIDFont get/GlyphDirectory get
							{
							pop
							dup charcode exch 1 index 0 2 index 256 idiv put
							1 index exch 1 exch 256 mod put
							stringwidth 2 array astore def
							}
						forall
						end
					/usewidths? true def
					end
				grestore
				}
				{exch pop}
			ifelse
			}bind def
		currentglobal true setglobal
		/ct_ComposeFont
			{
			ct_UseNativeCapability?
				{				
				2 index/CMap ct_resourcestatus
					{pop pop exch pop}
					{
					/CIDInit/ProcSet findresource
						begin
						12 dict
							begin
							begincmap
							/CMapName 3 index def
							/CMapVersion 1.000 def
							/CMapType 1 def
							exch/WMode exch def
							/CIDSystemInfo 3 dict dup
								begin
								/Registry(Adobe)def
								/Ordering
								CMapName ct_mkocfStr100 cvs
								(Adobe-)search
									{
									pop pop
									(-)search
										{
										dup length string copy
										exch pop exch pop
										}
										{pop(Identity)}
									ifelse
									}
									{pop (Identity)}
								ifelse
								def
								/Supplement 0 def
								end def
							1 begincodespacerange
							<0000><FFFF>
							endcodespacerange
							1 begincidrange
							<0000><FFFF>0
							endcidrange
							endcmap
							CMapName currentdict/CMap defineresource pop
							end
						end
					}
				ifelse
				composefont
				}
				{
				3 2 roll pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
			setglobal
		/ct_MakeIdentity
			{
			ct_UseNativeCapability?
				{
				1 index/CMap ct_resourcestatus
					{pop pop}
					{
					/CIDInit/ProcSet findresource begin
					12 dict begin
					begincmap
					/CMapName 2 index def
					/CMapVersion 1.000 def
					/CMapType 1 def
					/CIDSystemInfo 3 dict dup
						begin
						/Registry(Adobe)def
						/Ordering
						CMapName ct_mkocfStr100 cvs
						(Adobe-)search
							{
							pop pop
							(-)search
								{dup length string copy exch pop exch pop}
								{pop(Identity)}
							ifelse
							}
							{pop(Identity)}
						ifelse
						def
						/Supplement 0 def
						end def
					1 begincodespacerange
					<0000><FFFF>
					endcodespacerange
					1 begincidrange
					<0000><FFFF>0
					endcidrange
					endcmap
					CMapName currentdict/CMap defineresource pop
					end
					end
					}
				ifelse
				composefont
				}
				{
				exch pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
		currentdict readonly pop
		end
	end
%%EndResource
setglobal
%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0
%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.
%%Version: 1.0 0
userdict/ct_T42Dict 15 dict put
ct_T42Dict begin
/Is2015?
{
 version
 cvi
 2015
 ge
}bind def
/AllocGlyphStorage
{
 Is2015?
 {	
	pop
 }
 {
	{string}forall
 }ifelse
}bind def
/Type42DictBegin
{
25 dict begin
 /FontName exch def
 /CharStrings 256 dict 
begin
	 /.notdef 0 def
	 currentdict 
end def
 /Encoding exch def
 /PaintType 0 def
 /FontType 42 def
 /FontMatrix[1 0 0 1 0 0]def
 4 array astore cvx/FontBBox exch def
 /sfnts
}bind def
/Type42DictEnd 
{
 currentdict dup/FontName get exch definefont end
ct_T42Dict exch
dup/FontName get exch put
}bind def
/RD{string currentfile exch readstring pop}executeonly def
/PrepFor2015
{
Is2015?
{		 
	/GlyphDirectory 
	 16
	 dict def
	 sfnts 0 get
	 dup
	 2 index
	(glyx)
	 putinterval
	 2 index 
	(locx)
	 putinterval
	 pop
	 pop
}
{
	 pop
	 pop
}ifelse			
}bind def
/AddT42Char
{
Is2015?
{
	/GlyphDirectory get 
	begin
	def
	end
	pop
	pop
}
{
	/sfnts get
	4 index
	get
	3 index
 2 index
	putinterval
	pop
	pop
	pop
	pop
}ifelse
}bind def
/T0AddT42Mtx2
{
/CIDFont findresource/Metrics2 get begin def end
}bind def
end
%%EndResource
currentglobal true setglobal
%%BeginFile: MMFauxFont.prc
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. 
%%All Rights Reserved.
userdict /ct_EuroDict 10 dict put
ct_EuroDict begin
/ct_CopyFont 
{
    { 1 index /FID ne {def} {pop pop} ifelse} forall
} def
/ct_GetGlyphOutline
{
   gsave
   initmatrix newpath
   exch findfont dup 
   length 1 add dict 
   begin 
		ct_CopyFont 
		/Encoding Encoding dup length array copy 
		dup
		4 -1 roll
		0 exch put   
		def
		currentdict
   end
   /ct_EuroFont exch definefont
   1000 scalefont setfont
   0 0 moveto
   [
       <00> stringwidth 
       <00> false charpath
       pathbbox
       [
       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall
   grestore
   counttomark 8 add
}
def
/ct_MakeGlyphProc
{
   ] cvx
   /ct_PSBuildGlyph cvx
   ] cvx
} def
/ct_PSBuildGlyph 
{ 
 	gsave 
	8 -1 roll pop 
	7 1 roll 
        6 -2 roll ct_FontMatrix transform 6 2 roll
        4 -2 roll ct_FontMatrix transform 4 2 roll
        ct_FontMatrix transform 
	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  
	dup  9 1 roll 
	{  
		currentdict /StrokeWidth 2 copy known  
		{   
			get 2 div   
			0 ct_FontMatrix dtransform pop
			5 1 roll  
			4 -1 roll 4 index sub   
			4 1 roll   
			3 -1 roll 4 index sub  
			3 1 roll   
			exch 4 index add exch  
			4 index add  
			5 -1 roll pop  
		}  
		{	 
			pop pop 
		}  
		ifelse  
	}       
    if  
	setcachedevice  
        ct_FontMatrix concat
        ct_PSPathOps begin 
		exec 
	end 
	{  
		currentdict /StrokeWidth 2 copy known  
			{ get }  
			{ pop pop 0 }  
  	    ifelse  
		setlinewidth stroke  
	}  
	{   
	    fill  
	}  
	ifelse  
    grestore
} def 
/ct_PSPathOps 4 dict dup begin 
	/m {moveto} def 
	/l {lineto} def 
	/c {curveto} def 
	/cp {closepath} def 
end 
def 
/ct_matrix1000 [1000 0 0 1000 0 0] def
/ct_AddGlyphProc  
{
   2 index findfont dup length 4 add dict 
   begin 
	ct_CopyFont 
	/CharStrings CharStrings dup length 1 add dict copy
      begin
         3 1 roll def  
         currentdict 
      end 
      def
      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def
      /ct_PSBuildGlyph /ct_PSBuildGlyph load def
      /ct_PSPathOps /ct_PSPathOps load def
      currentdict
   end
   definefont pop
}
def
systemdict /languagelevel known
{
	/ct_AddGlyphToPrinterFont {
		2 copy
		ct_GetGlyphOutline 3 add -1 roll restore 
		ct_MakeGlyphProc 
		ct_AddGlyphProc
	} def
}
{
	/ct_AddGlyphToPrinterFont {
	    pop pop restore
		Adobe_CTFauxDict /$$$FONTNAME get
		/Euro
		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get
		ct_EuroDict exch get
		ct_AddGlyphProc
	} def
} ifelse
/AdobeSansMM 
{ 
556 0 24 -19 541 703 
	{ 
	541 628 m 
	510 669 442 703 354 703 c 
	201 703 117 607 101 444 c 
	50 444 l 
	25 372 l 
	97 372 l 
	97 301 l 
	49 301 l 
	24 229 l 
	103 229 l 
	124 67 209 -19 350 -19 c 
	435 -19 501 25 509 32 c 
	509 131 l 
	492 105 417 60 343 60 c 
	267 60 204 127 197 229 c 
	406 229 l 
	430 301 l 
	191 301 l 
	191 372 l 
	455 372 l 
	479 444 l 
	194 444 l 
	201 531 245 624 348 624 c 
	433 624 484 583 509 534 c 
	cp 
	556 0 m 
	}
ct_PSBuildGlyph
} def
/AdobeSerifMM 
{ 
500 0 10 -12 484 692 
	{ 
	347 298 m 
	171 298 l 
	170 310 170 322 170 335 c 
	170 362 l 
	362 362 l 
	374 403 l 
	172 403 l 
	184 580 244 642 308 642 c 
	380 642 434 574 457 457 c 
	481 462 l 
	474 691 l 
	449 691 l 
	433 670 429 657 410 657 c 
	394 657 360 692 299 692 c 
	204 692 94 604 73 403 c 
	22 403 l 
	10 362 l 
	70 362 l 
	69 352 69 341 69 330 c 
	69 319 69 308 70 298 c 
	22 298 l 
	10 257 l 
	73 257 l 
	97 57 216 -12 295 -12 c 
	364 -12 427 25 484 123 c 
	458 142 l 
	425 101 384 37 316 37 c 
	256 37 189 84 173 257 c 
	335 257 l 
	cp 
	500 0 m 
	} 
ct_PSBuildGlyph 
} def 
end		
%%EndFile
setglobal
Adobe_CoolType_Core begin /$Oblique SetSubstituteStrategy end
%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get exec
Adobe_AGM_Image/ds gx
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
%ADOBeginClientInjection: PageSetup Start "AI11EPS"
%AI12_RMC_Transparency: Balance=75 RasterRes=300 GradRes=150 Text=0 Stroke=1 Clip=1 OP=0
%ADOEndClientInjection: PageSetup Start "AI11EPS"
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get exec
Adobe_AGM_Image/ps gx
%ADOBeginClientInjection: PageSetup End "AI11EPS"
/currentdistillerparams where{pop currentdistillerparams /CoreDistVersion get 5000 lt} {true} ifelse{ userdict /AI11_PDFMark5 /cleartomark load putuserdict /AI11_ReadMetadata_PDFMark5 {flushfile cleartomark } bind put}{ userdict /AI11_PDFMark5 /pdfmark load putuserdict /AI11_ReadMetadata_PDFMark5 {/PUT pdfmark} bind put } ifelse[/NamespacePush AI11_PDFMark5[/_objdef {ai_metadata_stream_123} /type /stream /OBJ AI11_PDFMark5[{ai_metadata_stream_123}currentfile 0 (%  &&end XMP packet marker&&)/SubFileDecode filter AI11_ReadMetadata_PDFMark5<?xpacket begin="п»ї" id="W5M0MpCehiHzreSzNTczkc9d"?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 5.3-c011 66.145661, 2012/02/06-14:56:27        ">
   <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
      <rdf:Description rdf:about=""
            xmlns:pdf="http://ns.adobe.com/pdf/1.3/">
         <pdf:Producer>Corel PDF Engine Version 3.0.0.739</pdf:Producer>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xmp="http://ns.adobe.com/xap/1.0/"
            xmlns:xmpGImg="http://ns.adobe.com/xap/1.0/g/img/">
         <xmp:CreatorTool>Adobe Illustrator CS6 (Windows)</xmp:CreatorTool>
         <xmp:CreateDate>2018-09-02T22:04:20+03:00</xmp:CreateDate>
         <xmp:MetadataDate>2018-09-02T22:04:20+03:00</xmp:MetadataDate>
         <xmp:ModifyDate>2018-09-02T22:04:20+03:00</xmp:ModifyDate>
         <xmp:Thumbnails>
            <rdf:Alt>
               <rdf:li rdf:parseType="Resource">
                  <xmpGImg:width>256</xmpGImg:width>
                  <xmpGImg:height>128</xmpGImg:height>
                  <xmpGImg:format>JPEG</xmpGImg:format>
                  <xmpGImg:image>/9j/4AAQSkZJRgABAgEC0ALQAAD/7QAsUGhvdG9zaG9wIDMuMAA4QklNA+0AAAAAABAC0AAAAAEA&#xA;AQLQAAAAAQAB/+4ADkFkb2JlAGTAAAAAAf/bAIQABgQEBAUEBgUFBgkGBQYJCwgGBggLDAoKCwoK&#xA;DBAMDAwMDAwQDA4PEA8ODBMTFBQTExwbGxscHx8fHx8fHx8fHwEHBwcNDA0YEBAYGhURFRofHx8f&#xA;Hx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8f/8AAEQgAgAEAAwER&#xA;AAIRAQMRAf/EAaIAAAAHAQEBAQEAAAAAAAAAAAQFAwIGAQAHCAkKCwEAAgIDAQEBAQEAAAAAAAAA&#xA;AQACAwQFBgcICQoLEAACAQMDAgQCBgcDBAIGAnMBAgMRBAAFIRIxQVEGE2EicYEUMpGhBxWxQiPB&#xA;UtHhMxZi8CRygvElQzRTkqKyY3PCNUQnk6OzNhdUZHTD0uIIJoMJChgZhJRFRqS0VtNVKBry4/PE&#xA;1OT0ZXWFlaW1xdXl9WZ2hpamtsbW5vY3R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo+Ck5SVlpeYmZ&#xA;qbnJ2en5KjpKWmp6ipqqusra6voRAAICAQIDBQUEBQYECAMDbQEAAhEDBCESMUEFURNhIgZxgZEy&#xA;obHwFMHR4SNCFVJicvEzJDRDghaSUyWiY7LCB3PSNeJEgxdUkwgJChgZJjZFGidkdFU38qOzwygp&#xA;0+PzhJSktMTU5PRldYWVpbXF1eX1RlZmdoaWprbG1ub2R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo&#xA;+DlJWWl5iZmpucnZ6fkqOkpaanqKmqq6ytrq+v/aAAwDAQACEQMRAD8A9MYoeUedJxbeaNRuFd45&#xA;lMIieNirVMCdCMxcenxznkMrscNV7nL1GtODBAje72790dZeaPM+l6Fb6nfzpNFcyena2s6kyyIo&#xA;+KQOtDQf5Vcn4OWP0yvyl+sfqcSOtxGAlkjwk/zf1H9acwfmZoaag+l6qDp+oxcfVhLLKFLKGAqn&#xA;xVowr8O3fCckoi5xIHfzH2OV+XEvokJeXI/ayiz1CxvY/UtLiOdO5jYNT506ZOGSMhYNtE8compC&#xA;lSSCKT7ag+/fLASGsxBQc9gEUujfCoqQf7MsGRrOPuQdV/mH4/0w8YR4ZdVf5h+P9MeML4ZdVf5h&#xA;+P8ATHjC+GXfD/MPxx4wvhlRuyv1Sb4h/dt4+B9sEpikxxm0v8olf8KaL8Q/3gtvH/fK5DDMcEfc&#xA;GzPjPiS95Taq1+0PHvlnGGrwy6q/zD8f6Y8YXwy6q/zD8f6Y8YXwy6q/zD8f6Y8YXwy6q/zD8f6Y&#xA;8YXwyom5jB75UdTEGmwaaRFrJb2OOJ5KE8FLU6VoK4PzcEjSSS3yncxjyrowNaixth/yRXK8WpiI&#xA;AeTZm00jMnzKa/WovfLPzcPNr/Kz8nfWovfH83DzX8rPyd9ai98fzcPNfys/JpryJVLGtAKnbwxG&#xA;qiUHSyQy6xEyhlt7hlYVDCMkEfQcv4w1eGXHWoR1t7gU/wCKz/XHjC+GVp122AqYZwPHh/bjxhfD&#xA;LhrtsekM5+Sf248YXwyuXWrb14YXimjaduEZdKCtC3c+AwcYXwyjzJT7Ip798gZEtsYALQahjWvv&#xA;9ORZJ/gV5B+YMiDzHqKHdmaAr7UhSp/HKtOfXk98fua+1ZjwMY67/el9vqzWlg/mDVG9e00OJYdO&#xA;gkPwyXLEmCEdKgNV3/yRmZjjxGnXaWJySBlyixr8ureefVNQ856kTMdPYvDJIK+tqNxX067b8Pik&#xA;PyGZmWQAr8U7QJxaXM6S+skzJOzbSBiGUdWbkCDmJOOlynpxd42PzH3OSNfEChLYfJN1/NXWNGjV&#xA;7ljews4jiikAaVq+DDienjXKvyWQfRK/636x+1xNNroZieKHD5x/Uf1vWILv65o8V2V4G4t1l4Vr&#xA;Tmgaldulcpxz4og94bssOGRj3FKqnkQB098sYN/F4D7/AOzFXDka1ptirpG4itK/ZH30GKoHV7+C&#xA;zspGnNOasqKKkk08AMx9RqIYo3ItuLHKZ2QPk68hl8v2FrGwaeytoILhNwVdIwp7dKr1yGk1MMkP&#xA;SeTPU45RkSepT6lGI8Af1jMtx2D6z+Zkemapc2B04ym3fh6nqha7VrTgcsGOw1Sy0aQafm5GzBRp&#xA;ZqTT+/H/AFTw+EjxvJED80AU5nTaCld5+3/IvHwl8byTvyv5s/TstzH9V+rG2WNj+8519Tlt9len&#xA;HIyhTOE7TdV5EAAEs1Kmv8pPb5ZhRxeJkIcqebw8YKG1eaCzspHnZVDKyqAGJJp4DHVYYYI8U5V8&#xA;GGn1UssqjH7UD5Pkgm0Gxto3Rp7O2ghuE+IFXSMKfmKjqMhoscM8bhLcc9mer1EsUvVHY8t03KUu&#xA;PSoDUIB1pV341wHFU+HzpsGW4cXlaM/RUn8yf8N/XMr8l5uL+e8nfoqT+ZP+G/rj+S81/PeSD1G3&#xA;MEZU0LEHcV6EHx+WY88XBIByMeXjiS3pf+8Nt/xjH6hmY4yLb7J+WKqM390n0fqxVQxVL9R/3v0v&#xA;/mIP/Jp8VTgCoBbevbtiq/t9H8cVT/Arx/z5BNcecriCFS80rwpGg6lmijAA+ZyjB/eT94+5xu1Q&#xA;TDEB3S/3TA/zJ1aN7628sac/q2ekEpM6bie+egmfbqFI9NPYe+bnBChfezxYxCIiGRrHDZ6FpegW&#xA;tQtspnv3IA53cu8jbdVRAFX2yyMdyT1+5zccaFlATgqxaMGh6L3K/wBc5HtDH4eYgfj8fjfnzHaE&#xA;eDIQgZIVnvY7omotARAvbmw+116jr07DMzQdoziRGXqH2/t/HJt0moMBVWH0Bo7A+VrEjcfU4R/y&#xA;TAy7TH93H+qHoM0hKciO8/egx9tvoy9qXYq2Oh+X8cVU7l0SMu7BUXiWYmgABHXASALKQLYb5s1W&#xA;C4BSM9F4R12JBYFmp2B4gDOX7T1UcsgI8g7bSYTAb9Ut8r6vFpuol56+hKvByN+O4IantlXZ2qGH&#xA;JcvpOzZqsJnHbm9GjmimHqwuJI3BKOpqCKjoRnWRkJCxuHSkEGi8U84LanzPqPqM4f1jUKAR0GZU&#xA;LpxZ1aXWcFg77vJT7P2R369/5a5Ldhsmcq6b8K+rJQn4vhH2Rue+Kso/Kx4XutVeJmYMIa8hSm78&#xA;emVZG7EzlXRCruwVFYlmJoAAjbk5i6eQGUk8t2/VAnEAPJivm7V7e5HCM7BeEddiasC7U8PhAFc0&#xA;PbOujmmBH6Yuf2ZpZYoky5lK/K2sRaZqRknr6Eq+nIRvx3BDU9qZT2TrRgy3L6SKLb2hpjmx0PqG&#xA;7Po5opruOWFxJG/olXU1BHq5vxMSy2DYMnBETHFR58KbfpGx4TP66cYCRMaj4SNt82fHHv5OqVYZ&#xA;4Z4llhcSRturqag4QQdwqVa8aAnwX+DZr9T/AHgdlpf7spba3EkbaZGGpG8Z5jxpHUfqyjNkkM0I&#xA;g7G7+TKEQYSPuTZW5R8vEHM1pbuoY1gUrKrnbYV8MVQeKpfqP+9+l/8AMQf+TT4qnK/ZHyxVd2+j&#xA;+OKp/gV4z+Zt1LZ61rN5B/vTBHEYSP2S0Ua8/wDY1rh0EQcs/h9zPURBGM90Zf7p5l5IghuPMMbT&#xA;nk8avLEG35SL0r8q8vozcFqDNUhuJJGO/wAZpIwoTud+mYk9fhhPglLhl57fe5kpABBXk5+0Bu3w&#xA;oK0AHbfNH2wLmD5fj8fb0PH5ZnJMyKppYVLxBJRkgHqkbEHiKnYrNtX+ZSPHNXyFgfV+O6j/AKU+&#xA;9Y7H3/ju/Q9C8t+bIYNJXTm4vII19OhQU+EVBCKB9+/jvhx9pjFjqrdtp9SLMdvs+4ABWsdXvr66&#xA;4w8UiIoXAr0PVQe3vlen7Sz58nDGo/Dk5YmSU+AIABNSO56n7s6UCg2rh0Py/jhVAa1BcT2yJCAx&#xA;5qXUmlRTbr/lUOYWvwzyY+GPe36eYjKyxK98p6gWkuHVjyJYheLEVPz7Zzuo7Py44mZFgd25dpj1&#xA;MJGgUNH5Q1eZecSARn7PqEKx+jfI6bQ5c0OICh57Jy6mEDRPyZZ5X0y+02ylt7unLmWQKeQAPEH8&#xA;RnQ9naeeKBjLvdbqssZysPKPOUEz+aNSZI2ZTMaEAkdBm4gdnVzG6hYafdha+hJsP5W6tv4eFMkx&#xA;p15DdLG59JxX92vwn5t2xWmX/lJHJHLqgdSpKw0DAitC/jlWUt2EMz1K3nuLdI4QGb1QSpNKgKx/&#xA;XQ5p9TgnluEOZdjHLHGBKXJjV75R1EtLcurGpLFVKsQCfn2zU6nsnPigZkWB3bn5OTh7RxTkIg1f&#xA;fslT6HecvgodyOBI5igFaqK0zCxaac4cdUPPYtuXWY4S4SbPluyTQbS9sNLufVPFyFlh4mtBX8Nx&#xA;m50eOWOG/vcXUZYziSO5RnspmcBuRd1r8JqSOu+ThqBu6UxVdJ1PUdOlVYw08PxcYASF5MOtMzcW&#xA;q4PcxpkGo3L3Niszp6btGecdQ1CA46jDPMMkhIfjd2OmFQKCtv8AejSf+Mbf8mzlef8AxjH/AJ33&#xA;NmP+7l8E4j/ufv8A15sHHWTf3SfR+rFVDFUv1H/e/S/+Yg/8mnxVOV+yPliq7t9H8cVT/Arx/wDM&#xA;Gzmu/MGtxxoWT6qTKw6Iv1dByY9gGpjoT++n7x9zLU3+6r+bL73lnkexuLjWxcxq3pWEbXFwygmi&#xA;U4Cp7VZwM3BLCIsvUPK2kLfxarqN1IYrWxhMrOO8hNVXfxAP4Zqe2NFHPj4a9XRyM0hCNnok+owq&#xA;zLKtA3UEdzvnDabUTh6Z2QO8/T7ruvxRt5/WRHFY6/j8dUJNEkMMFfUWZmrKjRhRwbZaPUlh/sfv&#xA;zOyTjIGuvlz+JJLgTr4+79dlMYJXkSOBQwJA58TKaqPk7/8AEM1p3cjHM/i/1n/csv0u/wBPso3u&#xA;biRUj4qsdNyxPZVHU/LNh2NKGMylI/j8fjqdzCYAtO9K1GPUrX61DGyxFiq8qVNO+xOdNgzjJHiH&#xA;JtjKxaMAIBqO38cuZLJeg+a/rGKr+LeBxV3FvA4q2394/wBP6xirxLzdDcv5q1Dir+mZj8QBp0Fc&#xA;yIcnFnzUY3nSLq9ftFQTWvhkmKDuxfOUVRIwUVJAYgsdzirOPymjnWTUzKrrtDxLgju/SuVZW7D1&#xA;Z9F/eJ/r/wDGhzH0v98W7V/3Khd6pW5eyt2CyqD6jMOlR+zuN98e0NecQqI3dbjx3zSu1sZ4rn1D&#xA;x7gt1JBznc2oE41u5QjSYMQI3J6BFP8AyUOZkR+6/wA39Dnx/u/ghVuV58igBIoWHXNacZrm4HEr&#xA;RRwhmkjAq/U5CUpcj0ZBfN/vHL8z/wAQObPQ/T8XMwfQVK2/3o0n/jG3/Js5l5/8Yx/533Msf93L&#xA;4JxH/c/f+vNg46yb+6T6P1YqoYql+o/736X/AMxB/wCTT4qnSI/BTxNKDemKrugI9v44qn2BXi35&#xA;veaDpb63pVuON1q726SzDqLeOFS6g/5TFR8sloIXlme4j7nJz/3UPj96R+WbL9EeRkdhxvPMMvrP&#xA;4iztiVjBH+XLyb6BmzG8vc14Y72zLWq6L5H07R1+G81Zvrt4o6+nt6an/hfpByi+KZPds67tTNtw&#xA;jqk+q2Bt7lLEkPLbIiTA14iQqGdTQ1PFjx+jOD7Ux+FnkTyO/wA/x5cx3gSjLSkxA5mq8v1lCXum&#xA;xGymmD8mClhxCqvwivQDNbp9TLxREit/j+hxs2hAiT1+AVrOBFtvrKxrMktQkUihvhXbkrD3r1GO&#xA;SfCaOx/Hn+hEdOALA4h3EBfOAwjIbnsaEkmgNAVPenan0d6i7Rg8Ur5uSAK2Z9oVnJZaZDCefM1d&#xA;6g1qxrv9GdnpcXBjAc2AoJgS56hvuOZDJx5VqAfuOKuq/wDlfccVdV/8r7jiqHu761s0El0/po3w&#xA;qSGNT17A+GKoQeZdGHS6/wCFf+mKt/4l0j/lq/4V/wCmNLbv8SaR/wAtX/Cv/TGlto+ZdGPW6/4V&#xA;/wCmKqkV3CbdbuM+pEOUile4EbHbKtOayk+RTqv7ofBIrbU/UuZruVA0kvhtSmwH3DNZruLLK+Th&#xA;Q2TB7oNGpjIPIb+2awYqO7aZKv8Ax6N/xiX/AJOHNoP7v4ObD+6+CBzBdevSR1IIJ27ZExBTaK9Y&#xA;S2MzAEUZgQf+MZzO0kOED3udpzcC1bf70aT/AMY2/wCTZzJz/wCMY/8AO+5nj/u5fBOI/wC5+/8A&#xA;XmwcdZN/dJ9H6sVUMVS3VZEjvNMdyFRbglmPQD03xVMf0tpv/LTH/wAEMPCUcQcNX0yh/wBJj3/y&#xA;hjwleIMryKXgf5raPc61+ZVrpVt/e3kkcQbqFDRRcnPsq1Y5ZoZVLIfMf7lyc/8Adw9x+9PbKytt&#xA;f84W2n2q00q34QQr2WztVoP+CVfvOZ5PBC+v6VHpiibzVYdV8332tz/Hpukq00an7LJAeMKD/jJK&#xA;R95yqENhHqXQR/e57/hj+PvYlDfTus1zcfvZrmVpGLV3ZjVifGpzF7U0MJzB5Gq+Avl3E3z5gXw1&#xA;ZLlanUnHy5lfdNrt5CDZW/1modZI68U9JI2Zlqa/FIdlPjmm1Wm0mDAY+mEzvHvsG23s7Tz1JJPI&#xA;+m+5nHk3QdOuvKUS6vEE1iUMxSpE0CoSqKrD/JHI/PfMfR/l80eEkGcr94c3P2b4O3OI/iSHVdW8&#xA;r+WNZgh1+/EEhBkUelLIJEBokgEaOBWpUg9KGmxzI0/ZvBPyH42/H3uEMdHdNYfze/LyY0i1Xka0&#xA;/wB57kb0J7x+2bem6wm2i+c/Let3jWemXnr3KRmZo/TlT4FZVJq6qOrjAQkFO2IG59h9+2KtV9sV&#xA;dX2xVjfn1pF0hOFA5kAFelad8IUvJPNms6zpGlidGjWdpo1BA5Dg6O3cDf4cIkDyQQRzY3Y/mB5p&#xA;mYx+tGFoF2jXqT/mTkmBTR/OPmCOnC4HOVgN407bn9nsBiqv5O8y6lq2p3cNzIHgij5R0VVJPICp&#xA;IwMgXufl4A6XZA7gjcf7Fso0398fiy1f9yPg1N5cQ3ZeBljt3oXi32Pfj88tzaASlY2DrI5KDH7m&#xA;PUJr5rWKJ4EWNrgxoSGMYbhsWqTmL+V3MhHf9DkRkBG0w0+O7id7bm9xBNbpLEz1ZlPqBQtfep2y&#xA;mY4obD1eTnwJ4D7kNDqDSa9NpRhKpFFzF2T8DvtWMCnUcvHtmolPGIA8UeO64bFhM9BKOEZe88q+&#xA;1HXANugZ1Y8jxWg+Esa0HLpX2yzFilPcDZwDsj5bGezspY5+PN6uAprQFCKdB4ZshhOMiJc7TfQV&#xA;K2/3o0n/AIxt/wAmzjn/AMYx/wCd9zZj/u5fBOI/7n7/ANebBx1k390n0fqxVQxVKtaVWuNOVgCp&#xA;uCCD0I9NslHmxnyS3UtIeBucALwsenUqT2+WWk0LLjhLWUqxVhQjqMEZCQsck09jyhyXl/mmCG08&#xA;za1rrEfWYIY7GxXuJLuBPUkHhxhRh/ssOh3yTHmPuc2Ubhj9x+9D+XmGj+U9U1itL2+pYWIH2grb&#xA;yuO9PfxGZ+aQMgO5wtdkMYGuaUTQ3A0C00uxUz32rzetcJHuRHCSkMbeFW5Oa+2HDmx8VmQ283E0&#xA;WlnDHZB38kJ5h8v69pFhITbOJBCY7ZoyG+NtmIKnYjkzb5RPUQ8TikaCYabJkzXWwCr+Xvl7zlaC&#xA;bUtWWT6ldRKsYncvJ8B5IwBLUWjNmh9poQy4YzhuYn7Dz/Q7zs6RhkMTtf3swurr6rpd5LHI0d1x&#xA;VYStdviBY1+Qpmg7BlAZTZ9Vbfpbe2jMYfTyvd4/+eciXmu6TOkqFW05DyJpU+rID9xG+dtHk6QS&#xA;sAsN0e04gNzQ7Ftj/MeI/wCInJK9O/JeP/ncLxuQPDTnUUNd2nhJ/UMEkxezy9B81/WMgzVFjdgS&#xA;BUDqciZAM4wJ5NcG9vvGDxI97PwJ9yS+b9LvtQskis4xK4lDkckXYd/iIxGWPeg4J9zxf80NC1LT&#xA;PL0X137RuYxUsrGpSUj7JPbDjyRJ4Qd1y4JxjxEbFgujQUAcj/L+k1Vfwr9+XOMr6hP6ccrg7ovp&#xA;p/rv1+4UxVM/yw/46l5/xgH/ABMYCyD6J0GThpVqeNSFqK/SP45g+KYTJDlnEJwAKZfXH/lX8ct/&#xA;PT8mj8hj82NnzFp/+JVu/UHpfUjDy4v9r1Q9KUr0y3xsnOt2v8vj+m9k/wDVJn9ag6JxAPdW5Zgn&#xA;ITLi6ucMQEeHpyY676ZCz3KfFeRySOUJO5BJINOg/s3zncWDSTyR3/eyybj4l22QZDjMT9HClX5b&#xA;ecNTutQvLa4d7iN1EyCZ+YjIJrwAC8QeWdplAw4xwCgHF7Q7PhER2A9wr582balcvcQOzAAhD08A&#xA;p/rmvlkM5Alwo4xCJAQduSJ9JIFT6bbf88zkM/8AjGP/ADvuYY/7uXwTiP8Aufv/AF5sHHWTf3Sf&#xA;R+rFVDFUs1j/AHq03/mI/wCZbZKPNhPkiLqURwsx6HY/dU5DV5OHGfPZpgLLEZ5OV6I13ZlZmXvU&#xA;b7fRlGiykgRc+en/AHPHW/F9n9r2PL2lJ77yloF9eSXl3bGWeUqXYySAfCoUfCrAdBmPPSY5myN3&#xA;Jhq8kI8MTQ+DUfk/yzH9nT4j/rAt/wASJxGkxD+EJOsyn+Iq36G060Iks7SC3kAoskcaKwP+sBXf&#xA;E4RHeIA+CxzGW0iT8SovNOCQ/U9agZQc8xzcoafGeSEv7z/R2jkatRQLmPqdVUDxn0kNuLSR4gQO&#xA;TGr5oltJ2faPg1QfAjpnIacGWePB/O2+bnaqQGKRly4S8j8+eU/M2tTabPpmnT3UEVsyGSNGZeXr&#xA;SNSo7756HHLEbEvIaaEjAbIOx/L7zhDGQdJua7Afu26KAPDxqcn48O8N/hS7mb/lH5a8w6X5ku7j&#xA;UbCa2hmtJVEkiFRy9aHgtT3KqTkZZ4d4ZRxS7nrMqsQKDuv4EZHx4d4ZeHLuVYpHjJ2qrCjKehGR&#xA;llgeoZwEh0Qdxd6fHK0ZlMbL1R1Y0qK7MAcxJGN7F22LjlEGkMNShknW3tzzlevEmoXYVyviBNN0&#xA;hwx4igtT8pJqTVu7hZEry9J4A61pTu+ZuGeOA5gl1GqyTynlURyS8flppIYMTCaClPqidfH7eXfm&#xA;Yd4cXwZKb/lfpTMTziHsLVP+a8H5iHeEjFLuXw/lrYwsWhuFjYihZLZVNPofH8xDvCfCl3MosrMW&#xA;tnBb8EcxRqpfiRUgCppU9TkTkwnnS8OXorUX/fafcf65OIxS5BiTkHMpd/hvy9Sn6LtOPXh6Q418&#xA;ePSvvlthrqXemQVaE+mlBQdD3+nIeHDuZ8U+9A3drpkEU109nCxVWZvh61HTr3zCyaXTYby8A4o7&#xA;/FvjmzzqHGaSLRr3Sre9RIdJt7aSchPVjBB+I7fjmHh7b8WYhOPM97lZsGThvjJrvZLdBfqs37tP&#xA;sN2Ph883PBDuddxT70tsP0mYLZ1tYHMafunaQg0IA/lPbAYRJBI3CRI1SL9TWVQgW0NN/wDdrf8A&#xA;NGSQpTTa16Sf6ND2/wB2nw/1cVUfW1n/AJZ4f+Rh/piqDuzfy3+mrcxpGvrniUYsa+m3sMINIIsI&#xA;y+tNTeNkSGN1NeJST4vpDrGv/DZj6oSyRoDqiGMDqxCe11Sw1NL2Wyl9OJuVSpCkVO3MBl75RjBh&#xA;RI5O5OSEsPBe9PZJZFiieRvsopZvkBXM0mnUhKG816V+yzH5qw/gcxjqe4Now+am3muyP2XA+auf&#xA;4ZSdTPoAzGKPepN5ltm/4+CPkjD+GVSy5T1bBCAQEl9Yu7t9emAcklRzoK+ApkbnVNomAtt7jR4o&#xA;2R5jPyYvykViRXsNumUZdOMn1AMhnI6lbeapYQ2kslkVW5C0Q8D3PuKZjZNOMUTKIALKOUyNEpH/&#xA;AIh1vjy9c8a0rwSlf+BzW/msvf8AYHI8OLX+I9Z/5aP+Ej/5pwfm8nf9y+FFfH5h1kSx85vhJBoy&#xA;IARX2Wv3ZOOpy2N0HHGk81PXYEsZWtJf9IFOFVPdgD1FOmbTU8UMZkHGxkGVJCfMOthQxnPE9DwS&#xA;n/Ec1P5rL3/Y5XhxU217VGbk0qlvExxk/wDEcfzeTv8AuZCACtba3qS3cLSuOJZeX7tAShO+4UH7&#xA;snj1OUyAJ5sZRFFkVzrdmttK0MlZQjGMFW+0Bt28c2+SEhEnuDhxkCWN/wCIdb4lvXPEbE8Ep/xH&#xA;NL+ay9/2BzPDi1/iPWf+Wj/hI/8AmnB+byd/3L4UW/8AEWtgBjPsehKJQ0/2OH81l7/sXw4snXW7&#xA;DgC0nxUFQFbr92bwYzThGQb/AE1pxG8h/wCBb+mTgJxNhEiDzX215b3MvpwSVPU1UigrTvTNlhym&#xA;WxG7iZIVyRA+wfmP45kNSW60a2axE7Tyxxn5V5H8FzXdpn91w/zpAfp/Q5OlHrvuCVLEJvMUKjpE&#xA;Aze3EFh/DNPgx8eqiO7f5OZklWIshugRZykmtUf9WdS6pLLckTaTTf8AdtsP+Mea/P8A4xj/AM77&#xA;nIx/3cvgnKMWiqeu+bBx1Ob+6T6P1YqoYql+o/736X/zEH/k0+KpwC3cfdiq9CaEio227d8VTG61&#xA;W0gn+qsGkmK8jGo/ZO3VqL+OBUBPq1km4tolToHanXw2Wn/DYOEJtCSakzj4IkFfsskShT/smEi/&#xA;jh4QtlDvLI55FFXsysfcDYJzXqfDHhC2VLihPGoowDKUQIRVuO/UHp4Y8IWyk2pUGtWCgbF6N4NR&#xA;u46fhlUwOIM4nYp5qUcQ8o3cgRQ4aIBgADvMo7ZRr4jwZ+5npz6wxZlP6LQ9jM3/ABEf0zkSP3Y/&#xA;rO4/i+CEyhmmSoHudMX+YRg/LnmdjjeTGPd97RI1GXxZHrkMf6LuOKAEKDUAdiDnTdoQBwS9zq9O&#xA;f3gYrN/xzbf/AF3/AIZyUv7se8u4H1FCZQzTWKMNqenLSo4Qkj5b5scEbzYx/VcbIahL4squLeJr&#xA;eVRGtSjDoO4zrM0AYEeRdTCVEMLQf7jJT/xan6jnEj+7PvDvD9SEyhmjJULWdkP5jIB/wQzIMbjD&#xA;ztrB3LJ/MEca6ROyqFYRChAAP2RnbTAp0cTux22JOp6KD0aBCw7E8365UBuGwnYs1hjjWRSqhTUd&#xA;BTvmRQarbH2D8x/HChKtejma2gaEcpo5Q6p15UBrms7UxSlAcP1CV05WlmBI3yIQHllZJ7y6u5Pt&#xA;UC/SxqafLjmB2LEynKZ934+Tka01ERDILz/eKT/Uf9WdE61Krb/ejSf+Mbf8mzmvz/4xj/zvucjH&#xA;/dy+CcR/3P3/AK82DjrJv7pPo/ViqhiqX6j/AL36X/zEH/k0+KpyOgxVefsj/V/42xVD6n/yko/5&#xA;hx/xI4qgiQqM6KqMV3ZFCn+7c9R7jFXTEn1K7/b/AOZ2Ktn7J+f/ADNXFVNftJ/qD/k4cVSfU/8A&#xA;juWH/GT/AI2GUz+oNkeRTzV/+UKvvnH/AMnlyWX6SiHNgX5iy3Np5a0l7OQ27O0bSMjcORaEk18c&#xA;w8elxGfCYiuG22eWYjd728vvdf8AMEaSst/KOEdF/e0+JzTx7UzJ/IYP5kfk0/mMn84vVPINze3G&#xA;v6KlzK0qHy4Lhldg1Z/rEa+p/rcWI5ZTp9PjEieEXGW3k2ZMkqG/MPSJ1Vk4sAVJUEHcEVGZhAIo&#xA;tVoUafYNI0Zt0KLuq8RQE9aZgR0uI5DHhFDycg5Z8INrv0Tpn/LLH/wIy38jh/mR+TDx595bhtLZ&#xA;bl2WJA0fNI2oKqoIAA+/IabBAEmhYkQPcnLOVAX0RWZzQgmsLL1RH6CcHqzLxFCR3pmvlpcXiAcI&#xA;ojuckZZcN2u/ROmf8ssf/AjLfyOH+ZH5MPHn3lqKysxMR6KUhIMQ4j4SdzT6crxabH4kvSPTVeTK&#xA;eSXCN+al5i/441x/xiH/ABEZmT5FpjzYkt7DDfaXMasLeBBIB48mbv7NmFk1EYAy/mc/v/S3xxk7&#xA;d6fr510tXBKPsa9V/rmL/LeP+bL7G38hLvDa+c9Mb4Qj7kd1/rj/AC3j/my+xfyEu8IuO8jupVni&#xA;NY40Pp+PNtsyPzccg4o932lq8ExNFMIokjWigDu1BSp8czsWMQjQaJSs268/3ik/1H/VljFKrb/e&#xA;jSf+Mbf8mzmvz/4xj/zvucjH/dy+CcR/3P3/AK82DjrJv7pPo/ViqhiqX6j/AL36X/zEH/k0+Kpy&#xA;OgxVefsj/V/42xVD6n/yko/5hx/xI4qgX/uf9j/zLkxV0v8Auz/Z/wDM/FVx+yfn/wAzVxVTX7Sf&#xA;6g/5OHFUn1P/AI7lh/xk/wCNhlM/qDZHkU91ccfJd6H+EVirXw9Zcjqp8GOUu4LijcgGIXb89Bhc&#xA;OpUTcQziuwSgG4PhnJTnI4+IncydxGIEq8km67F4qf6o/wCacx+I+bdwjuZF9fTTzplyCocQAGgp&#xA;ySu6/LM0Z5YpQkO5xziExIMs1S8W206W67IqstfEkUzqNTm8PEZjoHVYsfFIRYdqF5K+kW0yz0d5&#xA;H5O1d9z7ZyWScjjBJ3su4hECRCUC8u6/70j8f6Zj8R823hDIn1U2N9Yv6mzQR813+JSSDmfDUSxZ&#xA;YEcqFuNLEJxIZdPKsMMkrfZjUu3yUVzq5y4Yk9zqIizTCrnUZLrS7q6EtHadRU1oBTZRnIZM0skZ&#xA;SlzMncxxiJA8kk+uXdf96h+P9MxOI+bfwhOhfy22nabcmb94GkPIVo1H/VmV4soRhKPMW0mAkSCy&#xA;XWpln8vPOv2ZLdHHyZAf451onx4xLvFunMalXcwaSOQSwiSMkPGpQKORZaU2GajLjIx5L6n9AcyE&#xA;gZRpV+owHf6jd/REf65pvy0u6Xyc7xB3j5u+pwIORsroAdS0Rp+JxOnl3S+S+IO8fNMdLubiOcLb&#xA;Wly8j0ChlCoD/MSa9Mu0kJifpEiWvKQRuQzjifb7xnYOlU73/eOQf5D/AKsVSu2jlaTS2VW4rGeT&#xA;gEgfu+5zBzQJz4zWw4vub4EeHIe5N4/7n7/15nNCyb+6T6P1YqoYql+o/wC9+l/8xB/5NPiqcjoM&#xA;VXn7I/1f+NsVQ+p/8pKP+Ycf8SOKoF/7n/Y/8y5MVdL/ALs/2f8AzPxVfxJU+AO57f3inFVscZZ1&#xA;VA0sgUKUQV3DFtz2xVLtVsJ18xaTFMPRMzinE1YAuNzWorlM/qDZHkU484tpdj5budPWZRcTcCkB&#xA;artSVWJp4bHJZY3E3yYwNSCSXKaPZW8JvVSOyjPKQMKqCdgePjU5qNLp4SlRApzM2WURdqH6d/Lv&#xA;+a3/AORZ/pmz/IYv5kXF/NT/AJxRKNoJtRfTJG9hFVo5GXkojP2aA9BvmuGnh4wiQKcnxZeHdqkn&#xA;nTyjOhhe7jkRwFMbKSD7UIzcTxgiiLDhRyUdlG8Gh2Iia+WOOyjJ+FhVAzbD4fnml0mnhKVEAhzs&#xA;+WURdqH6d/Lv+a3/AORZ/pmz/IYv5kXF/NT/AJxRIk0GO0TUrtY2tIwOE7jkAhP7ule3xCma7Hp4&#xA;eNRAcmWU+HdqjeevKjKVa9QqRQgqSCD9GbowtweMKVyuixWqzlEj052Ez7UQp1BK/LNHDBA5DGhV&#xA;/pc+WWQiDfRDfp78vPG3/wCRf9mbP8hi/mRcX81P+cUTA+g3VqbpESXToizxkrVVRft8V+g5rsun&#xA;gMojQq3JhlkYE2pal5v8t3WmSWdpdKZHjEcUagjoAKDb2zbzhUXDjOylEd3bx3enzyvxghiHqOew&#xA;QtyzClHi2bwa3ZF/jzyr/wAty/c39M2HCXF4wtm88eVZLeSL68tXFBsfA+2RnAkEJExavHq9jYWv&#xA;1m7lEcK0Rn3NCenTNbpNshHeHKzH0Wpf488q/wDLcv3N/TNpwlxOMKdx558rvbyot6pZkYAUPUj5&#xA;Y8JXiCU2/wCY9tBBHEtuj+moXkZ1FaADpxPhh4SvEGz+Zq0IW2hAPT98P6Y8JXjCk/5kuyBfRgFO&#xA;h9X2x4SvEG4vP07gkWscg6VST+w48JXiCvF5pjvtRsBLCLZIZubSNIGFCjL4L448JXiDNwysN/oY&#xA;ZFk2elK1oO3zxVD6n/yko/5hx/xI4qg3UCOkjBBQA17VRl38N274qrwWtzcsfQgLAk1eT4V3LHv/&#xA;AK57EHFUzt/L61DXcpkYb8F+Ff679x0xVR1LzL5d0NDCzqZlFBbQAM/yPZfpOERJQZAPPfMfm6XU&#xA;rpb8KLJLNT6ThjyUDfkW23+WVzjUgyjK4lhKecLCbVYoR6kwleklwQSakbUG7NU7ZZmFxNNWPaVl&#xA;l35nywjQxHLKI0eaNSWHIEir0of9XNZ2fH1OZqjs8ruNSt4U/wBEaIuOtIiv41zbuDT03R5Df/lh&#xA;P6rAN9Wm5njsPTZjuDT+XNTlFage9zYb4i8/025sxqFnBBJCZHmjTaI0PJwOo2zaZDUT7nEgNw9B&#xA;/NVRNpdvbep6ZedDUry2VWJ2+ZGazs8buXqi83a5s7VCiyxCUdxEa1/2JGbZwnoxk/SX5VycnALQ&#xA;KC/Ekfu5AOn+wzUEVqB73OH9088VrazjAeWIP2b0qH7lObdwXpnnlxD5GMTP6fKGCOtCftMgOw36&#xA;VzTaUXlvzc/NtB5nbLDbQ82ljp2f0uJ/CmblwHovkq4S+8l38SyCQBbiIsileqV6Gpr8eajWCsoP&#xA;uc3T/QQ898vtb280UzSo0aHdhEVYD/W2JzaTFxIcSJoso12/trvyzLNavyj9B15UI39RuXX55hQi&#xA;ROi5MjcWF6SYgABLGWA3X0vi/wCC2zPcQu1aWMgr60fIj7PpfF/wRrioeg2uuWms+T72COZWuLe0&#xA;tp7gFSSsqGkh6Cu0Y+/NbwGGWJ8yHM4uKBDBdTMZSrSxrXxi5H7zXNm4YSzTrhInIaSNFB2Zo+ZP&#xA;0ih/HAkptdelNDzEsdKfbMXP9dcKEntZxBOVWRPTrX1Gj5fw5YEpwzwXcXwyxM3dzFX8GOFCAsdS&#xA;l0m95wyerE399HQqCPke/hgVndneW95brcW7co2+8HwPvhYsi0PzTd6cRFLWe02HAn4lH+Sf4ZEx&#xA;tlGdM8sNQtL639a2kDoRv4g+BGVkNwNpheaRczayLxWUQ+l6ZqTyBBr0piqIttGsYD6hX1HG4ZyT&#xA;TxpUmmBUr1jz1oWmgxxP9buF2EUFCo+b/ZH0VyQiSxMwGBa/+YGr3kbl51sLMdUjPHb/ACnO5/z2&#xA;yYiA1mRLzzUfOUCsYrFfUYmnryVCD3p9o5K0UvsrtpNKvkv71HluQRGw3UArTbYDKZwJkC2wkACE&#xA;HY31pa3VqHvIhGksZlcJU8Aw5fY26e2TnfCaYR5hMfOfmWfXtWuLWxvojpSMhgBXizH0wGO4qfiJ&#xA;zH0mDgjv9TdnycR8kmtbeKxHx3cf+qVX+vLMtoZF5c85QQafqul315EtvLayizdUcH1XBHGvxfzZ&#xA;hajCTKMhztyMWQCJB7ki8u2iRa3ZX9zeRelHPFJM9OQ4K4LfgPDMjKCYEDnTTAgSCced/NbX1/Kt&#xA;rfQvaRN/o4CEn7IHUfLuMq0uHgiO9szT4peTEU9fUGHr3KKQdlfY/QAAMyWpnuga/BZ+WdR0rUL6&#xA;FP3DCx5IFqzcyRReu5GYefATkjId+7fjyDhILBL2/uXf0vrKPE2xKrQD51FfuzMcdnvm7zGuo3SQ&#xA;aZfxyaVHGgKBASXUncsaMNqZhaPAYi5D1ORqMlmhyYhf3siKfSvIgf5QtT/xvmc46e/lr5ojsLm4&#xA;tdRu44LC4V2PIHl6xCqCCBT7K5g6zAZix9TkYMgiaPJLHkkjh+K6jDU/vGUD8OWZzjIu48w6XJ5b&#xA;GnNcg3iRNGzFG4szSs9aqtKUan0Zi+HLxL6OQJjgpLtPaXhT63FIB0UKNvuKnMpoKH1SWTiw+uRF&#xA;f99BRX8ORwKET5M1qPTJrsTyqLe7tpbdo+9ZAOLb0GxHjlObGZgV0NtkJ8N+YVZ2lMNVuo49vtlR&#xA;Q/exGXtSQM7w3fJJ0Zj1lUfCPo4/qwMk8tLh3Shu4pH9loR+I/VhYpdqsDVLSXcbldwlArf8LX8c&#xA;CQu06/nagku40UdEdf4jiPxxUo29ie4iNLqNY6b/AAqR95JphVAaXqsukXdFkWe3enrIhJHzFQPi&#xA;GBSGeW1zBcwJPA4eJxVWGFijbDULuwnE1tIUYdR2YeBGJFpBp//Z</xmpGImg:image>
               </rdf:li>
            </rdf:Alt>
         </xmp:Thumbnails>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:dc="http://purl.org/dc/elements/1.1/">
         <dc:format>application/postscript</dc:format>
         <dc:title>
            <rdf:Alt>
               <rdf:li xml:lang="x-default">Modern cozy kitchen combined with dining room</rdf:li>
            </rdf:Alt>
         </dc:title>
         <dc:description>
            <rdf:Alt>
               <rdf:li xml:lang="x-default">Modern cozy kitchen combined with dining room. Comfortable kitchen room equipped with appliances. Apartment concept. Vector illustration can be used for topics like home, flat, dwelling </rdf:li>
            </rdf:Alt>
         </dc:description>
         <dc:subject>
            <rdf:Bag>
               <rdf:li>icon</rdf:li>
               <rdf:li>sign</rdf:li>
               <rdf:li>symbol</rdf:li>
               <rdf:li>vector</rdf:li>
               <rdf:li>flat</rdf:li>
               <rdf:li>design</rdf:li>
               <rdf:li>element</rdf:li>
               <rdf:li>graphic</rdf:li>
               <rdf:li>illustration</rdf:li>
               <rdf:li>sketch</rdf:li>
               <rdf:li>nobody</rdf:li>
               <rdf:li>object</rdf:li>
               <rdf:li>concept</rdf:li>
               <rdf:li>home</rdf:li>
               <rdf:li>kitchen</rdf:li>
               <rdf:li>house</rdf:li>
               <rdf:li>modern</rdf:li>
               <rdf:li>dinner</rdf:li>
               <rdf:li>interior</rdf:li>
               <rdf:li>table</rdf:li>
               <rdf:li>room</rdf:li>
               <rdf:li>new</rdf:li>
               <rdf:li>apartment</rdf:li>
               <rdf:li>furniture</rdf:li>
               <rdf:li>chair</rdf:li>
               <rdf:li>space</rdf:li>
               <rdf:li>cooking</rdf:li>
               <rdf:li>indoor</rdf:li>
               <rdf:li>sink</rdf:li>
               <rdf:li>clean</rdf:li>
               <rdf:li>dining</rdf:li>
               <rdf:li>contemporary</rdf:li>
               <rdf:li>mortgage</rdf:li>
               <rdf:li>lifestyle</rdf:li>
               <rdf:li>decor</rdf:li>
               <rdf:li>property</rdf:li>
               <rdf:li>appliance</rdf:li>
               <rdf:li>cozy</rdf:li>
               <rdf:li>comfort</rdf:li>
               <rdf:li>dwelling</rdf:li>
               <rdf:li>comfortable</rdf:li>
               <rdf:li>combined</rdf:li>
               <rdf:li>lamp</rdf:li>
               <rdf:li>bowl</rdf:li>
               <rdf:li>plant</rdf:li>
               <rdf:li>picture</rdf:li>
               <rdf:li>refrigerator</rdf:li>
            </rdf:Bag>
         </dc:subject>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xmpTPg="http://ns.adobe.com/xap/1.0/t/pg/"
            xmlns:stDim="http://ns.adobe.com/xap/1.0/sType/Dimensions#"
            xmlns:xmpG="http://ns.adobe.com/xap/1.0/g/">
         <xmpTPg:NPages>1</xmpTPg:NPages>
         <xmpTPg:HasVisibleTransparency>False</xmpTPg:HasVisibleTransparency>
         <xmpTPg:HasVisibleOverprint>False</xmpTPg:HasVisibleOverprint>
         <xmpTPg:MaxPageSize rdf:parseType="Resource">
            <stDim:w>450.000000</stDim:w>
            <stDim:h>225.000000</stDim:h>
            <stDim:unit>Pixels</stDim:unit>
         </xmpTPg:MaxPageSize>
         <xmpTPg:PlateNames>
            <rdf:Seq>
               <rdf:li>Cyan</rdf:li>
               <rdf:li>Magenta</rdf:li>
               <rdf:li>Yellow</rdf:li>
               <rdf:li>Black</rdf:li>
            </rdf:Seq>
         </xmpTPg:PlateNames>
         <xmpTPg:SwatchGroups>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <xmpG:groupName>Р“СЂСѓРїРїР° РѕР±СЂР°Р·С†РѕРІ РїРѕ СѓРјРѕР»С‡Р°РЅРёСЋ</xmpG:groupName>
                  <xmpG:groupType>0</xmpG:groupType>
               </rdf:li>
            </rdf:Seq>
         </xmpTPg:SwatchGroups>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xmpMM="http://ns.adobe.com/xap/1.0/mm/"
            xmlns:stRef="http://ns.adobe.com/xap/1.0/sType/ResourceRef#"
            xmlns:stEvt="http://ns.adobe.com/xap/1.0/sType/ResourceEvent#">
         <xmpMM:DocumentID>xmp.did:FCE35EFCE2AEE8118EC891D9B10B14EB</xmpMM:DocumentID>
         <xmpMM:InstanceID>xmp.iid:FCE35EFCE2AEE8118EC891D9B10B14EB</xmpMM:InstanceID>
         <xmpMM:OriginalDocumentID>xmp.did:95700B855C62E811B002FA7368335985</xmpMM:OriginalDocumentID>
         <xmpMM:RenditionClass>proof:pdf</xmpMM:RenditionClass>
         <xmpMM:DerivedFrom rdf:parseType="Resource">
            <stRef:instanceID>xmp.iid:770B19190297E811AD0DD554943073E7</stRef:instanceID>
            <stRef:documentID>xmp.did:770B19190297E811AD0DD554943073E7</stRef:documentID>
            <stRef:originalDocumentID>xmp.did:95700B855C62E811B002FA7368335985</stRef:originalDocumentID>
            <stRef:renditionClass>proof:pdf</stRef:renditionClass>
         </xmpMM:DerivedFrom>
         <xmpMM:History>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:95700B855C62E811B002FA7368335985</stEvt:instanceID>
                  <stEvt:when>2018-05-28T13:14:17+03:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CS6 (Windows)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:96700B855C62E811B002FA7368335985</stEvt:instanceID>
                  <stEvt:when>2018-05-28T13:24:18+03:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CS6 (Windows)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:parameters>from application/postscript to application/vnd.adobe.illustrator</stEvt:parameters>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:97700B855C62E811B002FA7368335985</stEvt:instanceID>
                  <stEvt:when>2018-05-28T13:29:45+03:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CS6 (Windows)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:parameters>from application/postscript to application/vnd.adobe.illustrator</stEvt:parameters>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:4B82CE570D65E81186CAD87A667BF732</stEvt:instanceID>
                  <stEvt:when>2018-05-31T23:06:12+03:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CS6 (Windows)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:parameters>from application/postscript to application/vnd.adobe.illustrator</stEvt:parameters>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:4D82CE570D65E81186CAD87A667BF732</stEvt:instanceID>
                  <stEvt:when>2018-06-01T00:09:24+03:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CS6 (Windows)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:parameters>from application/postscript to application/vnd.adobe.illustrator</stEvt:parameters>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:d4a0d029-c439-2a4c-b295-3c04971f4928</stEvt:instanceID>
                  <stEvt:when>2018-06-11T17:56:35+05:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Bridge CC 2018 (Windows)</stEvt:softwareAgent>
                  <stEvt:changed>/metadata</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:parameters>from application/postscript to application/vnd.adobe.illustrator</stEvt:parameters>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:770B19190297E811AD0DD554943073E7</stEvt:instanceID>
                  <stEvt:when>2018-08-03T12:46:30+03:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CS6 (Windows)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:parameters>from application/postscript to application/vnd.adobe.illustrator</stEvt:parameters>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:FCE35EFCE2AEE8118EC891D9B10B14EB</stEvt:instanceID>
                  <stEvt:when>2018-09-02T22:04:20+03:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CS6 (Windows)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
            </rdf:Seq>
         </xmpMM:History>
      </rdf:Description>
   </rdf:RDF>
</x:xmpmeta>
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                           
<?xpacket end="w"?>%  &&end XMP packet marker&&[{ai_metadata_stream_123}<</Type /Metadata /Subtype /XML>>/PUT AI11_PDFMark5[/Document1 dict begin /Metadata {ai_metadata_stream_123} defcurrentdict end /BDC AI11_PDFMark5
%ADOEndClientInjection: PageSetup End "AI11EPS"
%%EndPageSetup
1 -1 scale 0 -225 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 225 li
450 225 li
450 0 li
cp
clp
.000488281 225 mo
450 225 li
450 0 li
.000488281 0 li
.000488281 225 li
cp
false sop
/0 
[/DeviceRGB] /CSA add_res
.529412 .588235 .619608 rgb
ef
417.808 119.777 mo
450 119.777 li
450 80.229 li
417.808 80.229 li
417.808 119.777 li
cp
.74902 .827451 .866667 rgb
ef
450 80.229 mo
417.808 80.229 li
417.808 83.1528 li
450 112.727 li
450 80.229 li
cp
.607843 .670588 .709804 rgb
ef
417.808 127.089 mo
450 127.089 li
450 119.738 li
417.808 119.738 li
417.808 127.089 li
cp
.647059 .560784 .470588 rgb
ef
.000488281 36.9468 mo
450 36.9468 li
450 0 li
.000488281 0 li
.000488281 36.9468 li
cp
.811765 .882353 .921569 rgb
ef
350.809 9.24854 mo
255.049 9.24854 li
254.952 9.24854 li
254.952 132.049 li
350.809 132.049 li
350.809 9.24854 li
cp
.890196 .8 .705882 rgb
ef
346.573 107.225 mo
304.83 107.225 li
304.83 18.5889 li
346.573 18.5889 li
346.573 107.225 li
cp
301.595 107.225 mo
259.852 107.225 li
259.852 18.5889 li
301.595 18.5889 li
301.595 107.225 li
301.595 107.225 li
cp
.733333 .670588 .607843 rgb
ef
345.971 106.623 mo
304.228 106.623 li
304.228 17.9868 li
345.971 17.9868 li
345.971 106.623 li
cp
300.993 106.623 mo
259.25 106.623 li
259.25 17.9868 li
300.993 17.9868 li
300.993 106.623 li
300.993 106.623 li
cp
.921569 .839216 .74902 rgb
ef
298.158 103.788 mo
262.085 103.788 li
262.085 20.8213 li
298.158 20.8213 li
298.158 103.788 li
cp
.733333 .670588 .607843 rgb
ef
298.158 103.788 mo
262.184 103.788 li
264.341 101.092 li
295.587 23.5156 li
298.089 20.8213 li
298.158 20.8213 li
298.158 103.788 li
cp
.984314 .894118 .796078 rgb
ef
262.935 102.938 mo
297.308 102.938 li
297.308 21.6714 li
262.935 21.6714 li
262.935 102.938 li
cp
.74902 .905882 .984314 rgb
ef
343.136 103.788 mo
307.063 103.788 li
307.063 20.8213 li
343.136 20.8213 li
343.136 103.788 li
cp
.733333 .670588 .607843 rgb
ef
343.136 103.788 mo
307.162 103.788 li
309.318 101.092 li
340.564 23.5156 li
343.066 20.8213 li
343.136 20.8213 li
343.136 103.788 li
cp
.984314 .894118 .796078 rgb
ef
307.913 102.938 mo
342.286 102.938 li
342.286 21.6714 li
307.913 21.6714 li
307.913 102.938 li
cp
.843137 .941176 .992157 rgb
ef
297.308 98.5151 mo
296.687 98.437 296.081 98.311 295.539 97.9844 cv
293.932 97.0151 293.223 94.5293 291.437 94.0859 cv
289.372 93.5742 287.394 94.8213 285.484 95.4897 cv
284.396 95.8701 283.407 98.0791 282.525 97.2046 cv
281.17 95.8613 281.119 93.4111 281.708 91.7471 cv
282.282 90.124 285.779 90.2505 285.615 88.4727 cv
285.477 86.9766 282.702 86.6255 281.261 86.9136 cv
279.696 87.2256 278.99 89.0278 277.807 90.0322 cv
276.724 90.9517 275.932 93.0952 274.466 92.6826 cv
272.559 92.146 272.042 89.4287 270.603 88.0049 cv
269.448 86.8628 267.702 86.3457 266.742 85.0425 cv
265.883 83.8765 265.868 82.3398 265.432 80.9883 cv
265.432 80.9883 266.814 77.4019 267.595 77.4019 cv
268.374 77.4019 271.415 73.1919 271.415 73.1919 cv
271.133 71.2686 270.247 69.2837 270.569 67.4224 cv
270.735 66.4575 271.888 66.0049 272.735 65.5513 cv
274.341 64.6909 276.151 64.2144 277.849 63.5239 cv
279.858 62.707 282.612 62.7734 283.855 61.0293 cv
284.604 59.9785 282.174 58.4341 282.403 57.1309 cv
282.615 55.9219 283.79 54.9312 284.979 54.6362 cv
287.349 54.0483 290.187 55.4648 292.463 54.6362 cv
294.074 54.0498 294.259 51.6465 295.689 50.7378 cv
296.178 50.4277 296.73 50.2354 297.308 50.0933 cv
297.308 98.5151 li
cp
336.921 48.0874 mo
338.152 48.166 339.426 49.1782 340.086 50.27 cv
340.843 51.5229 341.756 53.5493 340.787 54.4805 cv
339.982 55.2529 338.685 52.1538 337.651 52.6089 cv
336.545 53.0957 336.281 55.0522 336.892 56.1953 cv
337.516 57.3652 339.2 57.8848 340.48 57.9106 cv
341.143 57.9243 341.719 57.603 342.286 57.248 cv
342.286 92.79 li
342.138 92.7324 341.985 92.6953 341.827 92.6826 cv
339.908 92.5269 337.974 93.5332 336.728 94.8662 cv
335.976 95.6704 337.398 97.5605 336.577 98.2964 cv
335.613 99.1602 333.615 99.5483 332.552 98.6084 cv
331.409 97.5981 333.248 95.1006 331.992 94.2422 cv
330.378 93.1387 328.263 94.7583 326.393 94.3979 cv
325.182 94.1646 324.292 92.3838 323.102 92.5269 cv
321.682 92.6973 321.041 94.3711 319.916 95.1777 cv
318.355 96.2974 316.539 99.7871 315.06 98.2964 cv
313.128 96.3506 316.698 92.8203 315.273 90.4995 cv
314.417 89.105 311.802 90.1538 310.653 91.1235 cv
309.295 92.2695 309.947 94.9326 308.62 96.1133 cv
308.415 96.2959 308.176 96.4116 307.913 96.4849 cv
307.913 45.9702 li
308.488 46.1201 309.061 46.2383 309.616 46.2163 cv
310.598 46.1768 311.137 45.7983 311.045 44.8125 cv
310.816 42.3364 310.889 37.4648 315.221 41.0703 cv
315.896 41.6323 319.662 43.5649 319.662 43.5649 cv
321.211 42.8892 320.136 38.0542 325.937 40.6025 cv
327.551 41.311 327.133 44.4775 328.709 45.2808 cv
329.982 45.9292 331.611 43.5464 332.69 44.5005 cv
333.955 45.6187 332.593 47.8232 333.294 49.3345 cv
333.58 49.9507 334.618 50.166 335.223 49.9585 cv
336.033 49.6792 336.035 48.0303 336.921 48.0874 cv
336.921 48.0874 li
cp
.588235 .705882 .576471 rgb
ef
307.913 90.8906 mo
307.99 90.8823 308.07 90.8828 308.152 90.8926 cv
309.484 91.0513 310.224 92.6045 311.337 93.3535 cv
312.882 94.3931 314.868 97.6328 316.114 96.2485 cv
317.739 94.4429 314.121 91.165 315.245 89.0107 cv
315.921 87.7163 318.438 88.6895 319.588 89.5898 cv
320.947 90.6538 320.571 93.126 321.904 94.2217 cv
323.001 95.124 324.845 94.2871 326.103 94.9458 cv
327.018 95.4248 327.014 97.0542 327.984 97.4067 cv
328.919 97.7466 329.911 96.9082 330.879 96.6831 cv
331.985 96.4258 333.252 96.5703 334.209 95.9595 cv
335.618 95.0596 336.063 92.752 337.684 92.3403 cv
339.203 91.9541 340.771 92.6445 342.286 93.25 cv
342.286 62.0698 li
342.141 61.9438 342.006 61.8052 341.881 61.6509 cv
341.465 61.1338 341.865 60.4878 342.286 59.8149 cv
342.286 56.9341 li
341.766 56.3379 341.019 55.8921 340.289 55.7153 cv
338.038 55.1699 335.525 56.4849 333.341 55.7153 cv
331.794 55.1714 331.417 52.9399 330.011 52.0967 cv
328.414 51.1382 326.287 51.4014 324.654 50.5044 cv
323.31 49.7637 322.785 47.7974 321.325 47.3193 cv
319.847 46.8354 318.248 47.9609 316.693 47.8984 cv
315.778 47.8623 315.245 47.5112 315.245 46.5957 cv
315.245 44.2969 314.76 39.7739 311.048 43.1216 cv
310.647 43.4819 308.934 44.4512 307.913 45.0151 cv
307.913 90.8906 li
cp
291.505 49.6357 mo
290.368 49.709 289.273 50.6484 288.754 51.6621 cv
288.158 52.8252 287.485 54.7065 288.465 55.5708 cv
289.277 56.2881 290.217 53.4111 291.215 53.8335 cv
292.283 54.2856 292.696 56.1021 292.229 57.1631 cv
291.749 58.249 290.23 58.7314 289.044 58.7554 cv
287.654 58.7837 286.521 57.2188 285.135 57.3076 cv
283.319 57.4253 281.472 58.1782 280.068 59.3345 cv
279.546 59.7651 280.791 61.0073 280.213 61.3613 cv
278.881 62.1782 276.744 61.0415 275.581 62.0854 cv
274.475 63.0781 275.18 65.0737 274.567 66.4277 cv
274.23 67.1738 272.103 67.7891 272.83 68.165 cv
274.592 69.0762 277.195 67.3877 278.766 68.5991 cv
279.711 69.3281 278.913 71.4463 277.896 72.0737 cv
276.741 72.7876 274.992 70.9141 273.844 71.6396 cv
272.669 72.3809 272.879 74.2451 272.396 75.5479 cv
272.396 75.5479 270.789 78.6455 270.641 79.9385 cv
270.641 80.251 li
270.646 80.2778 270.651 80.3022 270.659 80.3252 cv
270.948 81.1934 273.988 81.6279 273.988 81.6279 cv
273.506 82.9307 272.287 84.1704 272.541 85.5361 cv
272.753 86.6787 274.637 86.8081 275.146 87.8525 cv
275.677 88.9399 274.986 90.3481 275.436 91.4717 cv
275.716 92.1714 276.432 93.0537 277.173 92.9189 cv
278.427 92.6914 279.756 91.792 280.213 90.603 cv
280.837 88.9814 278.886 86.665 280.068 85.3916 cv
280.993 84.396 283.031 85.5747 283.978 86.5498 cv
284.833 87.4331 284.244 89.0264 284.701 90.1689 cv
285.224 91.4751 285.479 93.5889 286.872 93.7881 cv
288.449 94.0132 289.193 91.1675 290.781 91.0376 cv
292.549 90.8921 294.431 91.8271 295.702 93.064 cv
296.471 93.811 295.312 95.5654 296.137 96.2485 cv
296.452 96.5098 296.863 96.7227 297.308 96.8628 cv
297.308 46.7642 li
296.492 46.3438 295.669 45.7813 295.123 46.3062 cv
294.045 47.3442 295.5 49.3906 294.979 50.7939 cv
294.767 51.3662 293.82 51.5659 293.241 51.373 cv
292.465 51.1143 292.321 49.583 291.505 49.6357 cv
291.505 49.6357 li
cp
.647059 .764706 .556863 rgb
ef
315.961 102.938 mo
315.815 95.8306 315.606 89.5474 315.258 85.041 cv
310.104 86.1948 li
310.427 90.4019 310.598 96.2676 310.671 102.938 cv
315.961 102.938 li
cp
.815686 .764706 .694118 rgb
ef
297.308 55.9883 mo
297.028 56.1265 296.736 56.2339 296.427 56.2944 cv
294.943 56.5864 293.245 54.0244 292.084 54.9917 cv
290.621 56.2109 290.655 58.8179 291.215 60.6377 cv
291.577 61.8159 294.355 61.2871 294.399 62.519 cv
294.444 63.7637 292.495 64.1797 291.36 64.6904 cv
289.564 65.4985 287.673 66.624 285.714 66.4277 cv
283.065 66.1631 280.982 63.6152 278.331 63.3882 cv
277.167 63.2881 275.746 64.4033 275.581 65.5596 cv
275.335 67.2817 277.503 68.751 277.318 70.4814 cv
277.172 71.8447 274.613 72.2979 274.712 73.666 cv
274.852 75.5747 276.12 77.7324 277.896 78.4429 cv
279.28 78.9966 280.603 75.9272 281.95 76.561 cv
283.243 77.1694 282.101 79.5239 282.818 80.7593 cv
283.391 81.7437 284.435 82.8892 285.569 82.7856 cv
287.05 82.6514 287.812 79.6206 289.188 80.1802 cv
290.609 80.7573 289.081 83.6206 290.202 84.6675 cv
291.64 86.0122 293.97 86.9961 295.848 86.4048 cv
297.007 86.04 296.787 84.0522 297.308 82.9209 cv
297.308 55.9883 li
cp
311.191 54.9917 mo
310.038 55.2148 308.996 56.2764 307.913 56.6567 cv
307.913 94.6089 li
308.007 94.6582 li
309.221 95.3149 309.096 97.5498 310.469 97.4067 cv
312.474 97.1982 314.72 95.355 314.956 93.3535 cv
315.216 91.1426 314.637 92.9736 313.95 90.856 cv
313.489 89.4331 312.729 87.231 313.95 86.3682 cv
315.319 85.4023 317.389 86.6045 318.872 87.3813 cv
320.537 88.2534 320.353 86.0151 320.746 87.8525 cv
321.095 89.4795 318.781 90.6074 318.285 92.1953 cv
317.794 93.7676 317.463 95.5166 317.851 97.1172 cv
318.274 98.8623 318.975 100.99 320.602 101.75 cv
322.403 102.59 325.05 102.489 326.537 101.171 cv
328.148 99.7412 326.848 96.5601 328.273 94.9458 cv
329.691 93.3408 332.398 93.6284 334.209 92.4849 cv
335.223 91.8447 336.489 90.9326 336.525 89.7344 cv
336.598 87.2764 335.174 85.0059 334.498 82.6411 cv
334.498 82.6411 333.919 78.8774 337.394 78.4429 cv
337.873 78.3833 340.517 78.2769 342.286 78.2109 cv
342.286 60.335 li
341.908 59.0444 342.17 57.3071 341.736 56.0049 cv
341.382 54.9404 341.375 53.2495 340.289 52.9653 cv
338.725 52.5552 337.068 53.6235 335.656 54.4126 cv
334.163 55.248 333.021 56.5986 331.748 57.7422 cv
330.656 58.7227 330.024 60.9224 328.563 60.7822 cv
326.656 60.5991 325.56 58.3877 324.221 57.0186 cv
323.377 56.1563 323.688 54.2017 322.483 54.1235 cv
318.358 53.8535 319.403 56.6548 317.851 57.5977 cv
316.664 58.3184 314.577 60.2803 313.942 59.0449 cv
312.93 57.0757 316.219 54.5195 315.245 52.5313 cv
314.54 51.0903 312.061 52.145 310.469 51.9521 cv
310.469 51.9521 311.476 54.937 311.191 54.9917 cv
311.191 54.9917 li
cp
.772549 .87451 .509804 rgb
ef
296.578 89.8926 mo
296.277 90.0435 296.027 90.2256 295.952 90.5029 cv
295.721 91.3535 295.852 92.5845 296.578 93.3306 cv
296.578 89.8926 li
cp
296.578 70.3481 mo
296.578 87.8765 li
296.165 87.8198 295.743 87.8286 295.437 87.8882 cv
294.564 88.0571 294.261 89.0317 293.644 89.5747 cv
293.078 90.0728 292.744 91.2324 291.889 91.0088 cv
290.776 90.7188 290.336 89.249 289.441 88.4785 cv
288.724 87.8608 287.705 87.5806 287.088 86.876 cv
286.537 86.2451 286.445 85.4136 286.124 84.6826 cv
286.124 84.6826 286.716 82.7427 287.158 82.7427 cv
287.602 82.7427 289.101 80.4653 289.101 80.4653 cv
288.836 79.4248 288.226 78.3516 288.308 77.3442 cv
288.35 76.8223 288.979 76.5776 289.437 76.332 cv
290.302 75.8672 291.305 75.6089 292.231 75.2354 cv
293.328 74.7935 294.896 74.8296 295.508 73.8857 cv
295.876 73.3174 294.412 72.4824 294.472 71.7769 cv
294.527 71.123 295.141 70.5864 295.8 70.4277 cv
296.048 70.3677 296.309 70.3467 296.578 70.3481 cv
296.578 70.3481 li
cp
296.578 87.8765 mo
296.578 70.3481 li
296.816 70.3496 297.062 70.3682 297.308 70.3955 cv
297.308 88.0596 li
297.088 87.9707 296.835 87.9111 296.578 87.8765 cv
cp
296.578 93.3306 mo
296.578 89.8926 li
296.81 89.7764 297.072 89.6787 297.308 89.5723 cv
297.308 93.415 li
297.115 93.5728 296.921 93.6357 296.711 93.4551 cv
296.665 93.415 296.62 93.374 296.578 93.3306 cv
296.578 93.3306 li
cp
324.947 66.8848 mo
325.651 66.9272 326.43 67.4751 326.863 68.0654 cv
327.361 68.7432 327.99 69.8394 327.489 70.3428 cv
327.074 70.7612 326.17 69.0845 325.607 69.3311 cv
325.006 69.5942 324.962 70.6523 325.37 71.271 cv
325.788 71.9038 326.773 72.1846 327.502 72.1992 cv
328.354 72.2153 328.868 71.3032 329.727 71.355 cv
330.851 71.4233 332.067 71.8623 333.06 72.5361 cv
333.429 72.7871 332.81 73.5107 333.203 73.7173 cv
334.112 74.1934 335.289 73.5308 336.121 74.1387 cv
336.912 74.7173 336.71 75.8804 337.24 76.6694 cv
337.532 77.104 338.904 77.4624 338.503 77.6816 cv
337.529 78.2124 335.743 77.229 334.921 77.9346 cv
334.427 78.3594 335.159 79.5933 335.853 79.959 cv
336.642 80.375 337.496 79.2832 338.282 79.7061 cv
339.086 80.1382 339.172 81.2241 339.617 81.9834 cv
339.617 81.9834 341.307 84.2612 341.229 84.7671 cv
341.152 85.2734 339.342 85.5264 339.342 85.5264 cv
339.787 86.2852 340.676 87.0078 340.677 87.8037 cv
340.678 88.4692 339.54 88.5449 339.349 89.1533 cv
339.149 89.7871 339.733 90.6074 339.588 91.2622 cv
339.497 91.6699 339.16 92.1841 338.691 92.1055 cv
337.898 91.9727 336.981 91.4487 336.565 90.7559 cv
335.997 89.811 336.925 88.4614 336.055 87.7192 cv
335.374 87.1392 334.263 87.8257 333.796 88.394 cv
333.374 88.9087 333.918 89.8374 333.77 90.5029 cv
333.6 91.2642 333.687 92.4961 332.857 92.6118 cv
331.918 92.7427 331.136 91.085 330.149 91.0088 cv
329.052 90.9248 328.007 91.4688 327.371 92.1899 cv
326.987 92.6255 327.898 93.6475 327.472 94.0454 cv
326.971 94.5132 325.857 94.7231 325.202 94.2144 cv
324.499 93.668 325.407 92.3169 324.647 91.8525 cv
323.672 91.2554 322.558 92.1318 321.476 91.937 cv
320.775 91.8105 320.174 90.8472 319.505 90.9248 cv
318.708 91.0166 318.435 91.9224 317.84 92.3589 cv
317.014 92.9639 316.171 94.8516 315.25 94.0454 cv
314.048 92.9932 315.885 91.0835 314.949 89.8281 cv
314.387 89.0737 312.959 89.6411 312.358 90.1655 cv
311.649 90.7856 312.164 92.2261 311.475 92.8643 cv
310.907 93.3901 309.683 92.9028 308.989 93.2866 cv
308.484 93.5659 308.674 94.5146 308.12 94.7207 cv
308.054 94.7456 307.984 94.7588 307.913 94.7642 cv
307.913 65.6274 li
308.395 65.749 308.885 65.8896 309.338 65.8721 cv
309.893 65.8516 310.179 65.6465 310.073 65.1133 cv
309.81 63.7739 309.586 61.1387 312.242 63.0889 cv
312.656 63.3931 314.9 64.4385 314.9 64.4385 cv
315.743 64.0728 314.87 61.4575 318.304 62.8359 cv
319.258 63.2192 319.193 64.9321 320.131 65.3662 cv
320.89 65.7178 321.686 64.4282 322.351 64.9448 cv
323.13 65.5493 322.475 66.7417 322.955 67.5596 cv
323.15 67.8931 323.752 68.0093 324.085 67.897 cv
324.53 67.7461 324.441 66.854 324.947 66.8848 cv
324.947 66.8848 li
cp
.698039 .819608 .529412 rgb
ef
314.559 99.4917 mo
316.883 99.4917 li
317.39 99.4917 317.803 99.0781 317.803 98.5723 cv
317.803 92.418 li
317.803 91.9121 317.39 91.4985 316.883 91.4985 cv
314.559 91.4985 li
314.053 91.4985 313.64 91.9121 313.64 92.418 cv
313.64 98.5723 li
313.64 99.0781 314.053 99.4917 314.559 99.4917 cv
cp
.701961 .258824 .509804 rgb
ef
312.527 96.8403 mo
318.915 96.8403 li
319.892 96.8403 320.689 97.6387 320.689 98.6147 cv
320.689 113.697 li
320.689 114.674 319.892 115.473 318.915 115.473 cv
312.527 115.473 li
311.551 115.473 310.753 114.674 310.753 113.697 cv
310.753 98.6147 li
310.753 97.6387 311.551 96.8403 312.527 96.8403 cv
cp
.905882 .611765 .0823529 rgb
ef
315.721 109.676 mo
317.66 109.676 319.241 108.095 319.241 106.156 cv
319.241 104.218 317.66 102.637 315.721 102.637 cv
313.782 102.637 312.201 104.218 312.201 106.156 cv
312.201 108.095 313.782 109.676 315.721 109.676 cv
cp
.92549 .886275 .882353 rgb
ef
315.721 108.543 mo
314.403 108.543 313.334 107.474 313.334 106.156 cv
313.334 104.839 314.403 103.77 315.721 103.77 cv
317.039 103.77 318.107 104.839 318.107 106.156 cv
318.107 107.474 317.039 108.543 315.721 108.543 cv
cp
315.721 103.103 mo
314.036 103.103 312.668 104.471 312.668 106.156 cv
312.668 107.842 314.036 109.209 315.721 109.209 cv
317.406 109.209 318.774 107.842 318.774 106.156 cv
318.774 104.471 317.406 103.103 315.721 103.103 cv
cp
.898039 .584314 .662745 rgb
ef
325.599 108.737 mo
328.958 108.737 li
329.689 108.737 330.287 108.139 330.287 107.408 cv
330.287 102.093 li
330.287 101.362 329.688 100.764 328.958 100.764 cv
325.599 100.764 li
324.868 100.764 324.27 101.362 324.27 102.093 cv
324.27 107.408 li
324.27 108.139 324.867 108.737 325.599 108.737 cv
cp
.701961 .258824 .509804 rgb
ef
324.084 103.817 mo
330.473 103.817 li
331.448 103.817 332.247 104.616 332.247 105.591 cv
332.247 113.697 li
332.247 114.674 331.448 115.473 330.473 115.473 cv
324.084 115.473 li
323.108 115.473 322.31 114.674 322.31 113.697 cv
322.31 105.591 li
322.31 104.615 323.108 103.817 324.084 103.817 cv
cp
.631373 .482353 .686275 rgb
ef
325.011 105.507 mo
329.546 105.507 li
330.239 105.507 330.806 106.074 330.806 106.767 cv
330.806 112.522 li
330.806 113.215 330.238 113.782 329.546 113.782 cv
325.011 113.782 li
324.318 113.782 323.751 113.215 323.751 112.522 cv
323.751 106.767 li
323.751 106.074 324.317 105.507 325.011 105.507 cv
cp
.701961 .258824 .509804 rgb
ef
95.6128 82.5288 mo
143.542 82.5288 li
143.542 9.24854 li
95.6128 9.24854 li
95.6128 82.5288 li
cp
.945098 .94902 .94902 rgb
ef
143.478 9.24854 mo
143.542 9.24854 li
143.542 82.5288 li
95.6123 82.5288 li
96.7207 81.4727 li
99.3867 77.3247 li
138.869 13.7397 li
143.478 9.24854 li
cp
.733333 .745098 .752941 rgb
ef
96.4912 81.7173 mo
142.664 81.7173 li
142.664 10.0601 li
96.4912 10.0601 li
96.4912 81.7173 li
cp
.85098 .854902 .858824 rgb
ef
103.573 70.3584 mo
135.582 70.3584 li
135.582 21.4199 li
103.573 21.4199 li
103.573 70.3584 li
cp
.945098 .94902 .94902 rgb
ef
103.616 70.3584 mo
103.573 70.3584 li
103.573 21.4199 li
135.582 21.4199 li
134.841 22.125 li
133.061 24.8955 li
106.694 67.3589 li
103.616 70.3584 li
cp
.733333 .745098 .752941 rgb
ef
104.16 69.8164 mo
134.995 69.8164 li
134.995 21.9619 li
104.16 21.9619 li
104.16 69.8164 li
cp
.85098 .854902 .858824 rgb
ef
143.542 82.5288 mo
191.472 82.5288 li
191.472 9.24854 li
143.542 9.24854 li
143.542 82.5288 li
cp
.945098 .94902 .94902 rgb
ef
191.408 9.24854 mo
191.472 9.24854 li
191.472 82.5288 li
143.542 82.5288 li
144.651 81.4727 li
147.316 77.3247 li
186.799 13.7397 li
191.408 9.24854 li
cp
.733333 .745098 .752941 rgb
ef
144.421 81.7173 mo
190.594 81.7173 li
190.594 10.0601 li
144.421 10.0601 li
144.421 81.7173 li
cp
.85098 .854902 .858824 rgb
ef
151.503 70.3584 mo
183.512 70.3584 li
183.512 21.4199 li
151.503 21.4199 li
151.503 70.3584 li
cp
.945098 .94902 .94902 rgb
ef
151.546 70.3584 mo
151.503 70.3584 li
151.503 21.4199 li
183.512 21.4199 li
182.771 22.125 li
180.991 24.8955 li
154.624 67.3589 li
151.546 70.3584 li
cp
.733333 .745098 .752941 rgb
ef
152.09 69.8164 mo
182.925 69.8164 li
182.925 21.9619 li
152.09 21.9619 li
152.09 69.8164 li
cp
.85098 .854902 .858824 rgb
ef
191.472 9.24854 mo
255.014 9.24854 li
255.014 82.5288 li
191.472 82.5288 li
191.472 9.24854 li
cp
.945098 .94902 .94902 rgb
ef
254.95 9.24854 mo
255.014 9.24854 li
255.014 82.5288 li
191.472 82.5288 li
192.581 81.4727 li
195.247 77.3247 li
250.341 13.7397 li
254.95 9.24854 li
cp
.733333 .745098 .752941 rgb
ef
192.351 10.0601 mo
254.136 10.0601 li
254.136 81.7173 li
192.351 81.7173 li
192.351 10.0601 li
cp
.85098 .854902 .858824 rgb
ef
247.054 70.3584 mo
199.433 70.3584 li
199.433 21.4199 li
247.054 21.4199 li
247.054 70.3584 li
cp
.945098 .94902 .94902 rgb
ef
199.476 70.3584 mo
199.433 70.3584 li
199.433 21.4199 li
247.054 21.4199 li
246.313 22.125 li
244.533 24.895 li
202.554 67.3589 li
199.476 70.3584 li
cp
.65098 .662745 .67451 rgb
ef
246.467 69.8164 mo
200.02 69.8164 li
200.02 21.9619 li
246.467 21.9619 li
246.467 69.8164 li
cp
.372549 .462745 .513726 rgb
ef
200.02 37.2529 mo
200.02 34.7065 li
246.467 34.7065 li
246.467 37.2529 li
200.02 37.2529 li
cp
200.02 57.0718 mo
200.02 54.5254 li
246.467 54.5254 li
246.467 57.0718 li
200.02 57.0718 li
200.02 57.0718 li
cp
.513726 .556863 .580392 rgb
ef
225.842 21.9619 mo
225.072 21.9619 li
224.625 21.9619 li
207.695 69.8164 li
208.912 69.8164 li
225.072 24.1382 li
225.842 21.9619 li
cp
.462745 .541176 .592157 rgb
f
241.232 21.9619 mo
231.716 48.8623 li
225.072 67.6401 li
224.302 69.8164 li
225.072 69.8164 li
227.734 69.8164 li
231.716 58.5635 li
244.664 21.9619 li
241.232 21.9619 li
cp
f
239.129 21.9619 mo
228.167 21.9619 li
211.237 69.8164 li
222.199 69.8164 li
239.129 21.9619 li
cp
f
215.746 57.0718 mo
226.707 57.0718 li
227.608 54.5254 li
216.647 54.5254 li
215.746 57.0718 li
cp
.603922 .67451 .72549 rgb
f
221.333 34.7065 mo
220.116 34.7065 li
219.215 37.2529 li
220.433 37.2529 li
221.333 34.7065 li
cp
f
212.203 57.0718 mo
213.421 57.0718 li
214.322 54.5254 li
213.104 54.5254 li
212.203 57.0718 li
cp
f
228.811 57.0718 mo
232.243 57.0718 li
233.145 54.5254 li
229.712 54.5254 li
228.811 57.0718 li
cp
f
236.724 34.7065 mo
235.822 37.2529 li
239.255 37.2529 li
240.155 34.7065 li
236.724 34.7065 li
cp
f
222.758 37.2529 mo
233.719 37.2529 li
234.62 34.7065 li
223.659 34.7065 li
222.758 37.2529 li
cp
f
191.472 119.906 mo
254.95 119.906 li
255.014 119.906 li
255.014 82.5288 li
191.472 82.5288 li
191.472 119.906 li
cp
.368627 .411765 .439216 rgb
ef
191.472 119.906 mo
191.611 119.906 li
199.736 110.149 li
252.781 84.7813 li
255.014 82.5288 li
191.472 82.5288 li
191.472 119.906 li
cp
.494118 .509804 .517647 rgb
ef
192.766 118.613 mo
253.721 118.613 li
253.721 83.8223 li
192.438 83.5596 li
192.766 118.613 li
cp
.823529 .823529 .823529 rgb
ef
192.766 118.613 mo
253.721 118.613 li
253.721 83.8223 li
192.766 83.8223 li
192.766 118.613 li
cp
.580392 .592157 .611765 rgb
ef
214.176 93.4102 mo
215.001 91.1787 li
217.723 83.8223 li
216.65 83.8223 li
215.001 88.2788 li
214.176 90.5098 li
209.802 102.332 li
203.779 118.613 li
204.852 118.613 li
209.802 105.232 li
214.176 93.4102 li
cp
.623529 .67451 .709804 rgb
f
214.176 88.2803 mo
215.001 86.0493 li
215.825 83.8223 li
215.247 83.8223 li
215.001 84.4873 li
214.176 86.7188 li
209.802 98.541 li
202.376 118.613 li
202.954 118.613 li
209.802 100.102 li
214.176 88.2803 li
cp
f
215.001 106.124 mo
221.479 88.6143 li
223.251 83.8223 li
221.479 83.8223 li
219.786 83.8223 li
215.001 96.7554 li
214.176 98.9863 li
209.802 110.808 li
206.915 118.613 li
209.802 118.613 li
210.38 118.613 li
214.176 108.354 li
215.001 106.124 li
cp
f
225.77 91.2925 mo
228.533 83.8223 li
227.048 83.8223 li
225.77 87.2773 li
221.479 98.8755 li
215.001 116.385 li
214.177 118.613 li
215.001 118.613 li
215.663 118.613 li
221.479 102.891 li
225.77 91.2925 li
cp
f
237.28 83.8223 mo
232.576 83.8223 li
225.77 102.222 li
221.479 113.82 li
219.706 118.613 li
221.479 118.613 li
224.41 118.613 li
225.77 114.937 li
237.28 83.8223 li
cp
f
238.188 83.8223 mo
225.77 117.39 li
225.317 118.613 li
225.77 118.613 li
226.803 118.613 li
239.673 83.8223 li
238.188 83.8223 li
cp
f
221.479 96.6445 mo
225.77 85.0464 li
226.223 83.8223 li
225.77 83.8223 li
225.397 83.8223 li
221.479 94.4146 li
215.001 111.924 li
214.176 114.154 li
212.526 118.613 li
213.352 118.613 li
214.176 116.385 li
215.001 114.154 li
221.479 96.6445 li
cp
f
194.824 112.864 mo
203.174 112.864 li
203.174 89.5713 li
194.824 89.5713 li
194.824 112.864 li
cp
.368627 .411765 .439216 rgb
ef
206.366 113.32 mo
206.366 89.1152 li
247.608 89.1152 li
247.608 113.32 li
206.366 113.32 li
cp
.164706 .160784 .168627 rgb
ef
206.366 113.32 mo
206.366 113.294 li
207.268 112.437 li
208.173 111.356 li
246.217 90.4814 li
247.608 89.1509 li
247.608 113.32 li
206.366 113.32 li
cp
.478431 .486275 .486275 rgb
ef
207.142 112.544 mo
246.832 112.544 li
246.832 89.8911 li
207.142 89.8911 li
207.142 112.544 li
cp
.207843 .235294 .258824 rgb
ef
225.045 89.8911 mo
217.031 112.544 li
227.992 112.544 li
236.006 89.8911 li
225.045 89.8911 li
cp
.341176 .376471 .4 rgb
f
222.72 89.8911 mo
221.502 89.8911 li
219.875 94.4893 li
213.488 112.544 li
214.706 112.544 li
219.875 97.9312 li
222.72 89.8911 li
cp
f
238.109 89.8911 mo
233.051 104.19 li
230.096 112.544 li
233.051 112.544 li
233.527 112.544 li
241.542 89.8911 li
238.109 89.8911 li
cp
f
195.18 112.544 mo
202.819 112.544 li
202.819 89.8911 li
195.18 89.8911 li
195.18 112.544 li
cp
.580392 .592157 .611765 rgb
ef
199 110.991 mo
200.238 110.991 201.248 109.981 201.248 108.743 cv
201.248 107.504 200.238 106.495 199 106.495 cv
197.761 106.495 196.751 107.504 196.751 108.743 cv
196.751 109.981 197.761 110.991 199 110.991 cv
cp
.368627 .411765 .439216 rgb
ef
199 110.635 mo
200.042 110.635 200.892 109.785 200.892 108.743 cv
200.892 107.7 200.042 106.85 199 106.85 cv
197.957 106.85 197.107 107.7 197.107 108.743 cv
197.107 109.785 197.957 110.635 199 110.635 cv
cp
.580392 .592157 .611765 rgb
ef
199 104.965 mo
200.238 104.965 201.248 103.955 201.248 102.717 cv
201.248 101.479 200.238 100.469 199 100.469 cv
197.761 100.469 196.751 101.479 196.751 102.717 cv
196.751 103.955 197.761 104.965 199 104.965 cv
cp
.368627 .411765 .439216 rgb
ef
199 104.609 mo
200.042 104.609 200.892 103.759 200.892 102.717 cv
200.892 101.675 200.042 100.824 199 100.824 cv
197.957 100.824 197.107 101.675 197.107 102.717 cv
197.107 103.759 197.957 104.609 199 104.609 cv
cp
.521569 .454902 .376471 rgb
ef
199 98.939 mo
200.238 98.939 201.248 97.9292 201.248 96.6914 cv
201.248 95.4531 200.238 94.4429 199 94.4429 cv
197.761 94.4429 196.751 95.4531 196.751 96.6914 cv
196.751 97.9292 197.761 98.939 199 98.939 cv
cp
.368627 .411765 .439216 rgb
ef
199 98.5835 mo
200.042 98.5835 200.892 97.7334 200.892 96.6914 cv
200.892 95.6489 200.042 94.7983 199 94.7983 cv
197.957 94.7983 197.107 95.6489 197.107 96.6914 cv
197.107 97.7334 197.957 98.5835 199 98.5835 cv
cp
.745098 .65098 .537255 rgb
ef
202.118 90.3599 mo
202.118 90.3599 li
202.184 90.3599 202.237 90.4131 202.237 90.479 cv
202.237 92.8813 li
202.237 92.9468 202.184 93.0005 202.118 93.0005 cv
202.118 93.0005 li
202.052 93.0005 201.999 92.9473 201.999 92.8813 cv
201.999 90.479 li
201.999 90.4131 202.052 90.3599 202.118 90.3599 cv
cp
201.338 90.3599 mo
201.338 90.3599 li
201.404 90.3599 201.457 90.4131 201.457 90.479 cv
201.457 92.8813 li
201.457 92.9468 201.404 93.0005 201.338 93.0005 cv
201.338 93.0005 li
201.272 93.0005 201.219 92.9473 201.219 92.8813 cv
201.219 90.479 li
201.219 90.4131 201.272 90.3599 201.338 90.3599 cv
201.338 90.3599 li
cp
200.558 90.3599 mo
200.558 90.3599 li
200.624 90.3599 200.677 90.4131 200.677 90.479 cv
200.677 92.8813 li
200.677 92.9468 200.624 93.0005 200.558 93.0005 cv
200.558 93.0005 li
200.493 93.0005 200.439 92.9473 200.439 92.8813 cv
200.439 90.479 li
200.439 90.4131 200.493 90.3599 200.558 90.3599 cv
200.558 90.3599 li
cp
199.779 90.3599 mo
199.779 90.3599 li
199.845 90.3599 199.898 90.4131 199.898 90.479 cv
199.898 92.8813 li
199.898 92.9468 199.845 93.0005 199.779 93.0005 cv
199.779 93.0005 li
199.713 93.0005 199.66 92.9473 199.66 92.8813 cv
199.66 90.479 li
199.66 90.4131 199.713 90.3599 199.779 90.3599 cv
199.779 90.3599 li
cp
198.999 90.3599 mo
198.999 90.3599 li
199.064 90.3599 199.118 90.4131 199.118 90.479 cv
199.118 92.8813 li
199.118 92.9468 199.064 93.0005 198.999 93.0005 cv
198.999 93.0005 li
198.934 93.0005 198.88 92.9473 198.88 92.8813 cv
198.88 90.479 li
198.88 90.4131 198.934 90.3599 198.999 90.3599 cv
198.999 90.3599 li
cp
198.219 90.3599 mo
198.219 90.3599 li
198.285 90.3599 198.338 90.4131 198.338 90.479 cv
198.338 92.8813 li
198.338 92.9468 198.285 93.0005 198.219 93.0005 cv
198.219 93.0005 li
198.154 93.0005 198.1 92.9473 198.1 92.8813 cv
198.1 90.479 li
198.1 90.4131 198.154 90.3599 198.219 90.3599 cv
198.219 90.3599 li
cp
197.44 90.3599 mo
197.44 90.3599 li
197.505 90.3599 197.559 90.4131 197.559 90.479 cv
197.559 92.8813 li
197.559 92.9468 197.505 93.0005 197.44 93.0005 cv
197.44 93.0005 li
197.375 93.0005 197.321 92.9473 197.321 92.8813 cv
197.321 90.479 li
197.321 90.4131 197.375 90.3599 197.44 90.3599 cv
197.44 90.3599 li
cp
196.66 90.3599 mo
196.66 90.3599 li
196.726 90.3599 196.779 90.4131 196.779 90.479 cv
196.779 92.8813 li
196.779 92.9468 196.726 93.0005 196.66 93.0005 cv
196.66 93.0005 li
196.595 93.0005 196.542 92.9473 196.542 92.8813 cv
196.542 90.479 li
196.542 90.4131 196.595 90.3599 196.66 90.3599 cv
196.66 90.3599 li
cp
195.881 90.3599 mo
195.881 90.3599 li
195.947 90.3599 196 90.4131 196 90.479 cv
196 92.8813 li
196 92.9468 195.947 93.0005 195.881 93.0005 cv
195.881 93.0005 li
195.815 93.0005 195.762 92.9473 195.762 92.8813 cv
195.762 90.479 li
195.762 90.4131 195.815 90.3599 195.881 90.3599 cv
195.881 90.3599 li
cp
.368627 .411765 .439216 rgb
ef
191.472 119.738 mo
255.014 119.738 li
255.014 193.019 li
191.472 193.019 li
191.472 119.738 li
cp
.945098 .94902 .94902 rgb
ef
254.95 119.738 mo
255.014 119.738 li
255.014 193.019 li
191.472 193.019 li
192.581 191.963 li
195.247 187.814 li
250.341 124.229 li
254.95 119.738 li
cp
.733333 .745098 .752941 rgb
ef
192.351 120.549 mo
254.136 120.549 li
254.136 192.207 li
192.351 192.207 li
192.351 120.549 li
cp
.85098 .854902 .858824 rgb
ef
254.936 193.019 mo
302.865 193.019 li
302.865 119.738 li
254.936 119.738 li
254.936 193.019 li
cp
.945098 .94902 .94902 rgb
ef
302.802 119.738 mo
302.865 119.738 li
302.865 193.019 li
254.936 193.019 li
256.044 191.963 li
258.71 187.814 li
298.192 124.229 li
302.802 119.738 li
cp
.733333 .745098 .752941 rgb
ef
255.814 192.207 mo
301.987 192.207 li
301.987 120.549 li
255.814 120.549 li
255.814 192.207 li
cp
.85098 .854902 .858824 rgb
ef
262.896 180.848 mo
294.905 180.848 li
294.905 131.909 li
262.896 131.909 li
262.896 180.848 li
cp
.945098 .94902 .94902 rgb
ef
262.939 180.848 mo
262.896 180.848 li
262.896 131.909 li
294.905 131.909 li
294.165 132.614 li
292.385 135.385 li
266.017 177.848 li
262.939 180.848 li
cp
.733333 .745098 .752941 rgb
ef
263.483 180.306 mo
294.318 180.306 li
294.318 132.451 li
263.483 132.451 li
263.483 180.306 li
cp
.85098 .854902 .858824 rgb
ef
302.865 193.019 mo
350.796 193.019 li
350.796 119.738 li
302.865 119.738 li
302.865 193.019 li
cp
.945098 .94902 .94902 rgb
ef
350.731 119.738 mo
350.796 119.738 li
350.796 193.019 li
302.865 193.019 li
303.975 191.963 li
306.64 187.814 li
346.123 124.229 li
350.731 119.738 li
cp
.733333 .745098 .752941 rgb
ef
303.744 192.207 mo
349.917 192.207 li
349.917 120.549 li
303.744 120.549 li
303.744 192.207 li
cp
.85098 .854902 .858824 rgb
ef
310.827 180.848 mo
342.835 180.848 li
342.835 131.909 li
310.827 131.909 li
310.827 180.848 li
cp
.945098 .94902 .94902 rgb
ef
310.869 180.848 mo
310.826 180.848 li
310.826 131.909 li
342.835 131.909 li
342.095 132.614 li
340.314 135.385 li
313.947 177.848 li
310.869 180.848 li
cp
.733333 .745098 .752941 rgb
ef
311.414 180.306 mo
342.249 180.306 li
342.249 132.451 li
311.414 132.451 li
311.414 180.306 li
cp
.85098 .854902 .858824 rgb
ef
95.6123 82.5293 mo
143.542 82.5293 li
143.542 192.912 li
95.6123 192.912 li
95.6123 82.5293 li
cp
.945098 .94902 .94902 rgb
ef
143.478 82.5293 mo
143.542 82.5293 li
143.542 192.912 li
95.6123 192.912 li
96.7207 191.855 li
99.3867 187.707 li
138.869 87.021 li
143.478 82.5293 li
cp
.733333 .745098 .752941 rgb
ef
96.4912 83.3413 mo
142.664 83.3413 li
142.664 192.1 li
96.4912 192.1 li
96.4912 83.3413 li
cp
.85098 .854902 .858824 rgb
ef
135.582 180.74 mo
103.573 180.74 li
103.573 94.7007 li
135.582 94.7007 li
135.582 180.74 li
cp
.945098 .94902 .94902 rgb
ef
103.616 180.74 mo
103.573 180.74 li
103.573 94.7007 li
135.582 94.7007 li
134.841 95.4063 li
133.061 98.1763 li
106.694 177.741 li
103.616 180.74 li
cp
.733333 .745098 .752941 rgb
ef
143.542 82.5293 mo
191.472 82.5293 li
191.472 192.912 li
143.542 192.912 li
143.542 82.5293 li
cp
.945098 .94902 .94902 rgb
ef
191.408 82.5293 mo
191.472 82.5293 li
191.472 192.912 li
143.542 192.912 li
144.651 191.855 li
147.316 187.707 li
186.799 87.021 li
191.408 82.5293 li
cp
.733333 .745098 .752941 rgb
ef
144.421 83.3413 mo
190.594 83.3413 li
190.594 192.1 li
144.421 192.1 li
144.421 83.3413 li
cp
.85098 .854902 .858824 rgb
ef
183.512 180.74 mo
151.503 180.74 li
151.503 94.7007 li
183.512 94.7007 li
183.512 180.74 li
cp
.945098 .94902 .94902 rgb
ef
151.546 180.74 mo
151.503 180.74 li
151.503 94.7007 li
183.512 94.7007 li
182.771 95.4063 li
180.991 98.1763 li
154.624 177.741 li
151.546 180.74 li
cp
.733333 .745098 .752941 rgb
ef
182.925 180.198 mo
152.09 180.198 li
152.09 95.2432 li
182.925 95.2432 li
182.925 180.198 li
cp
.85098 .854902 .858824 rgb
ef
134.995 180.198 mo
104.16 180.198 li
104.16 95.2432 li
134.995 95.2432 li
134.995 180.198 li
cp
.207843 .235294 .258824 rgb
ef
121.188 95.2432 mo
119.97 95.2432 li
118.506 101.236 li
104.16 159.961 li
104.16 164.945 li
118.506 106.221 li
121.188 95.2432 li
cp
.341176 .376471 .4 rgb
f
125.149 142.025 mo
118.506 169.221 li
115.824 180.198 li
118.506 180.198 li
119.256 180.198 li
125.149 156.076 li
134.995 115.773 li
134.995 101.723 li
125.149 142.025 li
cp
f
125.149 133.414 mo
134.474 95.2432 li
125.149 95.2432 li
123.513 95.2432 li
118.506 115.739 li
104.16 174.464 li
104.16 180.198 li
113.72 180.198 li
118.506 160.609 li
125.149 133.414 li
cp
f
104.16 110.139 mo
104.16 108.045 li
134.995 108.045 li
134.995 110.139 li
104.16 110.139 li
cp
104.16 124.453 mo
104.16 122.359 li
134.995 122.359 li
134.995 124.453 li
104.16 124.453 li
104.16 124.453 li
cp
104.16 138.768 mo
104.16 136.674 li
134.995 136.674 li
134.995 138.768 li
104.16 138.768 li
104.16 138.768 li
cp
104.16 153.082 mo
104.16 150.988 li
134.995 150.988 li
134.995 153.082 li
104.16 153.082 li
104.16 153.082 li
cp
104.16 167.396 mo
104.16 165.303 li
134.995 165.303 li
134.995 167.396 li
104.16 167.396 li
104.16 167.396 li
cp
.301961 .333333 .356863 rgb
ef
105.887 167.396 mo
116.848 167.396 li
117.359 165.303 li
106.398 165.303 li
105.887 167.396 li
cp
109.383 153.082 mo
120.345 153.082 li
120.856 150.988 li
109.895 150.988 li
109.383 153.082 li
109.383 153.082 li
cp
105.841 153.082 mo
107.058 153.082 li
107.569 150.988 li
106.352 150.988 li
105.841 153.082 li
105.841 153.082 li
cp
112.88 138.768 mo
123.841 138.768 li
124.353 136.674 li
113.392 136.674 li
112.88 138.768 li
112.88 138.768 li
cp
109.337 138.768 mo
110.555 138.768 li
111.066 136.674 li
109.849 136.674 li
109.337 138.768 li
109.337 138.768 li
cp
116.377 124.453 mo
127.338 124.453 li
127.85 122.359 li
116.889 122.359 li
116.377 124.453 li
116.377 124.453 li
cp
112.834 124.453 mo
114.052 124.453 li
114.563 122.359 li
113.346 122.359 li
112.834 124.453 li
112.834 124.453 li
cp
119.874 110.139 mo
130.835 110.139 li
131.346 108.045 li
120.385 108.045 li
119.874 110.139 li
119.874 110.139 li
cp
116.331 110.139 mo
117.549 110.139 li
118.06 108.045 li
116.842 108.045 li
116.331 110.139 li
116.331 110.139 li
cp
132.939 110.139 mo
133.45 108.045 li
134.995 108.045 li
134.995 110.139 li
132.939 110.139 li
132.939 110.139 li
cp
129.442 124.453 mo
129.954 122.359 li
133.386 122.359 li
132.875 124.453 li
129.442 124.453 li
129.442 124.453 li
cp
125.945 138.768 mo
126.457 136.674 li
129.889 136.674 li
129.377 138.768 li
125.945 138.768 li
125.945 138.768 li
cp
122.448 153.082 mo
122.959 150.988 li
126.392 150.988 li
125.881 153.082 li
122.448 153.082 li
122.448 153.082 li
cp
118.951 167.396 mo
119.463 165.303 li
122.895 165.303 li
122.384 167.396 li
118.951 167.396 li
118.951 167.396 li
cp
.4 .431373 .458824 rgb
ef
281.759 113.314 mo
282.134 113.314 282.439 112.781 282.439 112.127 cv
282.439 111.473 282.134 110.939 281.759 110.939 cv
281.384 110.939 281.078 111.473 281.078 112.127 cv
281.078 112.781 281.384 113.314 281.759 113.314 cv
cp
0 .682353 .937255 rgb
ef
285.89 112.938 mo
287.472 112.938 li
287.472 111.287 li
285.89 111.287 li
285.89 112.938 li
cp
.372549 .376471 .384314 rgb
ef
282.009 109.73 mo
285.614 109.73 li
285.934 109.73 286.194 109.991 286.194 110.31 cv
286.194 113.916 li
286.194 114.234 285.934 114.495 285.614 114.495 cv
282.009 114.495 li
281.689 114.495 281.429 114.234 281.429 113.916 cv
281.429 110.31 li
281.429 109.991 281.689 109.73 282.009 109.73 cv
cp
.498039 .509804 .521569 rgb
ef
282.241 110.222 mo
285.382 110.222 li
285.552 110.222 285.69 110.385 285.69 110.584 cv
285.69 110.585 li
285.69 110.785 285.552 110.948 285.382 110.948 cv
282.241 110.948 li
282.071 110.948 281.933 110.785 281.933 110.585 cv
281.933 110.584 li
281.933 110.385 282.071 110.222 282.241 110.222 cv
cp
.65098 .662745 .67451 rgb
ef
282.241 111.466 mo
285.382 111.466 li
285.552 111.466 285.69 111.763 285.69 112.127 cv
285.69 112.127 li
285.69 112.491 285.552 112.788 285.382 112.788 cv
282.241 112.788 li
282.071 112.788 281.933 112.491 281.933 112.127 cv
281.933 112.127 li
281.933 111.763 282.071 111.466 282.241 111.466 cv
cp
ef
282.241 113.307 mo
285.382 113.307 li
285.552 113.307 285.69 113.469 285.69 113.67 cv
285.69 113.67 li
285.69 113.869 285.552 114.032 285.382 114.032 cv
282.241 114.032 li
282.071 114.032 281.933 113.869 281.933 113.67 cv
281.933 113.67 li
281.933 113.469 282.071 113.307 282.241 113.307 cv
cp
.372549 .376471 .384314 rgb
ef
294.882 113.314 mo
295.257 113.314 295.563 112.781 295.563 112.127 cv
295.563 111.473 295.257 110.939 294.882 110.939 cv
294.506 110.939 294.2 111.473 294.2 112.127 cv
294.2 112.781 294.506 113.314 294.882 113.314 cv
cp
.882353 .345098 .211765 rgb
ef
289.169 112.938 mo
290.75 112.938 li
290.75 111.287 li
289.169 111.287 li
289.169 112.938 li
cp
.372549 .376471 .384314 rgb
ef
294.632 109.73 mo
291.026 109.73 li
290.707 109.73 290.446 109.991 290.446 110.31 cv
290.446 113.916 li
290.446 114.234 290.707 114.495 291.026 114.495 cv
294.632 114.495 li
294.951 114.495 295.211 114.234 295.211 113.916 cv
295.211 110.31 li
295.211 109.991 294.951 109.73 294.632 109.73 cv
cp
.498039 .509804 .521569 rgb
ef
294.399 110.222 mo
291.258 110.222 li
291.088 110.222 290.95 110.385 290.95 110.584 cv
290.95 110.585 li
290.95 110.785 291.088 110.948 291.258 110.948 cv
294.399 110.948 li
294.569 110.948 294.707 110.785 294.707 110.585 cv
294.707 110.584 li
294.707 110.385 294.569 110.222 294.399 110.222 cv
cp
.65098 .662745 .67451 rgb
ef
294.399 111.466 mo
291.258 111.466 li
291.088 111.466 290.95 111.763 290.95 112.127 cv
290.95 112.127 li
290.95 112.491 291.088 112.788 291.258 112.788 cv
294.399 112.788 li
294.569 112.788 294.707 112.491 294.707 112.127 cv
294.707 112.127 li
294.707 111.763 294.569 111.466 294.399 111.466 cv
cp
ef
294.399 113.307 mo
291.258 113.307 li
291.088 113.307 290.95 113.469 290.95 113.67 cv
290.95 113.67 li
290.95 113.869 291.088 114.032 291.258 114.032 cv
294.399 114.032 li
294.569 114.032 294.707 113.869 294.707 113.67 cv
294.707 113.67 li
294.707 113.469 294.569 113.307 294.399 113.307 cv
cp
.372549 .376471 .384314 rgb
ef
286.939 116.584 mo
286.939 94.124 li
286.939 90.186 289.113 87.6558 291.894 86.541 cv
292.954 86.1152 294.097 85.9023 295.23 85.9023 cv
296.363 85.9023 297.506 86.1152 298.567 86.541 cv
301.348 87.6558 303.521 90.1865 303.521 94.124 cv
303.515 94.124 li
303.515 96.9272 li
300.691 96.9272 li
300.691 94.124 li
300.686 94.124 li
300.686 91.5298 299.295 89.8789 297.516 89.165 cv
296.804 88.8799 296.021 88.7368 295.23 88.7368 cv
294.439 88.7368 293.656 88.8799 292.944 89.165 cv
291.165 89.8789 289.774 91.5298 289.774 94.124 cv
289.774 116.584 li
286.939 116.584 li
cp
.498039 .509804 .521569 rgb
f
287.485 116.234 mo
288.619 116.234 li
288.619 93.9204 li
288.619 91.3442 289.896 89.1455 292.323 88.1724 cv
293.146 87.8418 294.038 87.6831 294.925 87.6831 cv
295.812 87.6831 296.702 87.8418 297.526 88.1724 cv
299.682 89.0366 300.931 90.8672 301.183 93.0703 cv
301.236 93.0703 li
301.236 96.48 li
302.359 96.48 li
302.359 93.5938 li
302.256 90.6396 300.745 88.2495 297.945 87.1265 cv
296.989 86.7432 295.955 86.5493 294.925 86.5493 cv
293.895 86.5493 292.86 86.7432 291.904 87.1265 cv
289.002 88.2905 287.485 90.8159 287.485 93.9204 cv
287.485 116.234 li
cp
.65098 .662745 .67451 rgb
ef
255.014 119.715 mo
350.685 119.715 li
350.685 115.705 li
255.014 115.705 li
255.014 119.715 li
cp
.819608 .901961 .941176 rgb
ef
255.014 119.738 mo
350.685 119.738 li
350.685 119.113 li
255.014 119.113 li
255.014 119.738 li
cp
.658824 .721569 .756863 rgb
ef
255.014 116.102 mo
350.685 116.102 li
350.685 115.705 li
255.014 115.705 li
255.014 116.102 li
cp
.913725 .945098 .964706 rgb
ef
95.6123 9.24854 mo
88.5005 6.37451 80.8896 3.29932 72.729 0 cv
0 0 li
0 225 li
26.1025 225 li
56.4609 210.984 li
71.0068 204.269 83.9858 198.275 95.6123 192.912 cv
95.6123 156.804 95.6123 127.674 95.6123 99.1699 cv
95.6123 70.7021 95.6123 42.8589 95.6123 9.24854 cv
cp
.945098 .94902 .94902 rgb
ef
90.4761 136.287 mo
85.8809 136.024 li
77.6294 137.596 69.377 139.163 61.1221 140.716 cv
52.8105 142.279 44.5024 143.863 36.1943 145.444 cv
27.8232 147.038 19.4517 148.629 11.0811 150.223 cv
9.11328 150.598 7.146 150.971 5.17822 151.344 cv
9.77344 151.606 li
18.0713 150.035 26.3662 148.446 34.6641 146.872 cv
43.084 145.274 51.5029 143.671 59.9238 142.076 cv
68.1611 140.516 76.3979 138.955 84.6357 137.396 cv
86.5825 137.027 88.5293 136.658 90.4761 136.287 cv
cp
.698039 .701961 .709804 rgb
ef
9.77344 151.606 mo
5.17822 151.344 li
5.17822 159.382 5.17822 167.419 5.17822 175.457 cv
5.17822 184.139 5.17822 192.819 5.17822 201.501 cv
5.17822 207.545 5.17822 213.589 5.17822 219.633 cv
9.77344 219.896 li
9.77344 211.186 9.77344 202.475 9.77344 193.764 cv
9.77344 185.097 9.77344 176.43 9.77344 167.763 cv
9.77344 162.377 9.77344 156.992 9.77344 151.606 cv
cp
ef
90.4761 136.287 mo
80.2129 138.237 68.9019 140.375 56.4512 142.732 cv
42.606 145.355 27.1504 148.305 9.77344 151.606 cv
9.77344 163.01 9.77344 174.387 9.77344 185.764 cv
9.77344 197.142 9.77344 208.519 9.77344 219.896 cv
27.1406 212.611 42.6069 206.129 56.4512 200.324 cv
68.9121 195.099 80.2227 190.363 90.4761 186.059 cv
90.4761 177.783 90.4761 169.487 90.4761 161.191 cv
90.4761 152.877 90.4761 144.582 90.4761 136.287 cv
cp
.85098 .854902 .858824 rgb
ef
87.1738 143.33 mo
87.1738 143.33 li
87.3174 143.299 87.4326 143.446 87.4326 143.656 cv
87.4326 155.959 87.4326 168.262 87.4326 180.546 cv
87.4326 180.775 87.3174 180.99 87.1738 181.046 cv
87.1738 181.046 li
87.0298 181.104 86.9141 180.977 86.9141 180.748 cv
86.9141 168.436 86.9141 156.103 86.9048 143.771 cv
86.9048 143.561 87.02 143.363 87.1738 143.33 cv
cp
84.8984 143.828 mo
84.8984 143.828 li
85.042 143.797 85.167 143.943 85.167 144.155 cv
85.167 156.585 85.167 169.014 85.1768 181.424 cv
85.1768 181.655 85.0518 181.877 84.9077 181.934 cv
84.9077 181.934 li
84.7637 181.989 84.6392 181.861 84.6392 181.63 cv
84.6392 169.19 84.6392 156.731 84.6392 144.272 cv
84.6392 144.061 84.7544 143.86 84.8984 143.828 cv
84.8984 143.828 li
cp
82.5938 144.336 mo
82.5938 144.336 li
82.7383 144.303 82.8535 144.453 82.8535 144.666 cv
82.8535 157.225 82.8535 169.784 82.8628 182.323 cv
82.8628 182.557 82.7383 182.778 82.5938 182.836 cv
82.5938 182.836 li
82.4497 182.894 82.3154 182.768 82.3154 182.533 cv
82.3154 169.965 82.3154 157.375 82.3154 144.786 cv
82.3154 144.571 82.4404 144.367 82.5938 144.336 cv
82.5938 144.336 li
cp
80.2227 144.854 mo
80.2227 144.854 li
80.3667 144.822 80.501 144.971 80.501 145.188 cv
80.501 157.877 80.501 170.568 80.501 183.238 cv
80.501 183.475 80.3765 183.701 80.2227 183.76 cv
80.2227 183.76 li
80.0693 183.819 79.9536 183.689 79.9536 183.453 cv
79.9443 170.752 79.9443 158.03 79.9443 145.309 cv
79.9443 145.092 80.0693 144.888 80.2227 144.854 cv
80.2227 144.854 li
cp
77.8032 145.383 mo
77.8032 145.383 li
77.957 145.35 78.0815 145.502 78.0815 145.721 cv
78.0815 158.545 78.0815 171.371 78.0815 184.176 cv
78.0815 184.414 77.957 184.642 77.8032 184.701 cv
77.8032 184.701 li
77.6499 184.762 77.5156 184.635 77.5156 184.395 cv
77.5156 171.559 77.5156 158.701 77.5156 145.846 cv
77.5156 145.625 77.6499 145.417 77.8032 145.383 cv
77.8032 145.383 li
cp
75.3359 145.926 mo
75.3359 145.926 li
75.499 145.889 75.624 146.043 75.624 146.264 cv
75.624 159.227 75.624 172.188 75.6333 185.131 cv
75.6333 185.371 75.5088 185.602 75.3359 185.666 cv
75.3359 185.666 li
75.1826 185.729 75.0576 185.597 75.0576 185.355 cv
75.0479 172.381 75.0479 159.386 75.0479 146.391 cv
75.0479 146.17 75.1724 145.96 75.3359 145.926 cv
75.3359 145.926 li
cp
72.811 146.478 mo
72.811 146.478 li
72.9741 146.441 73.1084 146.596 73.1084 146.818 cv
73.1084 159.922 73.1084 173.024 73.1182 186.107 cv
73.1182 186.35 72.9741 186.586 72.8208 186.648 cv
72.8208 186.648 li
72.6572 186.713 72.5132 186.584 72.5132 186.339 cv
72.5132 173.223 72.5132 160.087 72.5132 146.951 cv
72.5132 146.727 72.6475 146.513 72.811 146.478 cv
72.811 146.478 li
cp
70.2378 147.041 mo
70.2378 147.041 li
70.4014 147.006 70.5356 147.162 70.5356 147.387 cv
70.5356 160.634 70.5356 173.881 70.5356 187.107 cv
70.5356 187.354 70.4106 187.59 70.2378 187.653 cv
70.2378 187.653 li
70.0747 187.718 69.9312 187.588 69.9312 187.342 cv
69.9312 174.082 69.9312 160.801 69.9312 147.521 cv
69.9312 147.295 70.0747 147.078 70.2378 147.041 cv
70.2378 147.041 li
cp
67.5977 147.62 mo
67.5977 147.62 li
67.7705 147.584 67.9146 147.738 67.9146 147.967 cv
67.9146 161.36 67.9146 174.754 67.9146 188.126 cv
67.9146 188.375 67.7705 188.617 67.6074 188.684 cv
67.6074 188.684 li
67.4346 188.749 67.3003 188.615 67.3003 188.365 cv
67.291 174.959 67.2905 161.531 67.2905 148.104 cv
67.2905 147.875 67.4346 147.658 67.5977 147.62 cv
67.5977 147.62 li
cp
64.9097 148.21 mo
64.9097 148.21 li
65.0825 148.172 65.2168 148.331 65.2168 148.563 cv
65.2168 162.105 65.2168 175.648 65.2168 189.172 cv
65.2168 189.424 65.0825 189.666 64.9097 189.732 cv
64.9097 189.732 li
64.7373 189.801 64.5928 189.67 64.5928 189.417 cv
64.5928 175.859 64.5923 162.28 64.5835 148.701 cv
64.5835 148.471 64.7373 148.248 64.9097 148.21 cv
64.9097 148.21 li
cp
62.1543 148.814 mo
62.1543 148.814 li
62.3271 148.776 62.4805 148.935 62.4805 149.168 cv
62.4805 162.865 62.4805 176.562 62.4805 190.236 cv
62.4805 190.492 62.3271 190.741 62.1543 190.81 cv
62.1543 190.81 li
61.9814 190.879 61.8374 190.744 61.8374 190.488 cv
61.8374 176.777 61.8374 163.044 61.8281 149.312 cv
61.8281 149.077 61.9717 148.854 62.1543 148.814 cv
62.1543 148.814 li
cp
59.3413 149.432 mo
59.3413 149.432 li
59.5234 149.393 59.6675 149.555 59.6675 149.791 cv
59.6675 163.645 59.6675 177.498 59.6675 191.33 cv
59.6675 191.588 59.5234 191.838 59.3511 191.908 cv
59.3511 191.908 li
59.1685 191.979 59.0049 191.846 59.0049 191.588 cv
59.0049 177.719 59.0049 163.828 59.0049 149.938 cv
59.0049 149.699 59.1587 149.473 59.3413 149.432 cv
59.3413 149.432 li
cp
56.4609 150.063 mo
56.4609 150.063 li
56.6431 150.023 56.7969 150.186 56.7969 150.425 cv
56.7969 164.439 56.7969 178.453 56.7969 192.446 cv
56.7969 192.707 56.6528 192.96 56.4609 193.01 cv
56.4609 193.01 li
56.269 193.086 56.1157 192.949 56.1157 192.688 cv
56.1157 178.657 56.1157 164.627 56.1157 150.575 cv
56.1157 150.335 56.269 150.105 56.4609 150.063 cv
56.4609 150.063 li
cp
53.5039 150.711 mo
53.5039 150.711 li
53.6963 150.67 53.8594 150.833 53.8594 151.074 cv
53.8594 165.253 53.8594 179.41 53.8594 193.566 cv
53.8594 193.83 53.6963 194.09 53.5137 194.163 cv
53.5137 194.163 li
53.3218 194.238 53.1582 194.104 53.1582 193.839 cv
53.1582 179.644 53.1582 165.447 53.1489 151.23 cv
53.1489 150.988 53.312 150.754 53.5039 150.711 cv
53.5039 150.711 li
cp
50.4893 151.373 mo
50.4893 151.373 li
50.6816 151.33 50.835 151.497 50.835 151.742 cv
50.835 166.089 50.835 180.413 50.835 194.738 cv
50.835 195.005 50.6816 195.266 50.4893 195.34 cv
50.4893 195.34 li
50.2979 195.417 50.1245 195.281 50.1245 195.014 cv
50.1245 180.65 50.1245 166.285 50.1245 151.898 cv
50.1245 151.654 50.2979 151.416 50.4893 151.373 cv
50.4893 151.373 li
cp
47.3887 152.053 mo
47.3887 152.053 li
47.5898 152.01 47.7534 152.176 47.7534 152.423 cv
47.7627 166.941 47.7627 181.438 47.7627 195.935 cv
47.7627 196.205 47.5898 196.473 47.3979 196.551 cv
47.3979 196.551 li
47.1963 196.629 47.0332 196.488 47.0332 196.218 cv
47.0332 181.681 47.0332 167.143 47.0332 152.584 cv
47.0332 152.336 47.1865 152.097 47.3887 152.053 cv
47.3887 152.053 li
cp
44.23 152.747 mo
44.23 152.747 li
44.4316 152.702 44.5947 152.872 44.5947 153.123 cv
44.5947 167.818 44.5947 182.492 44.5947 197.164 cv
44.5947 197.438 44.4316 197.706 44.23 197.785 cv
44.23 197.785 li
44.019 197.865 43.8457 197.729 43.8457 197.454 cv
43.8457 182.74 43.8457 168.025 43.8457 153.287 cv
43.8457 153.037 44.0186 152.792 44.23 152.747 cv
44.23 152.747 li
cp
40.9751 153.461 mo
40.9751 153.461 li
41.1865 153.414 41.3594 153.584 41.3594 153.838 cv
41.3594 168.713 41.3594 183.567 41.3594 198.42 cv
41.3594 198.697 41.1865 198.973 40.9751 199.055 cv
40.9751 199.055 li
40.7637 199.137 40.5913 198.995 40.5913 198.717 cv
40.5913 183.822 40.5913 168.926 40.5913 154.007 cv
40.5913 153.752 40.7637 153.508 40.9751 153.461 cv
40.9751 153.461 li
cp
37.6436 154.189 mo
37.6436 154.189 li
37.8647 154.143 38.0371 154.313 38.0371 154.57 cv
38.0371 169.631 38.0371 184.67 38.0371 199.707 cv
38.0371 199.988 37.855 200.268 37.6436 200.352 cv
37.6436 200.352 li
37.4229 200.436 37.2407 200.297 37.2407 200.017 cv
37.2407 184.934 37.2407 169.852 37.2407 154.746 cv
37.2407 154.488 37.4331 154.236 37.6436 154.189 cv
37.6436 154.189 li
cp
34.2354 154.938 mo
34.2354 154.938 li
34.4565 154.889 34.6294 155.063 34.6294 155.324 cv
34.6294 170.575 34.6294 185.803 34.6294 201.031 cv
34.6294 201.314 34.4565 201.596 34.2354 201.682 cv
34.2354 201.682 li
34.0054 201.773 33.8228 201.629 33.8228 201.344 cv
33.8228 186.071 33.8228 170.799 33.8228 155.502 cv
33.8228 155.24 34.0054 154.988 34.2354 154.938 cv
34.2354 154.938 li
cp
30.731 155.706 mo
30.731 155.706 li
30.9619 155.656 31.1538 155.83 31.1538 156.094 cv
31.1538 171.539 31.1538 186.963 31.1538 202.385 cv
31.1538 202.672 30.9619 202.961 30.731 203.05 cv
30.731 203.05 li
30.5112 203.139 30.3091 202.998 30.3091 202.71 cv
30.3091 187.241 30.3091 171.771 30.3091 156.279 cv
30.3091 156.015 30.5107 155.756 30.731 155.706 cv
30.731 155.706 li
cp
27.1504 156.492 mo
27.1504 156.492 li
27.3809 156.441 27.563 156.619 27.563 156.887 cv
27.563 172.532 27.563 188.155 27.563 203.777 cv
27.563 204.068 27.3809 204.357 27.1406 204.449 cv
27.1406 204.449 li
26.9106 204.54 26.7085 204.398 26.7085 204.107 cv
26.7085 188.438 26.709 172.768 26.7183 157.074 cv
26.7183 156.807 26.9102 156.543 27.1504 156.492 cv
27.1504 156.492 li
cp
23.4639 157.302 mo
23.4639 157.302 li
23.7041 157.249 23.8955 157.427 23.8955 157.697 cv
23.8955 173.548 23.8955 189.375 23.8955 205.201 cv
23.8955 205.496 23.7036 205.795 23.4639 205.889 cv
23.4639 205.889 li
23.2236 205.982 23.0317 205.836 23.0317 205.54 cv
23.0317 189.665 23.0317 173.789 23.0317 157.889 cv
23.0317 157.619 23.2236 157.354 23.4639 157.302 cv
23.4639 157.302 li
cp
19.6807 158.129 mo
19.6807 158.129 li
19.9307 158.076 20.1226 158.258 20.1226 158.531 cv
20.1226 174.594 20.1226 190.631 20.1226 206.668 cv
20.1226 206.968 19.9307 207.267 19.6807 207.363 cv
19.6807 207.363 li
19.4316 207.459 19.2202 207.316 19.2202 207.017 cv
19.2202 190.93 19.2202 174.842 19.23 158.729 cv
19.23 158.455 19.4316 158.184 19.6807 158.129 cv
19.6807 158.129 li
cp
15.7832 158.982 mo
15.7832 158.982 li
16.0518 158.924 16.2534 159.107 16.2534 159.386 cv
16.2534 175.664 16.2534 191.917 16.2441 208.17 cv
16.2441 208.473 16.0518 208.777 15.7832 208.881 cv
15.7832 208.881 li
15.5337 208.98 15.332 208.831 15.332 208.527 cv
15.332 192.223 15.332 175.918 15.332 159.589 cv
15.332 159.311 15.5337 159.039 15.7832 158.982 cv
15.7832 158.982 li
cp
.698039 .701961 .709804 rgb
ef
16.1001 153.258 mo
30.9233 150.297 44.3066 147.619 56.4512 145.191 cv
67.5205 142.979 77.6685 140.947 86.9912 139.088 cv
87.4033 139.006 87.7305 139.436 87.7305 140.027 cv
87.7305 140.027 li
87.7305 140.637 87.4033 141.199 86.9912 141.286 cv
77.6685 143.238 67.521 145.37 56.4512 147.693 cv
44.3071 150.242 30.9233 153.053 16.1001 156.161 cv
15.3799 156.313 14.7847 155.777 14.7847 154.967 cv
14.7847 154.967 li
14.7847 154.18 15.3799 153.4 16.1001 153.258 cv
cp
ef
87.481 139.26 mo
87.6343 139.438 87.7305 139.703 87.7305 140.027 cv
87.7305 140.027 li
87.7305 140.637 87.4033 141.199 86.9912 141.286 cv
77.6685 143.238 67.521 145.37 56.4512 147.693 cv
44.3071 150.242 30.9233 153.054 16.1001 156.161 cv
15.6968 156.246 15.3418 156.117 15.1016 155.864 cv
15.7734 155.371 16.436 154.855 17.0889 154.344 cv
31.6626 151.367 44.8442 148.673 56.8164 146.227 cv
67.751 143.991 77.7744 141.945 86.9912 140.064 cv
87.1543 139.802 87.3174 139.539 87.481 139.26 cv
cp
.596078 .607843 .619608 rgb
ef
16.1001 154.04 mo
30.9233 151.039 44.3071 148.327 56.4512 145.866 cv
67.521 143.623 77.6689 141.566 86.9912 139.681 cv
87.1831 139.642 87.3364 139.841 87.3364 140.107 cv
87.3364 140.107 li
87.3364 140.395 87.1831 140.654 86.9912 140.693 cv
77.6689 142.623 67.521 144.726 56.4512 147.02 cv
44.3071 149.535 30.9233 152.31 16.1001 155.379 cv
15.7642 155.447 15.4951 155.201 15.4951 154.82 cv
15.4951 154.82 li
15.4951 154.467 15.7642 154.107 16.1001 154.04 cv
cp
.85098 .854902 .858824 rgb
ef
16.1001 211.51 mo
30.9233 205.591 44.3032 200.229 56.4512 195.385 cv
67.5264 190.969 77.6787 186.924 87.0005 183.198 cv
87.4038 183.037 87.7397 183.381 87.7397 183.99 cv
87.7397 183.99 li
87.7397 184.58 87.4038 185.193 87.0005 185.357 cv
77.6787 189.175 67.5298 193.328 56.4512 197.865 cv
44.3066 202.838 30.9233 208.324 16.1001 214.389 cv
15.3799 214.684 14.7847 214.269 14.7847 213.482 cv
14.7847 213.482 li
14.7847 212.67 15.3799 211.798 16.1001 211.51 cv
cp
.698039 .701961 .709804 rgb
ef
87.481 183.273 mo
87.6343 183.4 87.7397 183.666 87.7397 183.99 cv
87.7397 183.99 li
87.7397 184.58 87.4038 185.193 87.0005 185.357 cv
77.6787 189.175 67.5298 193.328 56.4512 197.865 cv
44.3066 202.838 30.9233 208.323 16.1001 214.389 cv
15.6968 214.554 15.3418 214.498 15.1016 214.291 cv
15.7734 213.664 16.436 213.017 17.0889 212.375 cv
31.6626 206.488 44.8486 201.175 56.8257 196.346 cv
67.7554 191.939 77.7744 187.879 86.9912 184.157 cv
87.1543 183.861 87.3174 183.566 87.481 183.273 cv
cp
.596078 .607843 .619608 rgb
ef
16.1001 212.268 mo
30.9238 206.313 44.3032 200.912 56.4512 196.037 cv
67.5264 191.593 77.6782 187.521 87.0005 183.771 cv
87.1924 183.695 87.3364 183.863 87.3364 184.15 cv
87.3364 184.15 li
87.3364 184.418 87.1924 184.707 87.0005 184.785 cv
77.6782 188.576 67.5264 192.695 56.4512 197.19 cv
44.3032 202.121 30.9238 207.582 16.1001 213.605 cv
15.7549 213.746 15.4951 213.549 15.4951 213.195 cv
15.4951 213.195 li
15.4951 212.816 15.7554 212.406 16.1001 212.268 cv
cp
.85098 .854902 .858824 rgb
ef
86.0693 111.214 mo
76.9971 111.877 67.1558 112.598 56.4512 113.383 cv
44.7388 114.242 31.8643 115.187 17.6841 116.226 cv
17.6841 96.6367 17.689 77.0479 17.6938 57.459 cv
17.6982 38.3062 17.6948 19.1533 17.6943 0 cv
21.6299 0 li
34.2593 4.19287 45.8359 8.02588 56.4512 11.561 cv
67.1504 15.1235 76.9873 18.4038 86.0596 21.4146 cv
86.0596 36.3843 86.0552 51.335 86.0596 66.3237 cv
86.0645 81.2939 86.0693 96.2446 86.0693 111.214 cv
cp
.803922 .509804 .298039 rgb
ef
20.7759 3.17041 mo
33.7271 7.31689 45.5874 11.0977 56.4512 14.585 cv
66.4302 17.7881 75.6719 20.7583 84.2261 23.4956 cv
84.2261 37.6992 84.2358 51.9028 84.2358 66.1064 cv
84.2358 80.29 84.2358 94.4937 84.2358 108.678 cv
75.6816 109.201 66.436 109.768 56.4512 110.38 cv
45.5835 111.047 33.7271 111.776 20.7759 112.571 cv
20.7759 94.3579 20.7759 76.0957 20.7759 57.8828 cv
20.7759 39.6704 20.7759 21.4082 20.7759 3.17041 cv
cp
.65098 .639216 .796078 rgb
ef
57.7188 15.0142 mo
52.4766 26.1792 47.0239 37.8228 41.3301 49.9746 cv
42.4536 52.5078 43.5771 54.998 44.6909 57.4668 cv
37.7012 74.8242 30.3281 93.1299 22.542 112.462 cv
26.6797 112.208 30.7124 111.961 34.6294 111.72 cv
41.8774 93.2744 48.752 75.7822 55.2803 59.1509 cv
54.6182 56.9097 53.9746 54.6592 53.3218 52.375 cv
59.2549 40.7397 64.9097 29.6563 70.3242 19.0483 cv
69.374 18.7437 68.4233 18.438 67.4731 18.1348 cv
62.5381 27.3384 57.3926 36.9092 52.0352 46.8906 cv
51.6514 45.9756 51.2671 45.0586 50.8926 44.1182 cv
55.8564 34.8735 60.6372 26.001 65.2456 17.4219 cv
62.7881 16.6348 60.2725 15.8311 57.7188 15.0142 cv
cp
.615686 .490196 .713726 rgb
ef
55.5586 52.3784 mo
56.3457 55.0146 57.1235 57.6328 57.9014 60.2148 cv
51.3535 76.4414 44.4604 93.5415 37.1733 111.564 cv
39.6313 111.414 42.0601 111.265 44.4507 111.118 cv
51.1138 94.3105 57.4595 78.3345 63.4985 63.1084 cv
63.1909 60.1045 62.8843 57.1143 62.5864 54.0962 cv
68.3276 42.8447 73.7998 32.1079 79.0322 21.8325 cv
76.9873 21.1807 74.9136 20.5176 72.811 19.8423 cv
67.3291 30.2021 61.5879 41.0142 55.5586 52.3784 cv
cp
.345098 .635294 .658824 rgb
ef
64.1509 53.9995 mo
64.4966 56.7104 64.8423 59.4155 65.188 62.0908 cv
71.8794 49.0308 78.2163 36.6934 84.2261 24.9858 cv
84.2261 24.502 84.2261 23.999 84.2261 23.4956 cv
83.1411 23.1465 82.0371 22.7944 80.9233 22.4399 cv
75.5952 32.4707 70.0171 42.9663 64.1509 53.9995 cv
cp
.313726 .305882 .482353 rgb
ef
55.4531 110.441 mo
58.3813 102.576 61.2324 94.8911 64.0264 87.3799 cv
66.6758 87.2954 69.2686 87.2129 71.8125 87.1323 cv
76.0942 77.5884 80.2417 68.3867 84.2358 59.4883 cv
84.2358 56.9922 84.2358 54.4956 84.2358 51.9995 cv
79.896 61.4028 75.3936 71.1992 70.7085 81.3701 cv
70.0459 81.3325 69.3931 81.2944 68.7305 81.2563 cv
74.1265 68.9453 79.2817 57.1597 84.2358 45.8848 cv
84.2261 40.4277 84.2261 34.9517 84.2261 29.4561 cv
78.2544 41.3525 71.9565 53.9253 65.3223 67.2295 cv
59.812 81.1309 54.0513 95.6577 48.0122 110.899 cv
50.5469 110.743 53.0239 110.591 55.4531 110.441 cv
cp
.482353 .466667 .713726 rgb
ef
65.188 89.4741 mo
62.8262 96.291 60.4263 103.221 57.978 110.287 cv
59.9941 110.163 61.9814 110.041 63.9302 109.921 cv
65.1211 106.151 66.3018 102.417 67.4922 98.7207 cv
69.729 98.5825 71.9277 98.4473 74.0977 98.2935 cv
77.5825 89.5161 80.9526 80.9966 84.2358 72.7046 cv
84.2358 70.7119 84.2358 68.7188 84.2358 66.7251 cv
80.8755 74.1567 77.4194 81.8154 73.8574 89.6709 cv
71.0347 89.6069 68.1543 89.5415 65.188 89.4741 cv
cp
.364706 .635294 .564706 rgb
ef
84.2358 78.8779 mo
81.4419 85.9448 78.5718 93.1509 75.6528 100.563 cv
73.5503 100.572 71.4092 100.562 69.23 100.552 cv
68.3467 103.599 67.4634 106.667 66.561 109.76 cv
69.4121 109.585 72.2158 109.414 74.9424 109.246 cv
75.0962 108.451 75.2588 107.657 75.4126 106.844 cv
77.7075 106.727 79.9639 106.612 82.1714 106.5 cv
82.8628 104.518 83.5542 102.547 84.2358 100.57 cv
84.2358 98.2671 84.2358 95.9448 84.2358 93.623 cv
83.3623 96.1431 82.498 98.6826 81.605 101.223 cv
80.6357 101.25 79.6563 101.276 78.667 101.303 cv
80.5488 96.1372 82.4116 91.0557 84.2358 86.0762 cv
84.2358 83.6768 84.2358 81.2773 84.2358 78.8779 cv
cp
.313726 .305882 .482353 rgb
ef
54.1187 13.8408 mo
48.4829 25.459 42.5884 37.6069 36.415 50.2964 cv
37.4326 53.6704 38.4404 57.0181 39.4395 60.3188 cv
33.4868 75.3887 27.2754 91.1426 20.7759 107.602 cv
20.7759 99.5015 20.7759 91.4014 20.7759 83.2764 cv
23.2139 78.2271 25.5947 73.2622 27.9565 68.3804 cv
26.9292 62.4478 25.8926 56.4458 24.8462 50.4004 cv
32.3345 36.6763 39.4292 23.6592 46.1787 11.2993 cv
48.8765 12.1616 51.5166 13.0098 54.1187 13.8408 cv
cp
ef
42.9531 10.2681 mo
36.0596 22.7627 28.7822 35.9258 21.1211 49.813 cv
22.1963 55.124 23.2622 60.3965 24.3276 65.6055 cv
23.1567 67.4063 21.9658 69.1963 20.7759 71.002 cv
20.7759 56.1685 20.7759 41.3101 20.7759 26.4517 cv
22.1484 24.4541 23.5117 22.479 24.856 20.4937 cv
24.0879 17.8867 23.3198 15.2637 22.5518 12.6035 cv
24.4912 10.2446 26.4014 7.89551 28.293 5.57861 cv
30.1841 6.18408 32.0562 6.78027 33.9092 7.37402 cv
32.3345 9.39648 30.7603 11.4507 29.147 13.5225 cv
29.877 15.853 30.6064 18.1724 31.3457 20.457 cv
33.7842 16.5381 36.1943 12.667 38.5752 8.86572 cv
40.0439 9.33545 41.5127 9.80566 42.9531 10.2681 cv
cp
.364706 .635294 .564706 rgb
ef
44.1724 10.6572 mo
38.498 20.6143 32.5845 31.0122 26.4111 41.8789 cv
26.8721 42.2324 27.333 42.5869 27.7935 42.9395 cv
34.0244 31.8672 39.9766 21.2778 45.6797 11.1416 cv
45.1802 10.9805 44.6714 10.8198 44.1724 10.6572 cv
cp
1 1 1 rgb
ef
37.5479 68.8945 mo
32.1714 81.9521 26.584 95.5391 20.7759 109.688 cv
20.7759 110.658 20.7759 111.626 20.7759 112.571 cv
20.9673 112.559 21.1597 112.547 21.3516 112.535 cv
27.5249 97.4297 33.439 82.938 39.1221 69.0459 cv
38.5942 68.9951 38.0757 68.9453 37.5479 68.8945 cv
cp
ef
63.7573 65.3823 mo
64.3242 65.5132 64.8809 65.644 65.4375 65.7744 cv
59.5718 80.1294 53.4082 95.1533 46.937 110.965 cv
46.3804 110.999 45.833 111.033 45.2856 111.066 cv
51.7471 95.0879 57.9014 79.8994 63.7573 65.3823 cv
cp
ef
55.2515 14.2036 mo
51.7183 21.4971 48.1084 28.978 44.3833 36.6743 cv
44.9307 36.8628 45.4878 37.0532 46.0347 37.2212 cv
49.7119 29.4971 53.2739 21.9873 56.749 14.7036 cv
56.25 14.522 55.7505 14.3628 55.2515 14.2036 cv
cp
ef
84.2358 42.0146 mo
79.2817 53.2236 74.1167 64.9404 68.7305 77.1797 cv
69.7676 77.1543 70.7852 77.1284 71.8032 77.0825 cv
76.0942 67.3799 80.2324 58.0063 84.2358 48.9805 cv
84.2358 46.6587 84.2358 44.3369 84.2358 42.0146 cv
cp
ef
35.3301 7.82861 mo
33.7939 9.92334 32.2388 12.0405 30.6831 14.1611 cv
31.1152 15.2236 31.5664 16.2603 32.0083 17.2944 cv
33.9092 14.3442 35.7715 11.4321 37.6436 8.56689 cv
36.876 8.3208 36.0986 8.07471 35.3301 7.82861 cv
cp
ef
84.2358 62.2944 mo
80.6929 70.2285 77.0352 78.3979 73.2622 86.8359 cv
73.5791 86.9072 73.896 86.979 74.2222 87.0308 cv
77.6592 79.4185 80.981 72.0273 84.2358 64.8096 cv
84.2358 63.9775 84.2358 63.1455 84.2358 62.2944 cv
cp
ef
20.7759 74.0332 mo
21.8989 72.0864 23.0317 70.1553 24.145 68.2148 cv
24.606 68.8706 25.0669 69.5254 25.5371 70.1543 cv
23.9727 73.1616 22.3691 76.1758 20.7759 79.2266 cv
20.7759 77.5122 20.7759 75.7725 20.7759 74.0332 cv
cp
ef
52.1792 61.2339 mo
53.5137 61.4756 54.8193 61.7134 56.125 61.9502 cv
49.7407 77.6875 43.0298 94.2217 35.9639 111.638 cv
34.7925 111.71 33.6021 111.783 32.4019 111.857 cv
39.3237 94.1416 45.9097 77.2949 52.1792 61.2339 cv
cp
ef
84.2358 88.3018 mo
82.8535 92.0952 81.4517 95.937 80.04 99.8262 cv
80.5972 99.8145 81.1538 99.8027 81.7202 99.791 cv
82.5747 97.2778 83.4004 94.7832 84.2358 92.2876 cv
84.2358 90.9526 84.2358 89.6172 84.2358 88.3018 cv
cp
ef
418.658 119.786 mo
422.474 120.658 426.491 121.575 430.728 122.544 cv
435.199 123.566 439.925 124.65 444.933 125.796 cv
444.933 140.164 444.933 154.512 444.933 168.857 cv
444.933 183.227 444.933 197.596 444.933 211.898 cv
439.925 208.303 435.199 204.905 430.721 201.689 cv
426.486 198.648 422.474 195.762 418.658 193.019 cv
418.658 180.854 418.658 168.633 418.658 156.412 cv
418.658 144.209 418.658 132.007 418.658 119.786 cv
cp
.945098 .94902 .94902 rgb
ef
444.896 125.787 mo
444.908 125.79 444.92 125.793 444.933 125.796 cv
444.933 140.164 444.933 154.512 444.933 168.857 cv
444.933 183.227 444.933 197.596 444.933 211.898 cv
439.925 208.303 435.199 204.905 430.721 201.689 cv
426.486 198.648 422.474 195.762 418.658 193.019 cv
418.823 192.811 418.996 192.583 419.168 192.358 cv
419.583 191.266 420.004 190.17 420.426 189.052 cv
423.639 180.324 426.982 171.179 430.479 161.635 cv
434.127 151.671 437.967 141.237 441.979 130.303 cv
442.937 128.82 443.912 127.324 444.896 125.787 cv
cp
.733333 .745098 .752941 rgb
ef
419.066 120.69 mo
422.753 121.553 426.645 122.463 430.728 123.418 cv
435.033 124.426 439.573 125.492 444.378 126.616 cv
444.378 140.616 444.374 154.616 444.371 168.595 cv
444.368 182.594 444.371 196.615 444.371 210.572 cv
439.573 207.148 435.026 203.908 430.721 200.836 cv
426.645 197.929 422.753 195.152 419.066 192.521 cv
419.066 180.58 419.066 168.584 419.066 156.605 cv
419.066 144.646 419.066 132.668 419.066 120.69 cv
cp
.85098 .854902 .858824 rgb
ef
439.945 194.463 mo
436.755 192.43 433.681 190.471 430.721 188.582 cv
427.875 186.768 425.113 185.008 422.453 183.314 cv
422.46 174.966 422.46 166.58 422.46 158.213 cv
422.46 149.864 422.46 141.479 422.46 133.13 cv
425.12 133.954 427.875 134.809 430.728 135.692 cv
433.688 136.609 436.762 137.564 439.951 138.555 cv
439.951 147.854 439.951 157.197 439.951 166.498 cv
439.951 175.819 439.951 185.162 439.945 194.463 cv
cp
.945098 .94902 .94902 rgb
ef
439.951 138.555 mo
439.799 138.779 439.646 139.004 439.498 139.23 cv
439.142 140.162 438.784 141.091 438.427 142.015 cv
435.831 149.037 433.317 155.848 430.887 162.463 cv
428.521 168.899 426.229 175.139 424.004 181.197 cv
423.485 181.922 422.977 182.625 422.474 183.326 cv
422.466 183.32 422.46 183.316 422.453 183.314 cv
422.46 174.966 422.46 166.58 422.46 158.213 cv
422.46 149.864 422.46 141.479 422.46 133.13 cv
439.951 138.555 li
cp
.733333 .745098 .752941 rgb
ef
439.587 193.627 mo
436.525 191.686 433.578 189.814 430.721 188.006 cv
427.971 186.266 425.311 184.58 422.741 182.949 cv
422.741 174.755 422.744 166.561 422.747 158.348 cv
422.75 150.154 422.747 141.96 422.747 133.785 cv
425.318 134.592 427.979 135.426 430.728 136.288 cv
433.578 137.184 436.531 138.11 439.594 139.072 cv
439.594 148.144 439.594 157.236 439.594 166.328 cv
439.594 175.441 439.594 184.535 439.587 193.627 cv
cp
.85098 .854902 .858824 rgb
ef
444.933 125.796 mo
446.59 126.168 448.279 126.55 450 126.941 cv
450 215.541 li
444.933 211.898 li
444.933 197.596 444.933 183.227 444.933 168.857 cv
444.933 154.512 444.933 140.164 444.933 125.796 cv
cp
.945098 .94902 .94902 rgb
ef
450 215.541 mo
444.933 211.898 li
445.169 211.68 445.411 211.443 445.654 211.205 cv
446.228 209.982 446.81 208.752 447.402 207.498 cv
450 201.766 li
450 215.541 li
cp
.733333 .745098 .752941 rgb
ef
445.509 126.859 mo
450 127.912 li
450 214.584 li
445.509 211.38 li
445.509 197.311 445.509 183.199 445.509 169.131 cv
445.509 155.063 445.509 140.949 445.509 126.859 cv
cp
.85098 .854902 .858824 rgb
ef
418.666 9.24902 mo
422.511 7.29492 426.525 5.35059 430.796 3.18701 cv
436.871 .106934 li
445.087 .106934 li
445.083 13.1245 445.083 26.1211 445.083 39.0649 cv
445.083 53.4116 445.077 67.6685 445.077 82.0156 cv
440.042 82.1152 435.287 82.2065 430.779 82.2969 cv
426.522 82.3818 422.491 82.4844 418.666 82.6797 cv
418.666 70.4775 418.633 58.2378 418.633 46.0356 cv
418.633 33.8521 418.666 21.5063 418.666 9.24902 cv
cp
.945098 .94902 .94902 rgb
ef
444.902 0 mo
444.898 13.0171 444.898 26.0146 444.898 38.958 cv
444.898 53.3047 444.898 67.6948 444.898 82.042 cv
439.863 82.1416 435.106 82.2354 430.599 82.3257 cv
426.341 82.4106 418.666 82.6797 418.666 82.6797 cv
418.86 81.7534 li
418.86 81.7534 419.804 78.7056 420.234 77.2725 cv
423.463 66.1567 426.842 54.5205 430.361 42.4102 cv
434.034 29.7729 437.895 16.4844 441.934 2.56494 cv
442.305 1.71729 442.682 .861816 443.06 0 cv
444.902 0 li
cp
.733333 .745098 .752941 rgb
ef
418.911 9.66895 mo
422.629 7.80176 426.501 6.05469 430.611 3.99365 cv
438.574 0 li
444.341 0 li
444.341 39.1055 li
444.341 53.084 444.341 67.127 444.341 81.1055 cv
439.512 81.2271 434.934 81.3418 430.604 81.4517 cv
426.494 81.5557 422.571 81.6563 418.86 81.7534 cv
418.86 69.7939 418.86 57.7793 418.86 45.8193 cv
418.86 33.8784 418.911 21.665 418.911 9.66895 cv
cp
.85098 .854902 .858824 rgb
ef
439.891 68.2432 mo
436.674 68.5659 433.585 68.8774 430.604 69.1777 cv
427.734 69.4668 424.954 69.7471 422.276 70.0181 cv
422.276 61.6509 422.274 53.2646 422.276 44.9165 cv
422.279 36.5869 422.282 28.2007 422.282 19.8335 cv
424.959 18.6924 427.734 17.5098 430.604 16.2876 cv
433.585 15.019 436.682 13.7012 439.891 12.334 cv
439.891 21.6558 439.891 30.9985 439.891 40.2778 cv
439.891 49.5786 439.891 58.9214 439.891 68.2432 cv
cp
.945098 .94902 .94902 rgb
ef
422.295 70.0161 mo
422.29 70.0171 422.282 70.0176 422.276 70.0181 cv
422.276 61.6509 422.274 53.2646 422.276 44.9165 cv
422.279 36.5869 422.282 28.2007 422.282 19.8335 cv
424.959 18.6924 427.734 17.5098 430.604 16.2876 cv
433.585 15.019 436.682 13.7012 439.891 12.334 cv
439.736 12.6724 439.582 13.0098 439.435 13.3232 cv
439.075 14.541 438.716 15.7319 438.362 16.9185 cv
435.748 25.8794 433.219 34.5474 430.771 42.938 cv
428.39 51.103 426.077 59.0332 423.836 66.7578 cv
423.316 67.8638 422.802 68.9438 422.295 70.0161 cv
cp
.733333 .745098 .752941 rgb
ef
439.531 67.6504 mo
436.441 67.9722 433.475 68.2822 430.604 68.5815 cv
427.838 68.8706 425.158 69.1514 422.565 69.4224 cv
422.565 61.2095 422.565 53.0156 422.565 44.8213 cv
422.565 36.6465 422.565 28.4526 422.565 20.2583 cv
425.158 19.1636 427.838 18.0322 430.604 16.8638 cv
433.475 15.6514 436.448 14.3965 439.531 13.0947 cv
439.531 22.1875 439.531 31.2798 439.531 40.3516 cv
439.531 49.4443 439.531 58.5371 439.531 67.6504 cv
cp
.85098 .854902 .858824 rgb
ef
450 81.9258 mo
448.268 81.9634 446.567 82.0024 444.898 82.042 cv
444.898 67.6948 444.898 53.3047 444.898 38.958 cv
444.898 26.0146 444.899 13.0171 444.904 0 cv
450 0 li
450 81.9258 li
cp
.945098 .94902 .94902 rgb
ef
450 81.9258 mo
448.268 81.9634 444.898 82.042 444.898 82.042 cv
445.479 81.0552 li
445.479 81.0552 446.793 77.4624 447.39 75.77 cv
450 68.1304 li
450 81.9258 li
cp
.733333 .745098 .752941 rgb
ef
450 80.9404 mo
445.479 81.0552 li
445.479 66.9863 445.479 52.8745 445.479 38.8057 cv
445.479 25.8906 445.482 12.938 445.483 0 cv
450 0 li
450 80.9404 li
cp
.85098 .854902 .858824 rgb
ef
418.666 9.24902 mo
418.666 86.0547 418.666 94.4702 418.666 193.019 cv
350.685 193.019 li
350.685 122.68 350.685 75.5732 350.685 9.24854 cv
418.666 9.24902 li
cp
.670588 .682353 .690196 rgb
ef
350.686 120.779 mo
417.484 120.779 li
417.484 120.123 li
350.686 120.123 li
350.686 120.779 li
cp
.572549 .584314 .596078 rgb
ef
418.666 9.24902 mo
418.666 193.019 li
350.738 193.019 li
356.598 186.724 li
413.69 124.998 li
417.352 121.337 li
417.352 119.506 li
413.69 117.344 li
414.971 12.8984 li
418.666 9.24902 li
cp
.54902 .556863 .568627 rgb
ef
353.52 12.083 mo
353.52 118.619 li
415.832 118.619 li
415.832 12.083 li
394.51 14.1382 373.739 14.1382 353.52 12.083 cv
cp
.819608 .827451 .831373 rgb
ef
356.16 118.619 mo
358.599 118.619 li
358.599 12.5542 li
357.785 12.4854 356.973 12.4141 356.16 12.3389 cv
356.16 118.619 li
cp
.862745 .866667 .870588 rgb
ef
381.362 118.619 mo
387.866 118.619 li
387.866 13.603 li
385.692 13.6279 383.524 13.6304 381.362 13.6108 cv
381.362 118.619 li
cp
ef
360.496 118.619 mo
378.652 118.619 li
378.652 13.5732 li
372.553 13.4639 366.5 13.1748 360.496 12.7075 cv
360.496 118.619 li
cp
ef
353.52 190.062 mo
353.52 122.204 li
415.832 122.204 li
415.832 190.062 li
394.51 188.006 373.739 188.006 353.52 190.062 cv
cp
.819608 .827451 .831373 rgb
ef
356.16 122.204 mo
358.599 122.204 li
358.599 189.59 li
357.785 189.659 356.973 189.73 356.16 189.806 cv
356.16 122.204 li
cp
.862745 .866667 .870588 rgb
ef
381.362 122.204 mo
387.866 122.204 li
387.866 188.541 li
385.692 188.517 383.524 188.514 381.362 188.534 cv
381.362 122.204 li
cp
ef
360.496 122.204 mo
378.652 122.204 li
378.652 188.571 li
372.553 188.681 366.5 188.97 360.496 189.438 cv
360.496 122.204 li
cp
ef
368.938 35.5068 mo
366.086 33.7432 li
366.086 40.6807 li
360.228 37.0581 li
360.228 39.3481 li
366.086 42.9707 li
366.086 107.577 li
360.228 103.954 li
360.228 106.244 li
366.086 109.866 li
366.086 116.805 li
368.938 118.567 li
368.938 35.5068 li
cp
.819608 .827451 .831373 rgb
ef
358.592 114.326 mo
361.979 114.326 li
361.979 31.2656 li
358.592 31.2656 li
358.592 114.326 li
cp
.8 .654902 .294118 rgb
ef
359.117 113.564 mo
360.479 113.564 li
360.479 32.0269 li
359.117 32.0269 li
359.117 113.564 li
cp
.85098 .729412 .423529 rgb
ef
368.938 131.445 mo
366.086 129.684 li
366.086 136.621 li
360.228 132.997 li
360.228 135.287 li
366.086 138.91 li
366.086 174.051 li
360.228 170.428 li
360.228 172.717 li
366.086 176.34 li
366.086 183.277 li
368.938 185.041 li
368.938 131.445 li
cp
.819608 .827451 .831373 rgb
ef
358.592 127.205 mo
361.979 127.205 li
361.979 180.8 li
358.592 180.8 li
358.592 127.205 li
cp
.8 .654902 .294118 rgb
ef
359.117 127.967 mo
360.479 127.967 li
360.479 180.038 li
359.117 180.038 li
359.117 127.967 li
cp
.85098 .729412 .423529 rgb
ef
380.785 36.2412 mo
388.566 36.2412 li
388.964 36.2412 389.288 36.5659 389.288 36.9634 cv
389.288 38.5674 li
389.288 38.9648 388.964 39.2896 388.566 39.2896 cv
380.785 39.2896 li
380.388 39.2896 380.063 38.9648 380.063 38.5674 cv
380.063 36.9634 li
380.063 36.5659 380.388 36.2412 380.785 36.2412 cv
cp
.945098 .94902 .94902 rgb
ef
113.765 196.094 mo
160.535 196.094 207.364 196.094 254.162 196.094 cv
300.962 196.094 347.79 196.094 394.647 196.094 cv
396.843 196.094 399.037 196.463 399.463 196.915 cv
404.933 202.717 411.088 209.24 418.045 216.623 cv
425.941 225 li
51.5752 225 li
68.4727 216.611 li
83.354 209.225 96.4995 202.701 108.168 196.91 cv
109.068 196.463 111.569 196.094 113.765 196.094 cv
cp
.294118 .329412 .356863 rgb
ef
150.448 212.457 mo
155.618 211.544 160.718 210.639 165.714 209.75 cv
166.708 209.574 167.969 209.572 168.512 209.75 cv
171.218 210.637 174.059 211.54 176.923 212.462 cv
177.495 212.646 177.142 212.956 176.145 213.143 cv
171.071 214.088 165.945 215.043 160.732 216.02 cv
159.686 216.217 158.333 216.216 157.776 216.02 cv
154.985 215.037 152.22 214.088 149.51 213.143 cv
148.959 212.95 149.384 212.645 150.448 212.457 cv
cp
.435294 .486275 .517647 rgb
ef
209.604 212.462 mo
206.464 211.545 203.376 210.643 200.385 209.75 cv
199.79 209.573 198.528 209.573 197.586 209.75 cv
192.843 210.644 188 211.541 183.128 212.462 cv
182.147 212.647 181.811 212.957 182.388 213.143 cv
185.33 214.089 188.373 215.042 191.443 216.02 cv
192.058 216.216 193.409 216.217 194.4 216.02 cv
199.333 215.043 204.218 214.088 209.021 213.147 cv
209.999 212.956 210.25 212.65 209.604 212.462 cv
cp
ef
215.81 212.462 mo
220.416 211.545 224.996 210.639 229.492 209.75 cv
230.407 209.569 231.656 209.568 232.323 209.75 cv
235.581 210.639 238.884 211.549 242.285 212.462 cv
242.987 212.65 242.821 212.956 241.898 213.147 cv
237.366 214.088 232.797 215.047 228.137 216.02 cv
227.176 216.221 225.837 216.221 225.146 216.02 cv
221.781 215.047 218.47 214.092 215.264 213.147 cv
214.626 212.959 214.88 212.646 215.81 212.462 cv
cp
ef
274.999 212.467 mo
271.34 211.548 267.739 210.639 264.228 209.756 cv
263.507 209.574 262.262 209.575 261.396 209.756 cv
257.156 210.64 252.876 211.55 248.525 212.462 cv
247.623 212.65 247.463 212.954 248.176 213.147 cv
251.665 214.092 255.194 215.049 258.847 216.025 cv
259.588 216.223 260.941 216.225 261.838 216.025 cv
266.228 215.051 270.549 214.095 274.811 213.147 cv
275.645 212.962 275.725 212.648 274.999 212.467 cv
cp
ef
281.205 212.467 mo
285.303 211.553 289.355 210.648 293.335 209.756 cv
294.123 209.578 295.385 209.578 296.134 209.756 cv
299.89 210.647 303.766 211.545 307.681 212.467 cv
308.465 212.651 308.476 212.965 307.687 213.152 cv
303.705 214.098 299.638 215.051 295.54 216.025 cv
294.726 216.219 293.36 216.219 292.584 216.025 cv
288.663 215.049 284.819 214.09 281.054 213.147 cv
280.291 212.957 280.365 212.654 281.205 212.467 cv
cp
ef
340.362 212.467 mo
336.206 211.555 332.083 210.647 328.072 209.756 cv
327.272 209.578 326.013 209.58 325.273 209.756 cv
321.518 210.649 317.704 211.551 313.887 212.467 cv
313.117 212.652 313.129 212.965 313.93 213.152 cv
317.948 214.098 322.126 215.047 326.321 216.025 cv
327.159 216.221 328.512 216.222 329.277 216.025 cv
333.087 215.048 336.875 214.092 340.564 213.152 cv
341.32 212.961 341.224 212.656 340.362 212.467 cv
cp
ef
346.568 212.467 mo
350.123 211.551 353.667 210.645 357.145 209.761 cv
357.855 209.58 359.102 209.579 359.977 209.761 cv
364.25 210.648 368.594 211.554 373.044 212.467 cv
373.961 212.654 374.144 212.961 373.441 213.152 cv
369.988 214.098 366.521 215.053 362.98 216.025 cv
362.248 216.227 360.908 216.225 359.989 216.025 cv
355.504 215.051 351.098 214.098 346.808 213.152 cv
345.952 212.965 345.852 212.652 346.568 212.467 cv
cp
ef
405.792 212.473 mo
401.055 211.55 396.409 210.648 391.883 209.761 cv
390.955 209.579 389.708 209.58 389.051 209.761 cv
385.825 210.649 382.587 211.555 379.283 212.467 cv
378.598 212.656 378.786 212.96 379.719 213.152 cv
384.289 214.098 388.918 215.055 393.69 216.03 cv
394.659 216.229 396.014 216.229 396.682 216.03 cv
399.949 215.061 403.18 214.102 406.388 213.152 cv
407.009 212.969 406.736 212.656 405.792 212.473 cv
cp
ef
85.085 212.457 mo
90.7119 211.537 96.3281 210.629 101.838 209.745 cv
102.962 209.564 104.208 209.563 104.669 209.745 cv
106.912 210.629 109.173 211.539 111.527 212.457 cv
112.012 212.646 111.497 212.951 110.356 213.143 cv
104.741 214.084 99.0747 215.041 93.2939 216.016 cv
92.106 216.215 90.7656 216.215 90.3027 216.016 cv
88.0562 215.041 85.8447 214.086 83.7549 213.143 cv
83.3354 212.953 83.9453 212.643 85.085 212.457 cv
cp
ef
144.242 212.457 mo
141.642 211.539 139.079 210.631 136.575 209.745 cv
136.07 209.566 134.809 209.566 133.743 209.745 cv
128.48 210.631 123.167 211.545 117.767 212.457 cv
116.649 212.646 116.139 212.949 116.633 213.143 cv
119.041 214.082 121.47 215.044 124.004 216.02 cv
124.517 216.217 125.871 216.219 126.995 216.02 cv
132.503 215.045 137.927 214.092 143.267 213.143 cv
144.325 212.954 144.764 212.641 144.242 212.457 cv
cp
ef
139.718 220.316 mo
145.3 219.268 150.831 218.236 156.248 217.225 cv
157.319 217.025 158.674 217.025 159.235 217.225 cv
162.083 218.24 165.046 219.266 168.018 220.316 cv
168.62 220.528 168.206 220.889 167.129 221.1 cv
161.619 222.182 156.006 223.268 150.338 224.394 cv
149.185 224.623 147.756 224.622 147.171 224.394 cv
144.291 223.266 141.429 222.176 138.647 221.1 cv
138.085 220.883 138.554 220.535 139.718 220.316 cv
cp
ef
202.951 220.316 mo
199.663 219.271 196.413 218.243 193.282 217.23 cv
192.656 217.027 191.308 217.025 190.296 217.225 cv
185.166 218.24 179.923 219.268 174.651 220.316 cv
173.577 220.529 173.201 220.888 173.805 221.1 cv
176.877 222.181 180.07 223.266 183.273 224.394 cv
183.923 224.622 185.353 224.623 186.44 224.394 cv
191.786 223.268 197.078 222.178 202.286 221.1 cv
203.33 220.885 203.635 220.533 202.951 220.316 cv
cp
ef
209.583 220.32 mo
214.563 219.271 219.502 218.24 224.343 217.23 cv
225.332 217.024 226.659 217.023 227.365 217.23 cv
230.8 218.238 234.295 219.271 237.883 220.32 cv
238.628 220.539 238.426 220.885 237.443 221.1 cv
232.544 222.178 227.619 223.275 222.578 224.398 cv
221.536 224.631 220.103 224.629 219.374 224.398 cv
215.825 223.273 212.344 222.181 208.962 221.1 cv
208.297 220.888 208.579 220.533 209.583 220.32 cv
cp
ef
272.853 220.32 mo
268.977 219.267 265.137 218.238 261.413 217.23 cv
260.648 217.023 259.32 217.024 258.392 217.23 cv
253.839 218.24 249.234 219.272 244.553 220.32 cv
243.576 220.539 243.406 220.883 244.155 221.1 cv
247.862 222.176 251.605 223.279 255.476 224.398 cv
256.271 224.629 257.703 224.63 258.68 224.398 cv
263.397 223.279 268.057 222.182 272.636 221.1 cv
273.531 220.889 273.637 220.534 272.853 220.32 cv
cp
ef
279.486 220.32 mo
283.868 219.272 288.222 218.244 292.475 217.23 cv
293.321 217.029 294.661 217.027 295.462 217.23 cv
299.463 218.243 303.608 219.267 307.786 220.32 cv
308.631 220.534 308.628 220.889 307.794 221.1 cv
303.523 222.182 299.167 223.274 294.781 224.398 cv
293.897 224.625 292.453 224.625 291.614 224.398 cv
287.437 223.273 283.328 222.176 279.313 221.1 cv
278.502 220.883 278.572 220.539 279.486 220.32 cv
cp
ef
342.72 220.32 mo
338.23 219.275 333.809 218.24 329.51 217.23 cv
328.657 217.029 327.304 217.031 326.523 217.23 cv
322.555 218.242 318.489 219.268 314.42 220.32 cv
313.593 220.535 313.622 220.888 314.47 221.1 cv
318.781 222.181 323.217 223.273 327.717 224.398 cv
328.62 224.625 330.064 224.625 330.884 224.398 cv
334.947 223.274 338.979 222.178 342.95 221.1 cv
343.748 220.884 343.652 220.538 342.72 220.32 cv
cp
ef
349.354 220.32 mo
353.119 219.272 356.878 218.242 360.571 217.23 cv
361.315 217.026 362.658 217.025 363.594 217.23 cv
368.191 218.24 372.863 219.275 377.653 220.32 cv
378.648 220.538 378.836 220.887 378.107 221.1 cv
374.438 222.175 370.777 223.279 367.022 224.398 cv
366.246 224.63 364.814 224.629 363.818 224.398 cv
358.985 223.279 354.249 222.181 349.626 221.1 cv
348.718 220.888 348.586 220.535 349.354 220.32 cv
cp
ef
412.623 220.32 mo
407.542 219.271 402.521 218.244 397.641 217.235 cv
396.64 217.029 395.313 217.029 394.619 217.235 cv
391.223 218.244 387.802 219.277 384.322 220.32 cv
383.595 220.539 383.83 220.886 384.82 221.1 cv
389.77 222.174 394.766 223.279 399.921 224.398 cv
400.982 224.629 402.415 224.63 403.125 224.398 cv
406.559 223.279 409.964 222.182 413.3 221.105 cv
413.954 220.895 413.653 220.534 412.623 220.32 cv
cp
ef
69.8149 220.316 mo
75.9917 219.264 82.1187 218.234 88.1162 217.225 cv
89.3403 217.02 90.6694 217.018 91.1382 217.225 cv
93.418 218.232 95.7275 219.267 98.1147 220.316 cv
98.6104 220.533 98.001 220.881 96.7798 221.095 cv
90.6357 222.174 84.4526 223.271 78.1343 224.394 cv
76.8198 224.627 75.4009 224.627 74.9302 224.394 cv
72.6733 223.271 70.4419 222.181 68.2983 221.095 cv
67.8784 220.883 68.5557 220.531 69.8149 220.316 cv
cp
ef
133.084 220.316 mo
130.414 219.262 127.755 218.233 125.187 217.225 cv
124.658 217.018 123.33 217.02 122.165 217.225 cv
116.456 218.234 110.667 219.268 104.784 220.316 cv
103.558 220.535 102.991 220.883 103.491 221.1 cv
105.963 222.176 108.455 223.271 111.032 224.394 cv
111.569 224.627 112.988 224.627 114.236 224.394 cv
120.233 223.271 126.152 222.182 131.972 221.1 cv
133.109 220.889 133.624 220.529 133.084 220.316 cv
cp
ef
159.908 205.553 mo
164.668 204.748 169.413 203.943 174.061 203.154 cv
174.972 202.998 176.178 202.998 176.694 203.154 cv
179.306 203.943 182.029 204.74 184.78 205.553 cv
185.332 205.717 185.018 205.992 184.092 206.156 cv
179.394 206.988 174.619 207.83 169.828 208.69 cv
168.865 208.863 167.589 208.861 167.055 208.69 cv
164.36 207.828 161.665 206.986 159.08 206.156 cv
158.547 205.984 158.928 205.719 159.908 205.553 cv
cp
ef
215.483 205.553 mo
212.489 204.748 209.545 203.948 206.679 203.154 cv
206.117 202.998 204.912 202.998 204.046 203.154 cv
199.624 203.943 195.129 204.74 190.61 205.553 cv
189.698 205.717 189.4 205.992 189.955 206.156 cv
192.774 206.988 195.683 207.833 198.625 208.69 cv
199.209 208.861 200.481 208.862 201.397 208.69 cv
205.971 207.834 210.501 206.985 214.968 206.156 cv
215.872 205.988 216.103 205.72 215.483 205.553 cv
cp
ef
221.313 205.553 mo
225.598 204.745 229.857 203.945 234.061 203.158 cv
234.906 203 236.095 203 236.724 203.158 cv
239.827 203.945 242.951 204.752 246.184 205.559 cv
246.844 205.723 246.704 205.991 245.843 206.161 cv
241.619 206.994 237.367 207.838 233.03 208.695 cv
232.14 208.872 230.879 208.871 230.225 208.695 cv
227.025 207.838 223.88 206.992 220.83 206.161 cv
220.219 205.994 220.446 205.717 221.313 205.553 cv
cp
ef
276.917 205.559 mo
273.471 204.745 270.068 203.945 266.739 203.158 cv
266.065 203 264.877 203 264.076 203.158 cv
260.1 203.945 256.112 204.753 252.045 205.559 cv
251.209 205.725 251.064 205.992 251.737 206.161 cv
255.044 206.989 258.382 207.838 261.827 208.695 cv
262.531 208.871 263.792 208.872 264.632 208.695 cv
268.723 207.838 272.768 206.994 276.75 206.161 cv
277.532 205.998 277.608 205.722 276.917 205.559 cv
cp
ef
282.747 205.559 mo
286.576 204.754 290.377 203.954 294.123 203.158 cv
294.854 203.004 296.06 203.002 296.756 203.158 cv
300.301 203.953 303.94 204.75 307.62 205.559 cv
308.359 205.721 308.368 206 307.624 206.166 cv
303.889 206.998 300.068 207.839 296.234 208.695 cv
295.467 208.867 294.194 208.867 293.462 208.695 cv
289.78 207.838 286.157 206.989 282.613 206.161 cv
281.893 205.992 281.951 205.726 282.747 205.559 cv
cp
ef
338.321 205.563 mo
334.395 204.758 330.566 203.957 326.801 203.164 cv
326.053 203.006 324.864 203.008 324.168 203.164 cv
320.628 203.958 317.046 204.754 313.448 205.563 cv
312.731 205.725 312.735 206 313.487 206.166 cv
317.254 207.002 321.136 207.838 325.095 208.701 cv
325.877 208.871 327.151 208.873 327.867 208.701 cv
331.457 207.84 334.986 206.996 338.5 206.166 cv
339.21 205.998 339.124 205.729 338.321 205.563 cv
cp
ef
344.15 205.563 mo
347.511 204.751 350.854 203.951 354.152 203.164 cv
354.817 203.006 356.006 203.005 356.816 203.164 cv
360.822 203.949 364.873 204.759 369.023 205.563 cv
369.881 205.73 370.038 205.998 369.376 206.166 cv
366.101 206.996 362.82 207.849 359.469 208.701 cv
358.778 208.877 357.52 208.875 356.664 208.701 cv
352.48 207.848 348.375 206.999 344.363 206.166 cv
343.569 206.002 343.474 205.728 344.15 205.563 cv
cp
ef
399.788 205.568 mo
395.376 204.758 391.064 203.955 386.832 203.164 cv
385.978 203.004 384.786 203.005 384.169 203.164 cv
381.093 203.955 378.021 204.76 374.885 205.563 cv
374.231 205.731 374.404 205.998 375.271 206.166 cv
379.529 206.995 383.837 207.848 388.267 208.701 cv
389.172 208.875 390.432 208.877 391.071 208.701 cv
394.177 207.849 397.265 207.008 400.314 206.172 cv
400.917 206.006 400.662 205.729 399.788 205.568 cv
cp
ef
98.5044 205.549 mo
103.692 204.74 108.869 203.939 113.967 203.154 cv
115.001 202.994 116.178 202.992 116.631 203.154 cv
118.825 203.938 121.044 204.744 123.345 205.549 cv
123.822 205.715 123.359 205.982 122.311 206.15 cv
117.13 206.98 111.911 207.832 106.592 208.686 cv
105.5 208.861 104.24 208.861 103.787 208.686 cv
101.571 207.827 99.4019 206.983 97.3291 206.15 cv
96.9194 205.986 97.458 205.711 98.5044 205.549 cv
cp
ef
154.079 205.549 mo
151.561 204.739 149.074 203.939 146.647 203.154 cv
146.155 202.994 144.965 202.995 143.983 203.154 cv
139.104 203.94 134.191 204.744 129.207 205.549 cv
128.173 205.715 127.727 205.982 128.205 206.15 cv
130.56 206.98 132.935 207.83 135.389 208.686 cv
135.9 208.863 137.152 208.867 138.193 208.69 cv
143.268 207.833 148.287 206.987 153.217 206.156 cv
154.198 205.99 154.585 205.711 154.079 205.549 cv
cp
ef
168.285 199.43 mo
172.704 198.716 177.103 198.008 181.43 197.305 cv
182.282 197.166 183.414 197.166 183.917 197.305 cv
186.461 198.008 189.094 198.713 191.735 199.434 cv
192.267 199.58 191.982 199.824 191.125 199.97 cv
186.75 200.708 182.297 201.45 177.825 202.219 cv
176.947 202.369 175.764 202.371 175.247 202.219 cv
172.654 201.452 170.059 200.703 167.548 199.97 cv
167.039 199.82 167.36 199.578 168.285 199.43 cv
cp
ef
220.684 199.434 mo
217.826 198.716 215 198.008 212.255 197.305 cv
211.712 197.166 210.581 197.166 209.769 197.305 cv
205.642 198.008 201.443 198.713 197.232 199.434 cv
196.375 199.581 196.118 199.824 196.651 199.97 cv
199.362 200.707 202.151 201.452 204.963 202.219 cv
205.524 202.371 206.714 202.373 207.572 202.219 cv
211.832 201.453 216.058 200.705 220.228 199.97 cv
221.067 199.821 221.278 199.584 220.684 199.434 cv
cp
ef
226.181 199.434 mo
230.185 198.713 234.176 198.004 238.107 197.305 cv
238.902 197.163 240.02 197.162 240.622 197.305 cv
243.578 198.004 246.568 198.716 249.632 199.434 cv
250.269 199.584 250.126 199.826 249.329 199.975 cv
245.37 200.709 241.389 201.459 237.35 202.219 cv
236.504 202.378 235.344 202.377 234.71 202.219 cv
231.677 201.458 228.667 200.711 225.753 199.975 cv
225.17 199.828 225.367 199.581 226.181 199.434 cv
cp
ef
278.61 199.434 mo
275.349 198.713 272.117 198.008 268.961 197.305 cv
268.319 197.162 267.201 197.163 266.445 197.305 cv
262.715 198.004 258.963 198.717 255.159 199.434 cv
254.363 199.584 254.248 199.826 254.885 199.975 cv
258.028 200.709 261.196 201.461 264.455 202.224 cv
265.127 202.381 266.302 202.382 267.096 202.224 cv
270.924 201.463 274.721 200.713 278.462 199.975 cv
279.193 199.83 279.269 199.58 278.61 199.434 cv
cp
ef
284.107 199.434 mo
287.705 198.717 291.287 198.013 294.813 197.305 cv
295.504 197.166 296.639 197.165 297.299 197.305 cv
300.648 198.012 304.092 198.717 307.559 199.434 cv
308.261 199.58 308.254 199.83 307.564 199.975 cv
304.035 200.713 300.443 201.463 296.843 202.224 cv
296.117 202.377 294.928 202.377 294.233 202.224 cv
290.765 201.457 287.342 200.709 283.988 199.975 cv
283.309 199.826 283.355 199.584 284.107 199.434 cv
cp
ef
336.507 199.439 mo
332.825 198.721 329.188 198.012 325.638 197.305 cv
324.938 197.165 323.803 197.166 323.152 197.305 cv
319.827 198.013 316.438 198.718 313.056 199.434 cv
312.368 199.58 312.391 199.83 313.091 199.975 cv
316.647 200.713 320.292 201.463 323.98 202.224 cv
324.749 202.383 325.932 202.379 326.62 202.224 cv
329.996 201.461 333.341 200.709 336.668 199.975 cv
337.338 199.826 337.271 199.589 336.507 199.439 cv
cp
ef
342.003 199.439 mo
345.182 198.719 348.358 198.01 351.49 197.305 cv
352.123 197.162 353.242 197.162 354.005 197.305 cv
357.764 198.008 361.567 198.721 365.455 199.439 cv
366.263 199.589 366.403 199.829 365.769 199.98 cv
362.659 200.717 359.54 201.468 356.366 202.229 cv
355.709 202.387 354.533 202.387 353.726 202.229 cv
349.813 201.467 345.953 200.721 342.192 199.98 cv
341.445 199.832 341.358 199.586 342.003 199.439 cv
cp
ef
394.434 199.439 mo
390.34 198.721 386.294 198.013 382.343 197.31 cv
381.533 197.166 380.428 197.166 379.827 197.31 cv
376.904 198.012 373.962 198.723 370.981 199.439 cv
370.358 199.59 370.513 199.829 371.325 199.98 cv
375.305 200.717 379.341 201.471 383.473 202.229 cv
384.326 202.386 385.5 202.387 386.113 202.229 cv
389.067 201.472 391.997 200.715 394.902 199.98 cv
395.487 199.832 395.284 199.589 394.434 199.439 cv
cp
ef
110.358 199.43 mo
115.183 198.705 119.99 198.005 124.724 197.305 cv
125.681 197.163 126.8 197.162 127.239 197.305 cv
129.394 198.004 131.57 198.711 133.81 199.43 cv
134.275 199.578 133.856 199.822 132.889 199.97 cv
128.089 200.7 123.251 201.452 118.333 202.213 cv
117.313 202.371 116.138 202.37 115.693 202.213 cv
113.525 201.451 111.367 200.709 109.312 199.97 cv
108.913 199.826 109.399 199.572 110.358 199.43 cv
cp
ef
162.788 199.43 mo
160.354 198.712 157.933 198.004 155.578 197.305 cv
155.097 197.162 153.979 197.163 153.063 197.305 cv
148.529 198.004 143.963 198.712 139.336 199.43 cv
138.369 199.579 137.977 199.82 138.445 199.97 cv
140.746 200.699 143.061 201.453 145.439 202.213 cv
145.938 202.373 147.098 202.372 148.08 202.213 cv
152.773 201.453 157.436 200.707 162.021 199.97 cv
162.921 199.824 163.28 199.574 162.788 199.43 cv
cp
ef
168.271 26.7832 mo
170.181 26.9565 li
170.181 0 li
168.755 0 li
168.271 26.7832 li
cp
.505882 .301961 .168627 rgb
ef
169.226 46.7397 mo
171.749 46.7397 173.796 48.6025 173.796 50.9004 cv
173.796 53.1982 171.749 55.0615 169.226 55.0615 cv
166.702 55.0615 164.655 53.1982 164.655 50.9004 cv
164.655 48.6025 166.702 46.7397 169.226 46.7397 cv
cp
.960784 .678431 .0627451 rgb
ef
187.659 51.4619 mo
150.792 51.4619 li
150.49 51.4619 150.239 51.231 150.214 50.9297 cv
149.438 41.6777 153.39 42.0459 159.015 37.0698 cv
163.471 33.1284 159.319 24.0391 169.225 24.0391 cv
179.131 24.0391 174.98 33.1284 179.436 37.0698 cv
185.062 42.0459 189.013 41.6777 188.237 50.9297 cv
188.212 51.231 187.961 51.4619 187.659 51.4619 cv
cp
.741176 .560784 .211765 rgb
ef
165.248 26.1021 mo
164.81 26.3853 164.42 26.7539 164.102 27.2305 cv
163.255 28.4956 162.954 30.3667 162.648 31.8403 cv
162.175 34.1172 161.594 36.3389 159.784 37.9404 cv
154.484 42.6279 150.973 42.2915 151.301 49.7456 cv
151.314 50.0562 151.57 50.3013 151.88 50.3013 cv
153.75 50.3013 li
155.632 50.3013 li
171.488 50.3013 li
171.802 50.3013 172.059 50.0444 172.059 49.731 cv
172.059 49.731 li
172.059 49.4175 171.802 49.1611 171.488 49.1611 cv
156.629 49.1611 li
156.336 49.1611 156.092 48.9473 156.054 48.6563 cv
155.219 42.3135 158.646 42.3867 163.046 37.9404 cv
164.63 36.3389 164.899 34.1172 165.051 31.8403 cv
165.149 30.3667 165.187 28.4956 165.854 27.2305 cv
165.913 27.1196 165.976 27.0146 166.043 26.915 cv
166.2 26.6841 166.173 26.3818 165.978 26.1826 cv
165.783 25.9834 165.482 25.9502 165.248 26.1021 cv
cp
.866667 .717647 .392157 rgb
ef
173.841 49.1611 mo
178.388 49.1611 li
178.701 49.1611 178.957 49.4175 178.957 49.731 cv
178.957 49.731 li
178.957 50.0444 178.701 50.3013 178.388 50.3013 cv
173.841 50.3013 li
173.528 50.3013 173.271 50.0449 173.271 49.731 cv
173.271 49.731 li
173.271 49.417 173.527 49.1611 173.841 49.1611 cv
cp
.741176 .560784 .211765 rgb
ef
280.896 26.7832 mo
282.807 26.9565 li
282.807 0 li
281.381 0 li
280.896 26.7832 li
cp
.505882 .301961 .168627 rgb
ef
281.852 46.7397 mo
284.375 46.7397 286.422 48.6025 286.422 50.9004 cv
286.422 53.1982 284.375 55.0615 281.852 55.0615 cv
279.328 55.0615 277.281 53.1982 277.281 50.9004 cv
277.281 48.6025 279.328 46.7397 281.852 46.7397 cv
cp
.960784 .678431 .0627451 rgb
ef
300.284 51.4619 mo
263.419 51.4619 li
263.115 51.4619 262.864 51.231 262.84 50.9297 cv
262.064 41.6777 266.016 42.0459 271.641 37.0698 cv
276.097 33.1284 271.945 24.0391 281.852 24.0391 cv
291.757 24.0391 287.606 33.1284 292.062 37.0698 cv
297.688 42.0459 301.639 41.6777 300.863 50.9297 cv
300.838 51.231 300.587 51.4619 300.284 51.4619 cv
cp
.741176 .560784 .211765 rgb
ef
277.873 26.1021 mo
277.436 26.3853 277.046 26.7539 276.728 27.2305 cv
275.881 28.4956 275.58 30.3667 275.273 31.8403 cv
274.802 34.1172 274.22 36.3389 272.41 37.9404 cv
267.109 42.6279 263.599 42.2915 263.927 49.7456 cv
263.94 50.0562 264.195 50.3013 264.507 50.3013 cv
266.376 50.3013 li
268.258 50.3013 li
284.114 50.3013 li
284.428 50.3013 284.685 50.0444 284.685 49.731 cv
284.685 49.731 li
284.685 49.4175 284.428 49.1611 284.114 49.1611 cv
269.255 49.1611 li
268.962 49.1611 268.718 48.9473 268.68 48.6563 cv
267.845 42.3135 271.271 42.3867 275.672 37.9404 cv
277.256 36.3389 277.525 34.1172 277.677 31.8403 cv
277.774 30.3667 277.813 28.4956 278.48 27.2305 cv
278.539 27.1196 278.602 27.0146 278.67 26.915 cv
278.826 26.6841 278.799 26.3818 278.604 26.1826 cv
278.408 25.9834 278.107 25.9502 277.873 26.1021 cv
cp
.866667 .717647 .392157 rgb
ef
286.467 49.1611 mo
291.014 49.1611 li
291.327 49.1611 291.583 49.4175 291.583 49.731 cv
291.583 49.731 li
291.583 50.0444 291.326 50.3013 291.014 50.3013 cv
286.467 50.3013 li
286.153 50.3013 285.896 50.0449 285.896 49.731 cv
285.896 49.731 li
285.896 49.417 286.153 49.1611 286.467 49.1611 cv
cp
.741176 .560784 .211765 rgb
ef
264.675 206.551 mo
269.596 206.551 li
269.596 131.502 li
264.675 131.502 li
264.675 206.551 li
cp
.639216 .6 .52549 rgb
ef
309.785 167.48 mo
314.973 207.439 li
312.309 207.439 li
303.357 167.638 li
309.785 167.48 li
cp
.780392 .741176 .603922 rgb
ef
316.539 178.994 mo
322.337 218.953 li
319.674 218.953 li
310.114 179.15 li
316.539 178.994 li
cp
.882353 .792157 .592157 rgb
ef
273.267 166.419 mo
269.746 206.378 li
272.41 206.378 li
279.7 166.576 li
273.267 166.419 li
cp
.780392 .741176 .603922 rgb
ef
276.11 178.994 mo
270.313 218.953 li
272.977 218.953 li
282.535 179.15 li
276.11 178.994 li
cp
.882353 .792157 .592157 rgb
ef
269.954 172.389 mo
269.954 173.887 269.723 177.289 270.233 178.234 cv
271.408 180.412 275.745 181.193 278.071 181.225 cv
282.386 181.283 317.032 181.383 319.058 181.143 cv
320.303 180.995 322.492 180.519 322.622 178.973 cv
322.622 174.107 li
322.281 176.119 319.225 176.337 317.603 176.359 cv
278.071 176.359 li
275.47 176.324 270.469 175.529 269.954 172.389 cv
cp
.741176 .560784 .211765 rgb
ef
320.031 175.563 mo
328.605 146.557 li
326.882 146.713 li
316.853 174.137 li
320.031 175.563 li
cp
.882353 .792157 .592157 rgb
ef
315.6 169.748 mo
324.374 139.975 li
322.65 140.132 li
312.622 167.555 li
315.6 169.748 li
cp
.780392 .741176 .603922 rgb
ef
318.45 139.467 mo
320.895 125.625 li
321.313 123.257 322.825 118.914 324.937 118.688 cv
332.229 119.746 li
335.329 120.195 336.027 124.397 335.271 127.821 cv
330.175 150.899 li
329.285 154.931 327.731 157.157 325.007 154.508 cv
319.473 149.129 li
317.607 147.316 317.939 142.275 318.45 139.467 cv
cp
.807843 .647059 .254902 rgb
ef
304.461 163.045 mo
278.083 163.045 li
275.718 163.045 271.531 163.807 271.146 165.824 cv
269.996 171.848 li
269.428 174.824 274.615 176.359 278.071 176.359 cv
317.603 176.359 li
321.672 176.359 324.437 174.589 321.211 171.848 cv
314.123 165.824 li
311.915 163.947 307.27 163.045 304.461 163.045 cv
cp
ef
272.506 175.211 mo
274.166 175.973 276.337 176.359 278.071 176.359 cv
317.603 176.359 li
321.672 176.359 324.437 174.589 321.211 171.848 cv
314.123 165.824 li
312.782 164.685 310.543 163.903 308.362 163.467 cv
309.32 163.851 310.179 164.317 310.826 164.867 cv
317.914 170.892 li
321.139 173.632 318.374 175.355 314.306 175.402 cv
276.856 175.838 li
276.151 175.846 273.292 175.338 272.506 175.211 cv
cp
.882353 .792157 .592157 rgb
ef
293.974 172.07 mo
302.289 172.07 309.072 170.84 309.072 169.331 cv
309.072 167.822 302.289 166.592 293.974 166.592 cv
285.658 166.592 278.876 167.822 278.876 169.331 cv
278.876 170.84 285.658 172.07 293.974 172.07 cv
cp
.741176 .560784 .211765 rgb
ef
326.242 125.715 mo
324.598 125.715 322.566 130.24 321.704 135.822 cv
320.843 141.403 321.477 145.93 323.121 145.93 cv
324.765 145.93 326.797 141.403 327.659 135.822 cv
328.521 130.24 327.887 125.715 326.242 125.715 cv
cp
.882353 .792157 .592157 rgb
ef
272.672 221.309 mo
278.208 221.309 li
278.208 138.41 li
272.672 138.41 li
272.672 221.309 li
cp
.639216 .6 .52549 rgb
ef
76.5889 221.309 mo
82.125 221.309 li
82.125 138.41 li
76.5889 138.41 li
76.5889 221.309 li
cp
ef
95.0425 206.551 mo
99.9634 206.551 li
99.9634 131.502 li
95.0425 131.502 li
95.0425 206.551 li
cp
ef
13.0396 136.264 mo
13.0396 141.301 li
289.184 141.301 li
289.184 136.264 li
13.0396 136.264 li
cp
.768627 .709804 .6 rgb
ef
13.0396 136.264 mo
289.184 136.264 li
271.078 124.639 li
81.6216 124.639 li
13.0396 136.264 li
cp
.952941 .858824 .678431 rgb
ef
434.708 96.3115 mo
438.773 96.3115 li
438.92 96.3115 439.04 96.4312 439.04 96.5781 cv
439.04 97.6484 li
439.04 97.7954 438.92 97.915 438.773 97.915 cv
438.528 97.915 li
439.006 103.788 li
439.047 104.284 439.285 104.694 439.696 104.976 cv
441.088 105.926 441.938 107.527 442.007 109.328 cv
442.41 119.84 li
442.443 120.717 441.692 121.435 440.814 121.435 cv
432.465 121.435 li
431.587 121.435 430.819 120.717 430.87 119.84 cv
431.475 109.328 li
431.578 107.528 432.394 105.926 433.785 104.976 cv
434.196 104.695 434.435 104.284 434.476 103.788 cv
434.952 97.915 li
434.708 97.915 li
434.561 97.915 434.44 97.7954 434.44 97.6484 cv
434.44 96.5781 li
434.44 96.4312 434.561 96.3115 434.708 96.3115 cv
cp
.686275 .72549 .513726 rgb
ef
435.402 97.8955 mo
435.219 103.848 li
435.16 104.568 434.803 105.183 434.207 105.591 cv
432.971 106.436 432.221 107.828 432.221 109.328 cv
431.616 119.841 li
431.616 120.307 431.998 120.688 432.464 120.688 cv
433.517 120.688 li
433.051 120.688 432.669 120.307 432.669 119.841 cv
433.273 109.328 li
433.273 107.828 434.023 106.436 435.26 105.591 cv
435.856 105.183 436.214 104.568 436.271 103.848 cv
436.455 97.8955 li
435.402 97.8955 li
cp
.811765 .843137 .607843 rgb
ef
434.971 96.5742 mo
436.043 96.5742 li
436.15 96.5742 436.238 96.6621 436.238 96.77 cv
436.238 97.3081 li
436.238 97.4155 436.15 97.5034 436.043 97.5034 cv
434.971 97.5034 li
434.863 97.5034 434.775 97.4155 434.775 97.3081 cv
434.775 96.77 li
434.775 96.6621 434.863 96.5742 434.971 96.5742 cv
cp
ef
436.622 96.5742 mo
436.762 96.5742 li
436.869 96.5742 436.957 96.6626 436.957 96.77 cv
436.957 97.3081 li
436.957 97.4155 436.869 97.5034 436.762 97.5034 cv
436.622 97.5034 li
436.515 97.5034 436.427 97.4155 436.427 97.3081 cv
436.427 96.77 li
436.427 96.6621 436.515 96.5742 436.622 96.5742 cv
cp
ef
173.633 120.583 mo
191.617 120.471 li
192.152 120.468 192.59 120.9 192.594 121.434 cv
192.625 126.385 li
192.627 126.919 192.195 127.357 191.661 127.359 cv
173.675 127.472 li
173.141 127.477 172.703 127.044 172.7 126.509 cv
172.668 121.559 li
172.665 121.023 173.098 120.586 173.633 120.583 cv
cp
.952941 .647059 .560784 rgb
ef
173.633 120.583 mo
189.249 120.485 li
191.617 120.471 li
192.152 120.468 192.59 120.9 192.593 121.434 cv
192.608 123.779 li
192.624 126.385 li
192.627 126.919 192.195 127.357 191.66 127.361 cv
189.292 127.375 li
189.279 125.322 li
189.278 125.118 189.197 124.944 189.044 124.812 cv
188.89 124.678 188.706 124.625 188.505 124.652 cv
186.637 124.912 184.675 125.008 182.651 124.916 cv
179.085 124.753 175.704 124.026 172.677 122.867 cv
172.668 121.559 li
172.665 121.023 173.099 120.586 173.633 120.583 cv
cp
.870588 .596078 .490196 rgb
ef
205.383 110.17 mo
203.393 117.82 193.985 123.657 182.645 123.727 cv
171.305 123.797 161.825 118.077 159.739 110.453 cv
159.658 110.154 159.714 109.86 159.902 109.611 cv
160.091 109.363 160.357 109.23 160.669 109.228 cv
204.438 108.956 li
204.75 108.953 205.019 109.085 205.21 109.33 cv
205.401 109.576 205.461 109.869 205.383 110.17 cv
cp
.988235 .784314 .72549 rgb
ef
205.383 110.17 mo
203.393 117.82 193.985 123.657 182.645 123.727 cv
182.073 123.73 181.508 123.718 180.946 123.692 cv
191.517 123.083 200.095 117.455 201.985 110.191 cv
202.064 109.89 202.003 109.597 201.812 109.352 cv
201.621 109.106 201.352 108.975 201.04 108.977 cv
204.438 108.956 li
204.75 108.953 205.019 109.085 205.21 109.33 cv
205.401 109.576 205.461 109.869 205.383 110.17 cv
cp
.952941 .647059 .560784 rgb
ef
161.799 110.17 mo
165.051 110.17 li
200.074 110.17 li
200.237 110.17 200.371 110.304 200.371 110.468 cv
200.371 110.468 li
200.371 110.631 200.237 110.766 200.074 110.766 cv
166.217 110.766 li
165.981 110.766 165.779 110.876 165.649 111.072 cv
165.52 111.269 165.499 111.497 165.593 111.715 cv
166.957 114.882 169.642 117.385 172.588 119.111 cv
176.262 121.266 180.562 122.399 184.828 122.666 cv
184.096 122.723 183.364 122.753 182.639 122.757 cv
177.677 122.787 172.516 121.664 168.212 119.14 cv
164.8 117.139 161.743 114.104 160.674 110.198 cv
161.689 110.191 li
161.724 110.178 161.76 110.17 161.799 110.17 cv
cp
.945098 .921569 .917647 rgb
ef
98.8379 130.166 mo
105.123 130.166 111.412 130.166 117.697 130.166 cv
123.982 130.166 130.272 130.166 136.561 130.166 cv
138.499 130.166 139.978 131.747 139.844 133.654 cv
139.599 137.145 139.36 140.551 139.125 143.889 cv
138.897 147.153 138.672 150.35 138.452 153.48 cv
138.336 155.134 136.784 156.471 135.006 156.471 cv
129.235 156.471 123.464 156.471 117.698 156.471 cv
111.932 156.471 106.161 156.471 100.395 156.471 cv
98.6162 156.471 97.0762 155.135 96.96 153.48 cv
96.7407 150.353 96.5156 147.153 96.2871 143.889 cv
96.0527 140.551 95.8135 137.143 95.5688 133.654 cv
95.4351 131.747 96.8994 130.166 98.8379 130.166 cv
cp
.807843 .647059 .254902 rgb
ef
102.304 214.848 mo
106.342 214.848 li
111.093 172.853 li
104.633 172.853 li
102.304 214.848 li
cp
.780392 .741176 .603922 rgb
ef
135.342 215.309 mo
131.304 215.309 li
126.553 172.853 li
133.013 172.853 li
135.342 215.309 li
cp
ef
97.228 221.77 mo
101.266 221.77 li
106.017 184.159 li
99.5566 184.159 li
97.228 221.77 li
cp
.882353 .792157 .592157 rgb
ef
139.244 221.77 mo
135.206 221.77 li
130.455 184.159 li
136.916 184.159 li
139.244 221.77 li
cp
ef
139.647 179.613 mo
140.21 179.537 140.561 179.496 140.78 178.659 cv
140.78 178.659 140.792 181.56 140.78 183.371 cv
140.775 184.112 140.331 184.574 139.501 184.574 cv
97.5635 184.574 li
96.7139 184.574 96.2451 184.238 96.2446 183.301 cv
96.2432 181.516 96.2446 178.729 96.2446 178.729 cv
96.3784 179.26 96.4995 179.498 97.3525 179.613 cv
139.647 179.613 li
cp
.741176 .560784 .211765 rgb
ef
102.373 169.623 mo
107.749 169.623 113.131 169.623 118.507 169.623 cv
123.883 169.623 129.266 169.623 134.645 169.623 cv
135.409 169.623 136.287 170.084 136.603 170.664 cv
137.162 171.691 137.758 172.785 138.392 173.949 cv
139.07 175.193 139.795 176.525 140.574 177.955 cv
141.062 178.852 140.656 179.613 139.654 179.613 cv
132.604 179.613 125.55 179.613 118.505 179.613 cv
111.459 179.613 104.405 179.613 97.3594 179.613 cv
96.3589 179.613 95.9663 178.852 96.4541 177.955 cv
97.2324 176.525 97.9585 175.193 98.6362 173.949 cv
99.27 172.785 99.8667 171.691 100.425 170.664 cv
100.742 170.084 101.608 169.623 102.373 169.623 cv
cp
.807843 .647059 .254902 rgb
ef
118.513 177.607 mo
126.425 177.607 132.877 176.438 132.877 175.002 cv
132.877 173.565 126.425 172.395 118.513 172.395 cv
110.601 172.395 104.148 173.565 104.148 175.002 cv
104.148 176.438 110.601 177.607 118.513 177.607 cv
cp
.741176 .560784 .211765 rgb
ef
103.862 139.626 mo
106.169 139.626 li
106.862 184.159 li
103.17 184.159 li
103.862 139.626 li
cp
.882353 .792157 .592157 rgb
ef
129.474 139.626 mo
131.781 139.626 li
132.474 184.159 li
128.782 184.159 li
129.474 139.626 li
cp
ef
154.446 130.166 mo
160.731 130.166 167.021 130.166 173.306 130.166 cv
179.591 130.166 185.88 130.166 192.169 130.166 cv
194.107 130.166 195.586 131.747 195.452 133.654 cv
195.208 137.145 194.968 140.551 194.734 143.889 cv
194.505 147.153 194.28 150.35 194.061 153.48 cv
193.945 155.134 192.392 156.471 190.614 156.471 cv
184.844 156.471 179.073 156.471 173.307 156.471 cv
167.54 156.471 161.77 156.471 156.003 156.471 cv
154.225 156.471 152.685 155.135 152.568 153.48 cv
152.349 150.353 152.124 147.153 151.896 143.889 cv
151.661 140.551 151.422 137.143 151.177 133.654 cv
151.043 131.747 152.508 130.166 154.446 130.166 cv
cp
.807843 .647059 .254902 rgb
ef
157.913 214.848 mo
161.951 214.848 li
166.702 172.853 li
160.241 172.853 li
157.913 214.848 li
cp
.780392 .741176 .603922 rgb
ef
190.95 215.309 mo
186.912 215.309 li
182.161 172.853 li
188.622 172.853 li
190.95 215.309 li
cp
ef
152.836 221.77 mo
156.875 221.77 li
161.625 184.159 li
155.165 184.159 li
152.836 221.77 li
cp
.882353 .792157 .592157 rgb
ef
194.853 221.77 mo
190.814 221.77 li
186.063 184.159 li
192.524 184.159 li
194.853 221.77 li
cp
ef
195.261 179.613 mo
195.823 179.537 196.168 179.496 196.387 178.659 cv
196.387 178.659 196.4 181.56 196.388 183.371 cv
196.383 184.112 195.944 184.574 195.114 184.574 cv
153.177 184.574 li
152.327 184.574 151.853 184.238 151.853 183.301 cv
151.851 181.516 151.853 178.734 151.853 178.734 cv
151.987 179.265 152.112 179.498 152.966 179.613 cv
195.261 179.613 li
cp
.741176 .560784 .211765 rgb
ef
157.981 169.623 mo
163.356 169.623 168.739 169.623 174.116 169.623 cv
179.491 169.623 184.874 169.623 190.253 169.623 cv
191.017 169.623 191.896 170.084 192.211 170.664 cv
192.771 171.691 193.367 172.785 194 173.949 cv
194.678 175.193 195.404 176.525 196.182 177.955 cv
196.67 178.852 196.264 179.613 195.263 179.613 cv
188.213 179.613 181.158 179.613 174.113 179.613 cv
167.068 179.613 160.013 179.613 152.968 179.613 cv
151.967 179.613 151.575 178.852 152.063 177.955 cv
152.841 176.525 153.567 175.193 154.245 173.949 cv
154.878 172.785 155.475 171.691 156.034 170.664 cv
156.35 170.084 157.217 169.623 157.981 169.623 cv
cp
.807843 .647059 .254902 rgb
ef
174.121 177.607 mo
182.033 177.607 188.485 176.438 188.485 175.002 cv
188.485 173.565 182.033 172.395 174.121 172.395 cv
166.209 172.395 159.757 173.565 159.757 175.002 cv
159.757 176.438 166.209 177.607 174.121 177.607 cv
cp
.741176 .560784 .211765 rgb
ef
159.47 139.626 mo
161.778 139.626 li
162.47 184.159 li
158.778 184.159 li
159.47 139.626 li
cp
.882353 .792157 .592157 rgb
ef
185.083 139.626 mo
187.39 139.626 li
188.082 184.159 li
184.39 184.159 li
185.083 139.626 li
cp
ef
212.593 130.166 mo
218.877 130.166 225.167 130.166 231.452 130.166 cv
237.737 130.166 244.026 130.166 250.315 130.166 cv
252.254 130.166 253.732 131.747 253.599 133.654 cv
253.354 137.145 253.114 140.551 252.881 143.889 cv
252.651 147.153 252.427 150.35 252.207 153.48 cv
252.091 155.134 250.539 156.471 248.761 156.471 cv
242.99 156.471 237.22 156.471 231.453 156.471 cv
225.687 156.471 219.916 156.471 214.149 156.471 cv
212.371 156.471 210.831 155.135 210.715 153.48 cv
210.496 150.353 210.271 147.153 210.042 143.889 cv
209.808 140.551 209.568 137.143 209.324 133.654 cv
209.19 131.747 210.654 130.166 212.593 130.166 cv
cp
.807843 .647059 .254902 rgb
ef
216.059 214.848 mo
220.097 214.848 li
224.848 172.853 li
218.388 172.853 li
216.059 214.848 li
cp
.780392 .741176 .603922 rgb
ef
249.097 215.309 mo
245.059 215.309 li
240.308 172.853 li
246.769 172.853 li
249.097 215.309 li
cp
ef
210.983 221.77 mo
215.021 221.77 li
219.772 184.159 li
213.312 184.159 li
210.983 221.77 li
cp
.882353 .792157 .592157 rgb
ef
252.999 221.77 mo
248.961 221.77 li
244.21 184.159 li
250.671 184.159 li
252.999 221.77 li
cp
ef
253.409 179.613 mo
253.972 179.537 254.316 179.496 254.535 178.659 cv
254.535 178.659 254.549 181.56 254.536 183.371 cv
254.531 184.112 254.093 184.574 253.263 184.574 cv
211.325 184.574 li
210.475 184.574 210.001 184.238 210.001 183.301 cv
210 181.516 210.001 178.734 210.001 178.734 cv
210.135 179.265 210.261 179.498 211.114 179.613 cv
253.409 179.613 li
cp
.741176 .560784 .211765 rgb
ef
216.127 169.623 mo
221.503 169.623 226.886 169.623 232.262 169.623 cv
237.638 169.623 243.021 169.623 248.399 169.623 cv
249.164 169.623 250.042 170.084 250.357 170.664 cv
250.917 171.691 251.513 172.785 252.146 173.949 cv
252.824 175.193 253.551 176.525 254.329 177.955 cv
254.816 178.852 254.41 179.613 253.409 179.613 cv
246.359 179.613 239.305 179.613 232.26 179.613 cv
225.214 179.613 218.16 179.613 211.114 179.613 cv
210.114 179.613 209.721 178.852 210.209 177.955 cv
210.987 176.525 211.713 175.193 212.391 173.949 cv
213.025 172.785 213.622 171.691 214.18 170.664 cv
214.497 170.084 215.363 169.623 216.127 169.623 cv
cp
.807843 .647059 .254902 rgb
ef
232.268 177.607 mo
240.18 177.607 246.632 176.438 246.632 175.002 cv
246.632 173.565 240.18 172.395 232.268 172.395 cv
224.356 172.395 217.903 173.565 217.903 175.002 cv
217.903 176.438 224.356 177.607 232.268 177.607 cv
cp
.741176 .560784 .211765 rgb
ef
217.617 139.626 mo
219.924 139.626 li
220.617 184.159 li
216.925 184.159 li
217.617 139.626 li
cp
.882353 .792157 .592157 rgb
ef
243.229 139.626 mo
245.536 139.626 li
246.229 184.159 li
242.537 184.159 li
243.229 139.626 li
cp
ef
78.8926 81.5615 mo
72.3867 82.0713 66.1377 84.5938 61.7803 89.7227 cv
63.4937 84.0269 71.4219 80.1748 78.4761 78.9927 cv
78.8926 81.5615 li
cp
.666667 .764706 .0784314 rgb
ef
77.564 78.5796 mo
71.4717 79.355 65.2886 81.9849 61.397 87.0444 cv
62.7808 81.5615 69.7822 77.6064 76.3633 76.1772 cv
77.564 78.5796 li
cp
ef
75.6973 75.0332 mo
69.6523 76.3711 64.1099 79.3145 60.6108 84.7349 cv
61.564 79.124 67.8208 74.7871 74.3037 72.7437 cv
75.6973 75.0332 li
cp
ef
73.5137 71.8511 mo
68.2681 73.3872 63.168 76.5337 60.3779 81.4272 cv
60.9189 76.5337 66.5723 72.1421 72.1665 69.9629 cv
73.5137 71.8511 li
cp
ef
71.1831 69.0786 mo
66.2935 71.1113 61.7017 74.6445 59.499 79.585 cv
59.5405 74.8945 64.542 70.1172 69.7041 67.4419 cv
71.1831 69.0786 li
cp
ef
68.8115 66.8042 mo
64.5771 68.9688 60.7056 72.46 59.0586 77.0474 cv
58.791 72.8271 62.8755 68.0405 67.312 65.29 cv
68.8115 66.8042 li
cp
ef
66.6919 64.2959 mo
62.9922 66.4878 59.6997 69.8047 58.4863 73.9194 cv
57.9902 70.2573 61.2422 65.6206 65.0889 62.8955 cv
66.6919 64.2959 li
cp
ef
64.5703 62.3394 mo
61.3472 64.5361 58.5586 67.7329 57.6987 71.5273 cv
57.0376 68.2368 59.7163 63.8916 63.0415 61.207 cv
64.5703 62.3394 li
cp
ef
62.4082 60.688 mo
59.6655 62.8086 57.3623 65.8018 56.8062 69.2261 cv
56.041 66.3325 58.106 62.313 60.9121 59.75 cv
62.4082 60.688 li
cp
ef
60.2979 59.1729 mo
58.1338 61.2466 56.4263 64.0142 56.2549 66.9976 cv
55.3389 64.5957 56.7881 60.8496 58.9678 58.3999 cv
60.2979 59.1729 li
cp
ef
58.5063 58.1846 mo
56.7163 59.8945 55.3032 62.1885 55.1621 64.6621 cv
54.4043 62.6714 55.3628 59.4194 57.165 57.395 cv
58.5063 58.1846 li
cp
ef
56.6782 57.1108 mo
55.0874 59.0049 53.9336 61.4321 54.064 63.9067 cv
53.0918 62.0107 53.9512 58.5957 55.52 56.3809 cv
56.6782 57.1108 li
cp
ef
55.2935 56.2266 mo
53.5024 57.8491 52.6377 58.7124 52.3491 61.1196 cv
51.8643 59.1055 52.5122 57.3862 54.1846 55.6763 cv
55.2935 56.2266 li
cp
ef
53.8433 55.522 mo
51.8325 56.8643 51.1504 57.665 50.5088 60.002 cv
50.3267 57.9478 51.1328 56.4365 53.0405 54.9951 cv
53.8433 55.522 li
cp
ef
52.7314 55.041 mo
50.5835 55.7153 49.8784 56.2554 48.9092 58.0513 cv
49.4102 56.0493 49.9653 55.4067 52.2388 54.6621 cv
52.7314 55.041 li
cp
ef
51.9478 54.9604 mo
49.3179 53.5645 46.5034 53.8174 43.8066 54.0747 cv
47.0005 52.4722 50.6621 53.6123 52.9395 54.9824 cv
51.9478 54.9604 li
cp
ef
52.4424 54.8877 mo
50.4971 54.7627 48.2793 55.0322 47.2051 56.4795 cv
47.6426 54.8008 49.9829 53.7896 52.4424 54.8877 cv
cp
ef
80.4482 83.939 mo
74.3794 84.7778 68.0137 87.7319 65.022 92.0796 cv
66.5806 86.3975 73.5498 82.481 80.0034 81.7769 cv
80.4482 83.939 li
cp
ef
83.2939 93.292 mo
85.5933 93.0381 li
78.9912 74.0142 63.9072 58.2451 51.8184 54.5073 cv
51.6968 54.7534 li
63.5107 59.1997 77.6484 75.1279 83.2939 93.292 cv
cp
ef
92.6577 83.1328 mo
98.9014 85.0332 104.461 88.8408 107.615 94.7856 cv
107.167 88.8496 100.25 83.397 93.6152 80.7188 cv
92.6577 83.1328 li
cp
.447059 .65098 .203922 rgb
ef
94.5952 80.5127 mo
100.379 82.5757 105.853 86.4751 108.564 92.2563 cv
108.393 86.6006 102.406 81.229 96.2861 78.4224 cv
94.5952 80.5127 li
cp
ef
97.1821 77.4473 mo
102.796 80.0615 107.578 84.1201 109.832 90.1621 cv
110.105 84.478 104.927 78.9019 99.0352 75.5127 cv
97.1821 77.4473 li
cp
ef
100 74.8081 mo
104.792 77.4409 109.095 81.6113 110.769 86.9893 cv
111.292 82.0962 106.715 76.585 101.719 73.2539 cv
100 74.8081 li
cp
ef
102.872 72.6055 mo
107.209 75.6416 110.933 80.0806 112.023 85.3774 cv
112.992 80.7832 109.133 75.0469 104.667 71.3262 cv
102.872 72.6055 li
cp
ef
105.677 70.8926 mo
109.347 73.9146 112.377 78.1572 112.999 82.9932 cv
114.168 78.9282 111.207 73.3794 107.467 69.731 cv
105.677 70.8926 li
cp
ef
108.284 68.9014 mo
111.429 71.8296 113.93 75.7798 114.229 80.0674 cv
115.501 76.5918 113.325 71.3613 110.152 67.8789 cv
108.284 68.9014 li
cp
ef
110.779 67.4463 mo
113.455 70.2793 115.491 73.9951 115.514 77.9004 cv
116.867 74.8218 115.187 69.9985 112.515 66.665 cv
110.779 67.4463 li
cp
ef
113.246 66.2988 mo
115.161 68.5928 116.617 71.4463 116.859 74.4067 cv
116.859 69.5889 li
116.408 68.2202 115.732 66.8726 114.908 65.7056 cv
113.246 66.2988 li
cp
ef
115.632 65.2749 mo
116.094 65.9629 116.509 66.6953 116.859 67.458 cv
116.859 64.8755 li
115.632 65.2749 li
cp
ef
90.6265 85.1235 mo
96.3745 87.2441 101.955 91.501 103.942 96.3882 cv
103.642 90.5078 97.6777 85.1821 91.5249 83.1074 cv
90.6265 85.1235 li
cp
ef
85.8354 93.6509 mo
83.647 92.8999 li
92.0923 79.1479 105.411 68.6133 116.859 64.4316 cv
116.859 65.187 li
105.789 69.875 93.3369 80.4873 85.8354 93.6509 cv
cp
ef
87.6089 81.5659 mo
94.0396 80.4624 100.717 81.354 106.209 85.2485 cv
103.141 80.1538 94.5059 78.377 87.3784 78.9756 cv
87.6089 81.5659 li
cp
.627451 .807843 .137255 rgb
ef
88.1611 78.356 mo
94.2559 77.6021 100.896 78.6104 105.918 82.5601 cv
103.221 77.5845 95.4595 75.4868 88.729 75.7246 cv
88.1611 78.356 li
cp
ef
88.5947 74.3154 mo
94.7832 74.1226 101.377 75.7349 106.107 80.1245 cv
103.798 74.9229 96.1655 72.1313 89.3784 71.7505 cv
88.5947 74.3154 li
cp
ef
90.4214 70.8281 mo
95.8862 71.0244 101.603 72.8101 105.516 76.8638 cv
103.783 72.2524 97.2192 69.3916 91.2607 68.6685 cv
90.4214 70.8281 li
cp
ef
91.9946 67.564 mo
97.2358 68.3311 102.559 70.6201 105.913 74.8652 cv
104.715 70.3291 98.686 66.9326 93.0234 65.6206 cv
91.9946 67.564 li
cp
ef
93.7305 64.7769 mo
98.3691 65.8311 102.982 68.252 105.713 72.291 cv
104.928 68.1382 99.7896 64.5151 94.8096 62.9424 cv
93.7305 64.7769 li
cp
ef
95.1646 61.8291 mo
99.2905 63.0298 103.301 65.4351 105.496 69.1309 cv
105.07 65.4521 100.772 61.7559 96.373 60.0723 cv
95.1646 61.8291 li
cp
ef
96.7373 59.4033 mo
100.403 60.7334 103.895 63.1377 105.668 66.6133 cv
105.495 63.2539 101.824 59.7095 97.9385 57.9302 cv
96.7373 59.4033 li
cp
ef
98.4253 57.27 mo
101.607 58.6475 104.576 60.9746 105.962 64.1553 cv
105.991 61.1704 102.996 57.7842 99.6421 55.9922 cv
98.4253 57.27 li
cp
ef
100.096 55.2798 mo
102.703 56.7515 105.043 59.0146 105.947 61.8662 cv
106.24 59.3057 103.909 56.0366 101.192 54.2002 cv
100.096 55.2798 li
cp
ef
101.585 53.8765 mo
103.744 55.0889 105.68 56.9629 106.427 59.3271 cv
106.669 57.2051 104.939 54.3105 102.691 52.7886 cv
101.585 53.8765 li
cp
ef
103.091 52.376 mo
105.102 53.8257 106.821 55.9014 107.306 58.3237 cv
107.779 56.2476 106.101 53.1509 104.034 51.3979 cv
103.091 52.376 li
cp
ef
104.43 51.0454 mo
106.565 52.1729 107.404 52.9395 108.278 55.2026 cv
108.251 53.1382 107.27 51.6221 105.227 50.3813 cv
104.43 51.0454 li
cp
ef
105.447 50.1455 mo
107.726 50.9448 108.585 51.5654 109.786 53.6646 cv
109.453 51.6221 108.3 50.3662 106.095 49.437 cv
105.447 50.1455 li
cp
ef
106.406 49.4072 mo
108.653 49.5239 109.469 49.876 110.854 51.3721 cv
109.872 49.5586 109.175 49.0708 106.789 48.916 cv
106.406 49.4072 li
cp
ef
107.144 49.1309 mo
109.348 47.1323 112.139 46.6831 114.814 46.2603 cv
111.325 45.5005 108.64 46.9326 106.922 48.8428 cv
107.144 49.1309 li
cp
ef
106.901 49.0361 mo
108.742 48.3896 110.952 48.0693 112.373 49.1724 cv
111.503 47.6685 108.978 47.3135 106.901 49.0361 cv
cp
ef
87.2651 81.5874 mo
81.4277 79.7285 75.0488 79.6138 69.3125 82.3433 cv
72.9741 78.2153 81.3164 77.8135 87.8843 79.3145 cv
87.2651 81.5874 li
cp
ef
87.5415 78.7646 mo
82.187 76.834 76.2778 76.5337 70.8794 78.9189 cv
74.3945 75.1582 82.1387 75.0332 88.1821 76.6431 cv
87.5415 78.7646 li
cp
ef
88.3149 76.5112 mo
83.4468 74.1699 77.9263 73.3618 72.6699 75.2144 cv
76.272 71.8511 83.5479 72.4072 89.0874 74.5005 cv
88.3149 76.5112 li
cp
ef
88.7402 73.9146 mo
83.9741 71.3721 78.4917 70.3291 73.1631 71.9604 cv
76.9019 68.7554 84.1484 69.6143 89.5957 71.9414 cv
88.7402 73.9146 li
cp
ef
89.9111 71.8335 mo
85.5347 69.0918 80.377 67.7534 75.1909 68.9614 cv
78.9644 66.1475 85.8154 67.4336 90.855 70.0161 cv
89.9111 71.8335 li
cp
ef
91.1865 69.3633 mo
87.043 66.8462 82.1841 65.646 77.3291 66.8423 cv
80.8384 64.1553 87.2856 65.29 92.0498 67.6367 cv
91.1865 69.3633 li
cp
ef
92.0479 66.9326 mo
88.0464 64.5078 83.354 63.3511 78.6641 64.5078 cv
82.0532 61.9116 88.2813 63.0005 92.8828 65.2749 cv
92.0479 66.9326 li
cp
ef
93.1387 64.5723 mo
89.4409 62.3267 85.104 61.2505 80.771 62.3267 cv
83.9023 59.9263 89.6577 60.938 93.9097 63.0342 cv
93.1387 64.5723 li
cp
ef
94.478 62.5093 mo
90.9233 60.0381 86.6597 58.708 82.27 59.502 cv
85.542 57.3096 91.2251 58.6626 95.3408 61.0166 cv
94.478 62.5093 li
cp
ef
95.7046 61.0396 mo
92.3867 58.2588 88.2598 56.5552 83.8159 56.96 cv
87.2715 55.0552 92.8101 56.9116 96.6992 59.6265 cv
95.7046 61.0396 li
cp
ef
97.0923 58.9844 mo
93.9658 56.3638 90.0762 54.7534 85.8882 55.1343 cv
89.1455 53.3413 94.3647 55.0981 98.0293 57.6582 cv
97.0923 58.9844 li
cp
ef
98.4995 57.1973 mo
95.5205 54.7031 91.814 53.1675 87.8242 53.5327 cv
90.9277 51.8213 95.9009 53.4961 99.3926 55.9321 cv
98.4995 57.1973 li
cp
ef
99.8862 55.5122 mo
97.4639 53.2153 94.3672 51.7109 90.9272 51.8081 cv
93.6772 50.5107 97.8535 52.21 100.718 54.4766 cv
99.8862 55.5122 li
cp
ef
101.324 54.0884 mo
99.1299 52.0107 96.3276 50.6421 93.2134 50.7334 cv
95.7036 49.5586 99.4834 51.0913 102.076 53.1509 cv
101.324 54.0884 li
cp
ef
102.361 52.8594 mo
100.665 50.6382 98.2935 49.7788 95.6577 49.1958 cv
98.3149 48.7036 101.129 49.9131 103.064 52.127 cv
102.361 52.8594 li
cp
ef
103.205 51.9893 mo
102.092 49.9995 100.271 49.0278 98.2051 48.2334 cv
100.415 48.1558 102.554 49.4639 103.861 51.4844 cv
103.205 51.9893 li
cp
ef
104.134 51.2358 mo
103.424 49.4229 102 48.3979 100.346 47.5029 cv
102.22 47.6807 103.875 49.0278 104.745 50.8843 cv
104.134 51.2358 li
cp
ef
105.013 50.4009 mo
104.648 48.7988 103.59 47.7671 102.325 46.8081 cv
103.865 47.1924 105.074 48.5264 105.566 50.1851 cv
105.013 50.4009 li
cp
ef
105.686 49.7788 mo
105.696 48.1338 104.902 46.875 103.887 45.6553 cv
105.299 46.3809 106.172 47.957 106.273 49.6772 cv
105.686 49.7788 li
cp
ef
106.379 49.2129 mo
106.897 47.9658 106.352 46.502 105.831 45.6255 cv
106.941 46.4521 107.251 47.7109 106.813 49.0405 cv
106.379 49.2129 li
cp
ef
106.929 48.7788 mo
107.532 47.5557 107.653 46.2603 107.201 45.1069 cv
108.205 45.9985 108.223 47.6685 107.172 48.8252 cv
106.929 48.7788 li
cp
ef
87.0742 82.7964 mo
80.9541 82.9136 74.4907 85.6465 71.0264 89.6055 cv
73.2407 84.1504 80.6113 81.0781 87.1094 81.1489 cv
87.0742 82.7964 li
cp
ef
86.8315 83.6885 mo
92.9194 83.002 99.6772 84.8579 103.648 88.3271 cv
100.734 83.2134 93.0137 81.1343 86.5869 82.0557 cv
86.8315 83.6885 li
cp
ef
86.2446 94.0347 mo
83.9512 94.3423 li
85.6094 74.2432 96.0469 55.0249 107.049 48.6216 cv
107.228 48.7988 li
96.6411 56.0366 87.1885 75.0293 86.2446 94.0347 cv
cp
.447059 .65098 .203922 rgb
ef
82.0659 72.9053 mo
74.8516 71.2148 67.2944 72.1421 60.9819 77.0669 cv
64.6021 70.4736 74.3911 68.4644 82.4087 69.5098 cv
82.0659 72.9053 li
cp
.301961 .729412 .211765 rgb
ef
81.5464 68.6602 mo
74.6987 67.4419 67.1802 68.5352 61.3931 73.5479 cv
64.5913 67.0947 73.4072 64.6162 80.9888 65.1802 cv
81.5464 68.6602 li
cp
ef
81.1836 63.3286 mo
74.2134 62.8486 66.7285 64.731 61.2573 70.3291 cv
64.0249 63.5786 72.7178 60.1758 80.3804 59.9263 cv
81.1836 63.3286 li
cp
ef
79.2344 58.6782 mo
73.0664 58.7422 66.5654 60.8794 62.0259 66.0562 cv
64.126 60.0601 71.6152 56.5459 78.3555 55.811 cv
79.2344 58.6782 li
cp
ef
77.563 54.3301 mo
71.6299 55.1416 65.5576 57.9565 61.6421 63.416 cv
63.1357 57.4932 70.0381 53.2461 76.4644 51.7202 cv
77.563 54.3301 li
cp
ef
75.6934 50.6016 mo
70.4312 51.8081 65.1548 54.8271 61.9482 60.0425 cv
62.9629 54.6016 68.8706 50.0273 74.5337 48.1338 cv
75.6934 50.6016 li
cp
ef
74.1699 46.6626 mo
69.4795 48.0903 64.8833 51.1035 62.292 55.8887 cv
62.8882 51.0654 67.8496 46.3638 72.8633 44.3076 cv
74.1699 46.6626 li
cp
ef
72.4727 43.415 mo
68.2983 45.0313 64.2866 48.0693 62.1782 52.5679 cv
62.4785 48.1689 66.7285 43.627 71.165 41.4326 cv
72.4727 43.415 li
cp
ef
70.6372 40.5474 mo
67.0063 42.2441 63.5854 45.1938 61.9238 49.3252 cv
61.9849 45.3965 65.4683 41.0532 69.3042 38.8208 cv
70.6372 40.5474 li
cp
ef
68.8159 37.8687 mo
65.8296 39.7056 63.1206 42.5986 62.0117 46.3208 cv
61.7617 42.9395 64.4932 38.7168 67.6143 36.4067 cv
68.8159 37.8687 li
cp
ef
67.1792 35.9668 mo
64.7095 37.4912 62.4678 39.8823 61.5508 42.9556 cv
61.3442 40.1689 63.3857 36.4067 65.9683 34.4927 cv
67.1792 35.9668 li
cp
ef
65.5298 33.9429 mo
63.2173 35.772 61.2139 38.4321 60.5913 41.6162 cv
60.1245 38.8579 62.1118 34.8491 64.4985 32.6094 cv
65.5298 33.9429 li
cp
ef
64.063 32.1416 mo
61.6206 33.5391 60.6499 34.5288 59.5933 37.4688 cv
59.689 34.7441 60.8433 32.8018 63.1855 31.2344 cv
64.063 32.1416 li
cp
ef
62.9438 30.9204 mo
60.3501 31.8877 59.3599 32.6592 57.9414 35.3901 cv
58.3818 32.7153 59.7222 31.105 62.2358 29.9648 cv
62.9438 30.9204 li
cp
ef
61.8862 29.9087 mo
59.3491 29.9819 58.4175 30.4185 56.8105 32.3408 cv
57.9741 29.9819 58.7744 29.3691 61.4697 29.252 cv
61.8862 29.9087 li
cp
ef
61.0625 29.5161 mo
58.6411 26.8096 55.5078 26.1221 52.5054 25.4614 cv
56.4644 24.5918 59.4453 26.5747 61.3223 29.1489 cv
61.0625 29.5161 li
cp
ef
61.3384 29.4058 mo
59.2842 28.4922 56.8032 27.9785 55.1665 29.3838 cv
56.1953 27.4307 59.0518 27.064 61.3384 29.4058 cv
cp
ef
82.4541 72.9551 mo
89.0928 70.7153 96.2886 70.8057 102.67 74.6025 cv
98.6729 69.0352 89.2793 68.2031 81.8271 69.9336 cv
82.4541 72.9551 li
cp
ef
82.2314 69.2261 mo
88.3291 66.8828 95.001 66.7085 101.011 70.0459 cv
97.167 64.9614 88.4399 64.5151 81.5752 66.4092 cv
82.2314 69.2261 li
cp
ef
81.4302 66.2334 mo
86.9917 63.3232 93.2407 62.4731 99.1089 65.0986 cv
95.1538 60.5518 86.9341 61.0098 80.623 63.561 cv
81.4302 66.2334 li
cp
ef
81.0327 62.7925 mo
86.4854 59.6187 92.6987 58.4585 98.6553 60.7979 cv
94.5405 56.4453 86.3442 57.3096 80.1304 60.167 cv
81.0327 62.7925 li
cp
ef
79.7778 60.0205 mo
84.7979 56.5771 90.6543 55.002 96.4634 56.7739 cv
92.2974 52.9395 84.5332 54.3901 78.7705 57.5859 cv
79.7778 60.0205 li
cp
ef
78.4189 56.7222 mo
83.1675 53.5645 88.6836 52.1641 94.1187 53.9102 cv
90.2485 50.2539 82.9424 51.499 77.4976 54.4243 cv
78.4189 56.7222 li
cp
ef
77.5225 53.5024 mo
82.1099 50.4531 87.438 49.1016 92.6885 50.7896 cv
88.9487 47.2573 81.8926 48.4629 76.6338 51.2788 cv
77.5225 53.5024 li
cp
ef
76.3672 50.3516 mo
80.6064 47.5298 85.5293 46.2861 90.3813 47.8423 cv
86.9258 44.5781 80.4058 45.6895 75.5459 48.2939 cv
76.3672 50.3516 li
cp
ef
74.9224 47.5791 mo
79.0063 44.4609 83.8564 42.8677 88.7798 44.0835 cv
85.1611 41.0649 78.7109 42.6372 73.9951 45.5913 cv
74.9224 47.5791 li
cp
ef
73.585 45.6025 mo
77.4126 42.0693 82.1196 39.9692 87.1172 40.6646 cv
83.2798 38.0391 76.9771 40.2832 72.5083 43.7168 cv
73.585 45.6025 li
cp
ef
72.0864 42.8486 mo
75.6929 39.5244 80.1279 37.5513 84.8384 38.1982 cv
81.2222 35.7266 75.2822 37.8398 71.0713 41.0752 cv
72.0864 42.8486 li
cp
ef
70.5547 40.4473 mo
73.9917 37.271 78.2183 35.3901 82.7061 36.0146 cv
79.2603 33.6563 73.6011 35.6694 69.5889 38.7461 cv
70.5547 40.4473 li
cp
ef
69.0454 38.1865 mo
71.8477 35.2544 75.3862 33.3809 79.2617 33.6431 cv
76.2002 31.8267 71.4404 33.9028 68.1387 36.7959 cv
69.0454 38.1865 li
cp
ef
67.4697 36.2559 mo
70.0059 33.6045 73.21 31.9072 76.7178 32.1416 cv
73.9473 30.5029 69.6377 32.3828 66.6489 34.9956 cv
67.4697 36.2559 li
cp
ef
66.3389 34.5938 mo
68.3203 31.7397 71.0205 30.7065 74.0112 30.0298 cv
71.0308 29.2822 67.8193 30.7656 65.5684 33.6045 cv
66.3389 34.5938 li
cp
ef
65.4136 33.4282 mo
66.7319 30.8457 68.814 29.6328 71.1689 28.6738 cv
68.6797 28.4844 66.2275 30.124 64.6909 32.7363 cv
65.4136 33.4282 li
cp
ef
64.3892 32.4063 mo
65.2476 30.0508 66.8853 28.7495 68.7778 27.6299 cv
66.6592 27.7969 64.7529 29.5107 63.7114 31.9146 cv
64.3892 32.4063 li
cp
ef
63.4258 31.271 mo
63.8872 29.1797 65.1118 27.853 66.5688 26.6406 cv
64.8198 27.0942 63.415 28.8076 62.8081 30.9663 cv
63.4258 31.271 li
cp
ef
62.6865 30.4224 mo
62.7261 28.272 63.6626 26.6348 64.8433 25.0684 cv
63.229 25.9756 62.1963 28.0088 62.0278 30.2749 cv
62.6865 30.4224 li
cp
ef
61.9224 29.6563 mo
61.3779 27.9956 62.0386 26.0928 62.6538 24.9521 cv
61.375 26.0059 60.9868 27.6421 61.4385 29.415 cv
61.9224 29.6563 li
cp
ef
61.3164 29.0659 mo
60.6748 27.4307 60.5781 25.7271 61.1255 24.2266 cv
59.9653 25.3608 59.8926 27.5552 61.0405 29.1147 cv
61.3164 29.0659 li
cp
ef
82.625 74.5459 mo
89.5264 74.9229 96.7168 78.7549 100.517 84.1006 cv
98.1909 76.834 89.9653 72.5244 82.6445 72.3711 cv
82.625 74.5459 li
cp
ef
82.877 75.7246 mo
76.0347 74.5942 68.3579 76.8057 63.7715 81.2158 cv
67.2178 74.5874 75.9873 72.1421 83.2046 73.5859 cv
82.877 75.7246 li
cp
ef
83.6431 93.3389 mo
86.2197 93.8281 li
85.5215 66.9443 74.083 37.1909 61.1851 28.8647 cv
60.979 29.0845 li
73.4956 39.0767 83.8052 68.3794 83.6431 93.3389 cv
cp
.266667 .631373 .298039 rgb
ef
87.9063 105.408 mo
82.4302 105.327 li
81.5645 102.598 li
82.1899 102.275 li
83.354 102.571 li
82.0073 97.252 li
82.2656 96.6782 li
83.6294 96.8057 li
82.6226 93.6299 li
81.5762 91.6182 li
82.0659 91.3716 li
83.8521 92.481 li
84.8896 90.7412 li
85.8135 93.2583 li
88.2935 89.584 li
88.4512 89.8916 li
87.355 92.6426 li
86.8457 97.062 li
88.0659 96.5137 li
88.3892 97.4556 li
87.5825 102.005 li
88.3892 102.459 li
88.939 102.943 li
87.9063 105.408 li
cp
.623529 .192157 0 rgb
ef
94.8955 101.125 mo
99.001 101.125 li
99.1499 101.125 99.2705 101.246 99.2705 101.395 cv
99.2705 102.475 li
99.2705 102.623 99.1499 102.744 99.001 102.744 cv
98.7539 102.744 li
99.2363 108.674 li
99.2769 109.175 99.5181 109.59 99.9336 109.874 cv
101.339 110.833 102.196 112.451 102.266 114.27 cv
102.673 124.885 li
102.708 125.77 101.949 126.494 101.063 126.494 cv
92.6304 126.494 li
91.7441 126.494 90.9692 125.77 91.02 124.885 cv
91.6309 114.27 li
91.7354 112.452 92.5586 110.834 93.9639 109.874 cv
94.3794 109.59 94.6201 109.175 94.6606 108.675 cv
95.1431 102.744 li
94.8955 102.744 li
94.7471 102.744 94.626 102.623 94.626 102.475 cv
94.626 101.395 li
94.626 101.246 94.7471 101.125 94.8955 101.125 cv
cp
.443137 .65098 .541176 rgb
ef
95.5967 102.725 mo
95.4121 108.735 li
95.353 109.463 94.9922 110.083 94.3896 110.496 cv
93.1416 111.349 92.3843 112.754 92.3843 114.27 cv
91.7739 124.885 li
91.7739 125.355 92.1592 125.74 92.6299 125.74 cv
93.6934 125.74 li
93.2222 125.74 92.8374 125.355 92.8374 124.885 cv
93.4478 114.27 li
93.4478 112.754 94.2046 111.349 95.4531 110.496 cv
96.0552 110.083 96.4165 109.463 96.4751 108.735 cv
96.6602 102.725 li
95.5967 102.725 li
cp
.545098 .756863 .635294 rgb
ef
95.1611 101.391 mo
96.2437 101.391 li
96.3525 101.391 96.4409 101.479 96.4409 101.588 cv
96.4409 102.131 li
96.4409 102.24 96.3525 102.329 96.2437 102.329 cv
95.1611 102.329 li
95.0527 102.329 94.9639 102.24 94.9639 102.131 cv
94.9639 101.588 li
94.9639 101.479 95.0527 101.391 95.1611 101.391 cv
cp
ef
96.8291 101.391 mo
96.9697 101.391 li
97.0786 101.391 97.167 101.479 97.167 101.588 cv
97.167 102.131 li
97.167 102.24 97.0781 102.329 96.9697 102.329 cv
96.8291 102.329 li
96.7207 102.329 96.6318 102.24 96.6318 102.131 cv
96.6318 101.588 li
96.6318 101.479 96.7202 101.391 96.8291 101.391 cv
cp
ef
90.8213 108.037 mo
94.7178 109.965 97.3984 113.982 97.3984 118.623 cv
97.3984 122.723 95.3081 126.332 92.1372 128.449 cv
79.0474 128.449 li
75.876 126.332 73.7856 122.723 73.7856 118.623 cv
73.7856 113.982 76.4673 109.965 80.3633 108.036 cv
76.7588 97.1465 li
76.6699 96.8789 76.7119 96.6099 76.8765 96.3813 cv
77.042 96.1528 77.2842 96.0288 77.5664 96.0288 cv
93.6182 96.0288 li
93.9004 96.0288 94.1426 96.1533 94.3076 96.3818 cv
94.4727 96.6104 94.5142 96.8789 94.4258 97.1465 cv
90.8213 108.037 li
cp
.972549 .733333 .262745 rgb
ef
58.7759 108.832 mo
62.3232 108.832 65.2002 111.708 65.2002 115.256 cv
65.2002 118.803 62.3232 121.68 58.7759 121.68 cv
55.229 121.68 52.3521 118.803 52.3521 115.256 cv
52.3521 111.708 55.229 108.832 58.7759 108.832 cv
cp
.894118 .898039 .901961 rgb
ef
56.4399 111.09 mo
57.5796 111.09 58.5039 112.014 58.5039 113.153 cv
58.5039 114.293 57.5796 115.217 56.4399 115.217 cv
55.3008 115.217 54.3765 114.293 54.3765 113.153 cv
54.3765 112.014 55.3008 111.09 56.4399 111.09 cv
cp
.945098 .94902 .94902 rgb
ef
61.4546 109.416 mo
63.6641 110.432 65.2002 112.666 65.2002 115.256 cv
65.2002 118.803 62.3223 121.68 58.7759 121.68 cv
57.1528 121.68 55.6709 121.076 54.5396 120.082 cv
55.355 120.457 56.2622 120.668 57.2188 120.668 cv
60.7651 120.668 63.6426 117.79 63.6426 114.244 cv
63.6426 112.321 62.7949 110.593 61.4546 109.416 cv
cp
.819608 .827451 .831373 rgb
ef
67.5151 112.227 mo
70.2832 112.365 72.416 114.723 72.2773 117.491 cv
72.1392 120.26 69.7817 122.393 67.0132 122.254 cv
64.2451 122.115 62.1123 119.758 62.2505 116.989 cv
62.3892 114.221 64.7466 112.088 67.5151 112.227 cv
cp
.894118 .898039 .901961 rgb
ef
65.604 113.898 mo
66.4932 113.942 67.1782 114.699 67.1333 115.589 cv
67.0889 116.479 66.332 117.163 65.4424 117.119 cv
64.5532 117.074 63.8682 116.316 63.9126 115.428 cv
63.9575 114.539 64.7148 113.854 65.604 113.898 cv
cp
.945098 .94902 .94902 rgb
ef
69.583 112.788 mo
71.2676 113.666 72.3789 115.471 72.2773 117.491 cv
72.1392 120.259 69.7808 122.393 67.0132 122.254 cv
65.7461 122.19 64.6133 121.661 63.7695 120.842 cv
64.3911 121.166 65.0908 121.365 65.8374 121.403 cv
68.605 121.541 70.9634 119.408 71.1016 116.641 cv
71.1768 115.14 70.583 113.759 69.583 112.788 cv
cp
.819608 .827451 .831373 rgb
ef
77.0815 109.413 mo
80.292 109.574 82.7656 112.308 82.6045 115.519 cv
82.4438 118.729 79.71 121.203 76.4995 121.041 cv
73.2891 120.881 70.8154 118.146 70.9761 114.937 cv
71.1367 111.726 73.8711 109.252 77.0815 109.413 cv
cp
.894118 .898039 .901961 rgb
ef
74.8652 111.351 mo
75.896 111.402 76.6904 112.281 76.6387 113.312 cv
76.5874 114.344 75.709 115.138 74.6777 115.086 cv
73.6465 115.035 72.8521 114.156 72.9038 113.125 cv
72.9551 112.094 73.8335 111.299 74.8652 111.351 cv
cp
.945098 .94902 .94902 rgb
ef
79.48 110.063 mo
81.4331 111.083 82.7222 113.174 82.6045 115.519 cv
82.4443 118.729 79.7095 121.203 76.4995 121.041 cv
75.0303 120.968 73.7163 120.354 72.7373 119.403 cv
73.4585 119.779 74.27 120.012 75.1357 120.055 cv
78.3457 120.216 81.0806 117.742 81.2412 114.531 cv
81.3281 112.791 80.6392 111.189 79.48 110.063 cv
cp
.819608 .827451 .831373 rgb
ef
59.3398 126.184 mo
74.2783 126.184 li
74.7222 126.184 75.084 126.545 75.084 126.989 cv
75.084 131.101 li
75.084 131.545 74.7222 131.906 74.2783 131.906 cv
59.3398 131.906 li
58.896 131.906 58.5342 131.545 58.5342 131.101 cv
58.5342 126.989 li
58.5342 126.545 58.896 126.184 59.3398 126.184 cv
cp
.858824 .717647 .647059 rgb
ef
59.3398 126.184 mo
74.2783 126.184 li
74.7222 126.184 75.084 126.545 75.084 126.989 cv
75.084 128.936 li
72.5762 129.652 69.771 129.983 66.8086 129.829 cv
63.8472 129.675 61.0425 129.053 58.5342 128.075 cv
58.5342 126.989 li
58.5342 126.545 58.896 126.184 59.3398 126.184 cv
cp
.745098 .631373 .568627 rgb
ef
72.3105 126.184 mo
74.2783 126.184 li
74.7222 126.184 75.084 126.545 75.084 126.989 cv
75.084 131.101 li
75.084 131.545 74.7222 131.906 74.2783 131.906 cv
72.3105 131.906 li
72.3105 126.184 li
cp
ef
85.7646 117.699 mo
84.0723 124.043 76.228 128.842 66.8086 128.842 cv
57.3896 128.842 49.5459 124.043 47.8535 117.699 cv
47.7871 117.449 47.8359 117.205 47.9932 117 cv
48.1509 116.795 48.3735 116.686 48.6318 116.686 cv
84.9863 116.686 li
85.2446 116.686 85.4673 116.797 85.625 117.001 cv
85.7822 117.206 85.8311 117.449 85.7646 117.699 cv
cp
.992157 .815686 .721569 rgb
ef
52.2661 117.492 mo
48.6318 117.492 li
49.499 120.741 52.0225 123.277 54.8452 124.957 cv
58.4077 127.076 62.688 128.035 66.8086 128.035 cv
67.4121 128.035 68.019 128.014 68.627 127.973 cv
65.0859 127.729 61.5205 126.766 58.48 124.957 cv
55.6572 123.277 53.1333 120.741 52.2661 117.492 cv
cp
.945098 .917647 .909804 rgb
ef
85.7646 117.699 mo
84.0723 124.043 76.228 128.842 66.8086 128.842 cv
66.334 128.842 65.8647 128.828 65.3989 128.805 cv
74.1816 128.353 81.3354 123.723 82.9424 117.699 cv
83.0088 117.449 82.96 117.206 82.8027 117.001 cv
82.645 116.797 82.4224 116.686 82.1641 116.686 cv
84.9863 116.686 li
85.2446 116.686 85.4673 116.797 85.625 117.001 cv
85.7822 117.206 85.8311 117.449 85.7646 117.699 cv
cp
.960784 .713726 .568627 rgb
ef
441.345 102.846 mo
444.59 102.846 li
444.707 102.846 444.803 102.941 444.803 103.059 cv
444.803 103.913 li
444.803 104.03 444.707 104.125 444.59 104.125 cv
444.395 104.125 li
444.775 108.813 li
444.808 109.209 444.999 109.537 445.326 109.761 cv
446.438 110.52 447.115 111.798 447.171 113.235 cv
447.492 121.626 li
447.52 122.326 446.92 122.899 446.22 122.899 cv
439.554 122.899 li
438.854 122.899 438.241 122.326 438.281 121.626 cv
438.764 113.235 li
438.846 111.799 439.497 110.521 440.608 109.761 cv
440.937 109.537 441.127 109.209 441.159 108.813 cv
441.54 104.125 li
441.345 104.125 li
441.228 104.125 441.132 104.03 441.132 103.913 cv
441.132 103.059 li
441.132 102.941 441.228 102.846 441.345 102.846 cv
cp
.752941 .482353 .47451 rgb
ef
441.898 104.11 mo
441.753 108.861 li
441.706 109.437 441.421 109.927 440.944 110.253 cv
439.958 110.927 439.359 112.038 439.359 113.235 cv
438.877 121.627 li
438.877 121.999 439.182 122.303 439.554 122.303 cv
440.394 122.303 li
440.021 122.303 439.717 121.999 439.717 121.627 cv
440.2 113.235 li
440.2 112.038 440.799 110.927 441.785 110.253 cv
442.261 109.927 442.547 109.437 442.593 108.861 cv
442.739 104.11 li
441.898 104.11 li
cp
.866667 .584314 .568627 rgb
ef
441.555 103.056 mo
442.41 103.056 li
442.496 103.056 442.566 103.125 442.566 103.212 cv
442.566 103.641 li
442.566 103.727 442.496 103.797 442.41 103.797 cv
441.555 103.797 li
441.469 103.797 441.398 103.727 441.398 103.641 cv
441.398 103.212 li
441.398 103.125 441.469 103.056 441.555 103.056 cv
cp
ef
442.873 103.056 mo
442.983 103.056 li
443.07 103.056 443.14 103.126 443.14 103.212 cv
443.14 103.641 li
443.14 103.727 443.069 103.797 442.983 103.797 cv
442.873 103.797 li
442.787 103.797 442.717 103.727 442.717 103.641 cv
442.717 103.212 li
442.717 103.125 442.787 103.056 442.873 103.056 cv
cp
ef
%ADOBeginClientInjection: EndPageContent "AI11EPS"
userdict /annotatepage 2 copy known {get exec}{pop pop} ifelse
%ADOEndClientInjection: EndPageContent "AI11EPS"
grestore
grestore
pgrs
%%PageTrailer
%ADOBeginClientInjection: PageTrailer Start "AI11EPS"
[/EMC AI11_PDFMark5[/NamespacePop AI11_PDFMark5
%ADOEndClientInjection: PageTrailer Start "AI11EPS"
[
[/CSA [/0 ]]
] del_res
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get exec
Adobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get exec
Adobe_AGM_Core/dt get exec
%%EOF
%AI9_PrintingDataEnd

userdict /AI9_read_buffer 256 string put
userdict begin
/ai9_skip_data
{
	mark
	{
		currentfile AI9_read_buffer { readline } stopped
		{
		}
		{
			not
			{
				exit
			} if
			(%AI9_PrivateDataEnd) eq
			{
				exit
			} if
		} ifelse
	} loop
	cleartomark
} def
end
userdict /ai9_skip_data get exec
%AI9_PrivateDataBegin
%!PS-Adobe-3.0 EPSF-3.0
%%Creator: Adobe Illustrator(R) 16.0
%%AI8_CreatorVersion: 16.0.0
%%For: (\702\750\762\740\753\750\751 \702\750\752\762\756\760\756\742\750\767) ()
%%Title: (Modern cozy kitchen combined with dining room.eps)
%%CreationDate: 9/2/2018 10:04 PM
%%Canvassize: 16383
%AI9_DataStream
%Gb"-6flAi@ZRFu%'qohZP*hr4GnT]W&dXR!%3UB@+@ab_f)P,q'B.sZh`0s=E.hS,qo7TNj)^f#rGUbslFH-k=PIV0T31Vt!F;7!
%R?a&&R?^otH^ih42q,`XQJMNbAoQc7*;:BR6-S9]7rEdf]e(m@"=\/>H%K"r5SSU?gZ>o.j-nU?ReuK*+N`D^[G@$$6giQ>@sAj8
%^lsnS:TRUO57H5qBX.d0A1GE(ENp^Fg\lG?0]5,*L47*i_sDBJRQ_eE@q$N9KH`VP]75X05*GsdJ.+Z;ho!@S)Z8)3%L:?NJ/!UG
%D3_F)^49S<J$ug%0jB`prTLK<DEdCqjSa82*po;i%"5?SLKO"GUB?(Wi:@-25>RC<`&%QAdEIQ(4T7$h)r+je>;R6RKE=G8+H#t'
%6(cI:`M6<,*KGKbmgJ-9R%[34VSo'<;J(Dl0E).%N!BD$7fB/*[>lbHs1DJS5fZ7U[j]4lL[C=.JN#P"`RP5K#Q9F!J*@`>d=+P)
%^gM(^8'%-d+i7[h,>fQ],2e"21m5k=fQ=PTW3bn'jAX]Dn9aXQk[)n[LuJF;*^N>I/E(i@`J\eeC$6*B"N6r=_r5B_&T-kNZc+92
%oJ&HZm2&]=QiY&0o`rn'M=CL5R=B=&!V(pIZ!mJ>6nJ)J',\sbd"YX1RqZcPL*K"$Y?;tt)^%SMm>QM:I6l0ZLuXLB"8sp$gk$=X
%)[Q6$[n#^dACt--_8F]MHe_UZ?e_(-CmjO29Gh)la^Mdd@llP)`o#^4h-bU(qg@l3&GGN&J:A`4qA7)Khh!$@4*Vh=_<2$f5p/ic
%^pt6`n9Y`E*i.MC_Z2TQcSJbklmeP.4PLMRl7$roI0KZNK)aHnI\-<91ReL9m`0]SIpg%.(tZ5>%LEHg7"G;mr89C+(Ch91=G>#g
%`+lo:pmI1td:R.WNqPOdI;,iRS'g)C*aI>4'6kDa3UEXKLGr>oY^m]$p]\Bb#)=3N'>Rj[r!n$/!YV6,gL*A7^mLg^:`G]'eHWZV
%RS\tRF.etYc'5l26$ScC&MXLh5KL3EGsJ(Od^/YNom")PODE?!SF-cWpS\H#:>S?%HLbH[T.*Up,FU(dhE8WRY+^&kn,[FbVAt3Q
%UKTo,"8$Lt%!76kQq%&rM#F3UTbtI-P&j!']3S^fCnI?K!/MT$!&@eE;@+X'LiI5=UQGQ"!nF"EIo*p=^2!+V>4[JsZip6(%O-H'
%^%ZX;F/.9#1#%b4o>Te%"Sd6<QI36lh?k0oqp+CNSC,B7`6%XQPJWc]R3JL@B-a"F\^:()758%E.#Jmr'4CGIbn>?i%l;AM7r\R0
%U(`dkTfPfH*^aAI!;;>p;Q/6FrQ"+UR2bFLnU@iP&1S%u'^Dm@#+4>'p2P'p.'j<uZ6d:;mPIS8eK_kn5["MG4j8uu!>g$3\S_P*
%^qA`tO)DG,@<p-[;<f%k.1X*n"L)s\[E\E+%Jj[m!TN!eiANa"%NfkHpMmPe$nfo(]`?=g_)B.=%JY]7l>]10"Fk-:5G#(iMZ<do
%4J=Ie:^DFS7RI(s1sEj7/0'6`E1h3&6289O#=DA\+W-"RH5QtmVa:'+_/E?Cko9QoLB5F(%u.P(bV6^2%fnG=GmZTgCaqgMju7o/
%oH/NAU$L&)j3Ra;puh\LkPt/:J,AiPr:>F;o3_OqYCHQ/s866MV_a5-!^IJ$WZpD`%h]PmUChtm3Zd6FLiIaD7hQ_)0]p$q;\t)K
%BE^L=Jtf##f$SKBZ]'.Uq\R=HYnu5dJ:C_)4"O9Xi`HFN'o,C(T;N*khEQ'ri#)-KZKiX3s+0td!#,A^LOl=YEU!(i!t^jSTpPQU
%MA?'#QpBMfp:of5H4T[=i3^ZiNZ2g7=KaWUJK*g`rF1.:&AV+dTuNN!Ie7Ock"8a#m3_GDC:YcNF=X!">61g7+2^<u?dSg?O)9([
%EqoNF:WC6+D$(39RBZ)IUXbKD$m1Qd%6%\Se*ZAUOM\4$mTDDRT\(9fKi<MuD;t&@GbTapr8t/s"gOQa7]u%Y6<Dp`P*fu.P%f5:
%Tt$U)\2#;9NV-a;?4iW<L6g6cs*X>/.tuXEg=67@qtCYB8E]&)*k(CLJbo7:75RJoTK*5.:nVL/9Bs:2]E'&L]Ck>Oel4!2rqIGR
%pV-f):9G@rs#=a5m\b>7`+Yu4nXN_*k*i.hg[oEX]&CZ/)JssTVMD]/dcd!H$d-i!W>]LNco+Ps-7$Dj?o<gjBqjhChh<8,2nRlq
%d50W#J6>_s^(/ZTX![C4?i&MZ&4e[e\&\H#5Y2B6%hf#GCk%@lXGOi.$>canF=)<RB?X:85b^j4Gcf@hXBs/S#\)M>3ram=?21q9
%h=2SY/qN"(CbScLpL/O+(W8"df>Bc;)M0krXpMkfCeq9_Juo*:OP^j?m<GbQ>_`<-rl<("9K;=`[A(B9[+fm8[t;j5pH5e8C_%rj
%7TLSb\0RJ]7Z*R``X!p'AG3qiK/SL]C`Y>0iFjWMLg]0i"i%TRC^t,\D(#ER0^T`/q$"<5NIF$Lp.L/65QCIBs4a1Goq29[c[Yob
%s8)?%rqWbtr8.q@L]?tlrrPC`O8o.(s8644@DIufc!gaoS)F`.]RVg!2)?gr77Bd/XK"`QCD!Vm[RG=rl=G$0/g*IDZ&cY1q>Com
%DrP"d-p:`W1],(745*KpR,k$lP[W8g%a2ta5K",B)bm4M0.B<T&\/T#-[4<t\D:i+?rUs0=U_1>KnnV&rR5;hg@JjS@`TN">=30o
%*XJ,R,)2Pci4+?+E/*Id4'?H^#K)MS>>].I+La%9atSR^rEqT\>=T.7d>liuaMn"c638`:Dm7?>k+H,aF.5RU*Gf]IO#H':"SC+&
%([0I[$K/12"FU;X6l)6-BAcKIe[GCtXP0&j%\[:W+-^]$oD>37QJVqt``sVTO?_`;RkjNtgh?<VLhq/!_?E<[g_1s<s.(icLjpDk
%k1XL]==k#A+EIku2.r]>-oK.4k?WZ/7;r_@h?78P($tVr6-`U66t0Q^Em^[hBH.OE+G8s_d,^elXZkI_Nh[J#BPr$q*;_]'SX2SD
%'@2DEQoVS1PkbeX0I#6kX[.Yj*9>\L/@(`>qH3h9<97Rkll]_k0:'jj?EP%__JfLM-.+QfCHC/h('^Ec7Z>?ki?8`oiNGhr9Vlu=
%XVf'kJ6i95Ju9N65p#aS-#<.p;HI+?\,41s(J1iY<THPX2k"[u#\O-#bYjF)XS`;Jd0Qo%1<U,\0BC"Q$;F0@/YGFsTX0)S3#%YZ
%N1+hD<GfnED]fl'bOl[Zj`_Q*BaF<$=WN$b/G8#bmE'%\i/ceng^jbpE5i8bHB5@9:^a/tnraM>6\-ciCZ7&%9K7?`jJ+]'&=LdZ
%V;<+b;K6dR!Cb7/V(X77:t2!S:cZ7bB"YrZ)L0bt5F=X&L)ll?-VJoK=KQVZ04Mr;02"<Aa]g",d3'9E59A6,hJbkjrZqSRLm=>a
%Odo9Ofh@6P[#)nJUWQ$Q9?"lAA.V02Ia-\;*7i_K1rIZj0+2ed/WW`N`J1iQB;Am%P:@R&1oXSR^pi:K/3OZ1Kg@:bHnaM5=?dr[
%NF6'^RfteWo9KnTDRGk5(->p,^e"JiJ@RFf:<i&"c$s5a<dj`2.%T$F*j'[e!LLX.@gndmn&0Y[pZsmcDW$DO$O-Y!e)(Hgg2[>=
%:YI<.1^E>uOlh1a%Ws$2ei_HhT.Rm:3.,qUh+rm,KYq<h5&LnJkD[9YK:uirVFmGb9\phHl/K58)0d6HJ`Z,P!&$g\g>lC&d,fi@
%:Bm7PS6s."*<\)%75IGlAkO88-Z'g0dF/jM4jqS9S:qa@%!\c]A^u++FF?MW/Dl&f%C%mn1CH,URVa)#K!!SU7D[Kp0<29<_h@Df
%3(>dRa>+[.QtJD9+l-rp*FW&dOD9AU!6KJJKICoSp2Y^[n+V"lf`?:!GcEQ>a%k>Se>(PdV&?gKm)FS&V+CWBg[,;4%S=GgmT#\W
%YAqN1-@&3#2cC5EbWEHh382?)N37'=0`08uRB)ItJlG1<SjI/t"@<qo3p@u:=F$bX/C[mi:XX2jF1NAF/?.!>2dL@"`+l'\(V?Xr
%<%8-'CFM-<]A9&rVgoRAU@BucE&?eK0t*ab.=^5(!nNiS7'<@oo*pn![=I@cSeWpuR$Jdu(-0q?YhehqMQ*u>o6R+c@B)JuTu![+
%+Cd\69F^#hLAW*oI!Z`>KC<_(_A`Q-'_>,7Pre@^?sCA&X8l#NmR.CY1DEAYd1K</>g,,(=Ii6%k)\bd(Ia^ijn<Jp'&1XYb(L`f
%%dVM;<D<e?j-8WTh?,.&8e^-2J71[XJ?';'YUR2'N+%u%_k+)CoDR1Fh(N/MX@1!!h!tiSXRkiY?Pp&7BsseseV`pJ&C3J]1.X?5
%ZCZ#/[M]AR!A$(XL;0cc8ksQ1aY*g?75^NM84@4sN=NbPk/X!'W!#Jr)XTAcK5RVU^i$SeHAE#(aAGp[YSda'Q5)h*25AY[De^]-
%"YtR0*4ST$iK>Wbg&d6Ebpni6P4%TP7P*(.:%m>4=rV,U/\j-Feo&gW03?+#,MhD-rZoc;9a4FIK#L3momoo*>%@P@'9[3mMTnRQ
%dEn?JM2'%JSk.,$YKam>?)d$PWmP_a[G<5\5M1uYNnHGWQPqFgOS_,E;ArB[1L<>!:V"`)R#Q?[QSP\9i=9*3;FQ=J6a6?%<1p@4
%#]IZ#b+s`BoT4,r]MBqq$aq5h0K?<<rStmg&tZ%)=A&>fA*4GY5u@<ORdKk/9bKQ:dr]c]<2LhP5k6fRUu[MN8F6e`1^+8Y101o9
%0bSf.1+fuIM3>kE/P)_s7kLT.D'$.L726aEpe[c@'a$>j3c69:_Ep,SrH_LPUjIjMNaNcVH8AP3@^>.N;7:+5gLKF[@mb,ASB7bh
%h:D!PRdYF;mlia-D%/$X^ATEj;M%BbkMi4010n<TI?X=W-.eO9EdO1S]#KuV.5`F$Q3;b'Tg<Z+g.OJC!q8^CaDWG>;c28Vc7j2-
%SSN\E--5J52AcB9<_[''7Be@`DF9'`3gKE6.C<@-+UllWXdCb(rQ)WOLJaScSpCe3-_J$t`'m+1F<dPedst0ep+VPAmEtC@"7VZo
%]+pG?75gNre9mC=X[0j@]/rjJ0O`bB\fD_.e0BDF/fYWr"o6E=2X=.^ff#pYjNT<E&5&gjX&L:Z4976Sd*k7[EVJThFRQ@%;9r88
%h_j3BoY.](a(?9#[:j[8XLZ<k6Wuh&j[.$.90\c+%tR]]rbd-TmuNZOZ/Btbgu<m8)8jPnGCJ\k/EurFj%(P&4#0O]HsV=M*NpFV
%9WRG%4"EPGdtn(Pc7SIJPJ"qGSXn]=:\t-#3+'=XKjRK.r:`]>nEP1.f%W4lpj\YmP9KP&Qk*<1g$b36$ddtLYj,='RO&sP$GS^:
%]k9Adc\jndI_46&3jC5bUgp35mEE1[O%!8eq?>4gIMG)&NFVtRUDqL]d]6^@.m#uVk2BBH^lcsTquj5'U_>1mQN@:N:$)Yd_%qF0
%qoMp:'k>f8q6jhfDY&VJ6uOnF!]8;CRr_Jp"J9M@H!hIbA8_?icKq=le!\KaT8P_hkX`Eec1C^@10VOj$YSG!5,V6;R!08$0.`a#
%`Lo9:Y&70=pYP^pbgbBk5EGkl3aSBS!Lcj_jWg>L9WW$mrBo?Z?GGAN_I5+njj39@(#6?Yi@N&A^.Q*>c@rAg\Eh24Yslr"!eZFr
%gtUU:,.e1@f+\\mqJA8p8XR*n=#:0j<V)KbO?"3(D$SA)bOdCK)k0&'guRT5OH^/6b]$\@6J^#;#-o_H?.qY`>!QGlFU\:(5NKMQ
%`*LdSI,..H+o#GqTV*V3%5p+E!pGOu=\R27'&>m6C7fP^4t10Z^97S`\;*).ab%^&:X/<A5i)<*I/<e$5blHp(r0otK+&[F.U-Jr
%nA05J\)"N$.jBLm$Q?AI+_#Ye+B*j<CZp,.l/]UMq(H[RV_B#l/_SMGq'k%1m6,)#\SO)%eR&0LIm.?2S=sblh\f<#I18nX$U`_F
%Oq%%=NFMn!43T:j6f.UiqK>o`I5u8^_rPGigmW+@KTYuS\s@'[*OTA55-7];@<bL@!@S#)S`e+_H5ZZX,UGg?;**PoQnk5tiHRtb
%Lq,WC0S@d-)];Ih0S:9(\:mn,S_hY>T8?Mg/&%q[8.H9)M..OILr8>uDPI=(GR9e]+'`D3..KmRaWodYUk[3qC;#iL<cKBD$0Nr?
%=gWV-4;f]tH1fiBK*9^<+\+l><g5#dmWS<Z4OdOMS97ViP?0FKqHKb3g4^sie23OulT7A%fq+\X$Y24\H#@31YJ./a*1H!>MZC8d
%<,fIh;5mu\/r<aATZM9sVG<e#P0nZchHrnJ(H(<^/+pee@.G"ZR'.3K3#/&QZY49[il-<7e`TVl5%3P.7iJ%9nl77%KAgXfh0;5s
%a+K^c>R5-%qmgcY^CSe9G-uVKAifOT"i.&s=TH'cC]!<GhRUOBRF^!F$=<V>bD)P[3NY@0q(HMD"T#a$;_#'AdOR*l*FPgoFSs,M
%m(N_trF^R!R!1@4[hDZlmOluR]WEC8.sD&/2f;oOBXe9$.[J..D7`4k;8R04<WCcnN;.2iCC<p\j4O-/Yhf>$\Wo\W'FM57&>"F_
%'((keO\]W&6@Jt64Y[2Jpi5tmBn'0)o[@L91S#rW4J9gZ$d].O].Er-*+mpF:4R\K)FL&"IT`TCPLpm5AGh;Lm3bekga4#DNQbMt
%n<V(/[WMWKR:`]B50ZorWr;fCps_rghaV>ZDtklAhLK;79h4iF2;9\&]_N"#fqV:,-2M`g!sOL4[OZrQW>>:$SYqq'NH[2t[Y(e!
%*tUcFcAQ-#]$J)f>u(!5GGm^AhB=;?'*o%9.09gfA^@fahe6\Z/qaGC0'3f$Bee1bK'!Pn7oAlDik8Y]1_QJ3EshhjbOE'!nCn.]
%L67<?*YTrf^02Tr."_rK>_kj/>12H3G;)E0_4gB:9+8R#=6]Es8VU4HN_o,QYE[BVnU[W74!@+RQ=3'9:nJSdoM`S--lZi9AAgi$
%2I;Ac5$a\kSFR%N5\Qtg7?NLq_/P&t2/Fhc=!SnNWbEMp9G8'L?D8%;0SJ9@buT_[\"j!SKL]J<-)l1-%@M0K.J?&h<-uChW@:3\
%9_]Nr#CKB;\A%44JIV7W>?,>Jf6\3O4@s$QT6lE`O0dVE_MEr#-CA6\RaVh[4k*k'+d*rk'Wor1ThXalFC&^O@bOFrJ04:Bj0'QP
%bQb/?Z[205TcYd'*?M_l@Dk,@@4VDf"kYX,A\)Z+T&g`?@Ce-qrnL@d)pcM0*h)Zf%c8%AG*0B=]euM(K=[MD\a:ig->Z`Ln(aWb
%nAd5(qSd3-k2s_8CVEjHamr$G%Z*kpPAd8OKDcW*\#]->(SYmnf-9pEXbI/VB5oGNl8@8PJ>;tH.nj1gD`6\I\Tt>(SfQ/JKVMB+
%9J0j@<KC";2md`$*bk,V42,8,r)`(^7p![s(M1%G!9aU%C[S>!U%P".*J4P1YiUM@QT-W:4;VNn?0Jq7n6?fOO;1_R,`ZoH"Wm5B
%aa#S&Q"OI$a5Qi;8XiGfC)0s^*32%qs5=q.jDQgq=8>!dbD*(uK708<9#!Bl:U_DNA1D*>&g!?H(#N"Wd[pru4Sd-DGf4S33ZaB.
%oFPOkjm^HnhT7UGCI%7&1o4`Il\V.X6*W6a$9?aa:s,q-ZT$qa!&U3mE8"<dOY8;)#r'\s&hs5<!M<VPd`s\07\0(bUC_<K`eR,f
%Bk:5cZr^rhG^]:<:Kj`P0E#^GddCql5lc?c""M+fhs8^\S%fnPTZ=qn,6Ar.5d1K.JaDsD#oo5m=+Hhi1$CP)Z:j)gOaFmd4;OEh
%<u;pWWkaf.AW)D^]8)(Q/e1&bk$hb?K[\Co)dPr^q/TWNDisOb?HkYkdnQIJ^ODujHL0O$SfZW>cm<<GFMIc2S%!TDG^18fZ22bP
%.Zk0L01*oW:D*;9UBYC6aXj=`qtY:Up<ZMW$umg5s+Cki%f;.G.QlXK?+-74*4$LMH7"W'EHiF5U@F\AIF&;uGSV1>>:[53HW.=W
%FP'k"TXq_M!HLmn@(C"eMaP*r%VbU6'B?nUh0j>#`TGJ>!j%.(D^=a5?%!@N.(f*$^#P<BZr=Li(6VWqFs[TiBq*,V;!&6>M'uu2
%2O")ES5OVNo6LJ91%5sf?b$?N#bga?q[FAWKqFk@UkWO_&+5Vn/EY/5p>_uSD2"Fsn;-THC&r[rH-"M3pll]?qqC'e5@$cbN!S-2
%^n"80q-;TH/Pb`91$PA5##qt3HQS1YT6CF_WcHRX?$TU5!8?9P>6LUmE'?HU4po3Dm2P9gbaACO%W(JE2J8iskhqQa(,-t:JSWW6
%0_W45KU*(qhf$TTVjHoL$lVt$m_c1Z>gKCHiIns2'F'Qe&6LK'W-c8FKo$IicNJ(3-_LgY&^!;1nb^Sq7-aS#?Wf&=ZGDm!-hHD4
%c8)M^ZO#a=D<W:8?/j<rhghC9R!WbcnlBs"$`&KF!*u./96EJI\[/Z$6h=SJrrlMj>t$<II+;i<+d7]1!m&$Ah(F7h6r!2)97&:B
%2#rrm(0PT;6=9Z`%Z].YQlVu0/;F=c\djI?Adf^F7HbFtK,p"WnB>Xc.W;-d%>.r,;-`kSqs,c@YWb2M>L/Q`k5/_F'QJ_J5pno2
%s4G'!/%'\CKHDT3L8[\6(tb0'mM:/>`>8^0p([gI15KSs_;[t!I;i:s]5La'SB-k]"Dc2uS2,"\TjB2BR!VD]"GGY/fGi^u8c@*>
%,G"hmR>j$ObQBi[L$&c:r=b$-n:6@!$\e#,5NP:^<=a*S1-L^$ZSDL1rnQWO-;+okGG()O,V*(J5sf&`AZrA0m%P"t?9H\m'l)uX
%G/lPbl+SH[l+K0)KGlnB$%GVjo3]m@DrHs@gkf,OrSCa?^_RdZ1Y[2m!LY8K):j[3?f/E^K5RM84Ae],L\t%J&m])VSP2#s6MBIo
%s7Jds7@MXCFFVKr@P77,/*>9d<nVMS=#*YA1*bU#j7lBaF=O%p,(JNn#O#a*.37^eZZK`e+/2T/"IaqgmQfe9A>qT@8h4KQ$)&V:
%X,")=)(q35HLp_Hn$AeN#?nH!_@Z_\OHK"DoZL>!a9/"B<KDE$C[+[8*l"%(b8pNFKM9?ZNo%?UkNu'b#Ibn_CTnieL;:CkcAB@b
%_ep[6k=E.'ba/P[R<OXKKnS9&q[=aUs-$_IP/1(jGqss4D#&qsW&SYs8hY,kCq,Kas4,d)Ih;K\o;5uNr:hi!(6,`ohE3dY^UAKM
%K\T&53]aUbc(SGupQb;jdtmO4TZ%IsiEOIs.U%/U$d9DlcL[mn/HP3uBS_Q$:0q6u(2gcuX%^.P!I]aWU6d5?"6`8qSXbb^DA2gd
%2L?^ZO*?/[<;Olsn>m^Vj/HTNOkcB#PEN22^o+/ua%2/2]nV]rJO1^IY!#(9JP2Y%X\`((7:/Q*OYR[;S&-G\!N=fq]*,mMR;i%s
%#f`Rqb\T(B2An?%qmD5"$l^n#YZ^>/km)!>kK^#?apOr:*ZMWr^rGcH".7B)9a:3cMGHLE5-_u#^CTJUjkUHrfX6Ef?AOcA;Eqi]
%gQ.<8iOlA.<d>)TbKrb&'i%tpVa56WL>^?FfPuSEUD7j"-2&mlr)gp*foBWFX50\pcf[k<D^cbE``U+#\*n$m+mM@*2'UtML)Fn&
%@%#TSI`T,>5?#RP=ru@7$e?8Mk,pBmKg($bA)%k.O]GV$Jc(a:FlZ<<^XdUQ^q9UVE@-j%<U^"\GJSn9*26:a1ud>CZXItX*Y-st
%m?.uf51V7bFjVFf)PCNDGLMCKdEX\t`R*?0'+iINTA3p"qM>t)B9IY%Ef(L0:.WpKmE+4?*mCC'@?)XI>F0&(*3QptTJ/a6FLX7[
%A0N>j!&r?^79e=@P/EpDA=SJ3XT?s(4!/V9B8t,.UnL^#6Dur+RE0V3j/ik`rOtITb.n;<@e$WHYnnqMXX!;r]ts+k,KYL6NZUC;
%#0(o"=A7%kYd][aWO`q%OCsM3!PO-k+@BEV0N&MoRC4UT`b+Ac#ga\3/PM2%@4("-R%UDq&d]FXT/K(qYaeHU0@(^nO`2dOcHY7D
%-Kp&LdYT@O+CD/q9^KL"pbc`_'h<J%FSt/:=JXn'-g#LK9RtQ@?%QY_CR8b;JmEq"*qdsW]k>L>WdZ)hk3Pi8].uqXc.?oIG_Duu
%J>TmSr%&[?-!\Lb74@ul-ic3JnP`*q-aZ^U\r'KdN-_4@)G0fGbrb*:3c)s6A-C8CO'K1Xh'Seo^9\7'>XUD,SPD4#hoO3hY2"9"
%e9gS"^t9X4>l9Xtni.I.Mk;*33R$Ec,3R(]EHM=r0_ba1T`^se&c)"/]3t9'D4/Xn7^@>8!-7"%UK*GC[ip;!!pnXW&b*#S$WPp1
%OaB\n=uXoU%X0o+7@39-3Zrn-'neRjVa%e$c.ZT:#"q)HG_&i4YH0V/aZC9p8]'#]AMXp""i@lU5\eZIAaLa'mP=r5RskNK@q@$U
%7]d*n?"\T,$(mkd:F<;H&9%)9GP_hT>]8Tu[TJ?'(PP.nrX<n0]._S21\BIIqkfWQ^%a2f]P'OJ[tRDp*m?h#m>LJ2o&N1K]/YcJ
%"DiXEU(p5,jgF%77qUF>fC.jY^gc5jANG+b&c/Jd;YRtZ[K5hIJI<'q:`T4KhMbsfqu"L/Drulq$OF<C?k$;__=0\Nk38j,?WlL%
%+u95j4h[>C[TXI&<RuP?D0[ZD7*n<&N`\Og2-:]>$:.E]$;eK(A"l(SO_uM5nessU(Z\0bZ)KE@'.]#*^Km7%b1J7og-0n';S;1n
%`\3;:+9R!NLfYMV<[cOG*Wp/5,&KCCJYVm-'nZNrB`H`dL3J*:585o'BZaKc7Yf:+K/3jHT@3u+;MQesP%=XYq/0i%4r<',d9.93
%d\(Mi(t83f17e7%!.4O6P$B?10`Nbdc:l\hU0(R#Ni8+L]/Nuq>S6TVd**;]9\QCB.OrYZKPfBe_3EpT@,(B`[$csJ9)6O:fZnrN
%L1bl_A\0a8iMCE,61K_&G<<s$(P9(uIaY;q03Z;QhdIBdTVa`\J0;1"X;2E?UW':FY]](28JpAKC54fXTPH(f,^o9SiK$"(0p&0f
%Td5RT"t1sEoH#520Ho.(,2kmAV3EuGb@>cD&Rb*pUtuabrj=m-Ft<(IG%2Yl$hsjIK*"(Q/N/@&L3h1]P>[_J+D(Xj!(hp_('9p9
%L'9&_*Z8!'lFgQo*3dh.[ouJ(':?l$A.C\+g#Q"q+:!kB9]H3p4G$mX^UOb*8AfGRKNE>AA>TSVSH/4k^Y#NM,qssL*0H"/0o"l4
%BGb`(Q7Ope%;jcJEXf]IQSN.V2+k0\YHnHR<@e>N5P.OEhs,tR.B/"JQ(_R<9Rs@?,CI;:T,n+^odY)h(P#38&IQADF<!@5=.+8X
%+;iUBi97Vqb]q<3s%$bOZ\*qR?An^J)GK-T[ehAK;j>:f3VG![fl+p+"*HOKrE_bJ]nbue4.-1e7#ic]W\)lPCQp8"m74o*#ZXo*
%J4Vkn:WF(9PW!q@ii=ab_j]=tVPrde1'PS-pfao0'H4ndiUdrN_B`i-S`KL"F>/V35WWY,=:IXF!`)'Iao;4W4".FCBKP`ZFhg$6
%GpEM,f`ia%6,qtX7`F\AQT/&;1aj98iPB7t*ttMSa7.r3<'-@rH&',SkSN[kI<.iP77BihXF<7YS;JX,FijjJ3:B6gR5YgUpJ[Lk
%E%4FT#:0[-5t%IMd?u*.j3;8BdUE=,PGQ/YYZ&H&#Rh`lM%7:pgD<ha$/WYF0:%a%M.Bq++3/>6\!o_mb)dAC#W**RCJr-TI%(ba
%(EB0KXQW&.?'gl8eg'F>8f+aI5@@EL4]bgL"NJ.G\0GmJ#%"kX<f'=M#ur`u"I!)KZ,&65$^A>r)ssTa<YpEuq6,hMd==RlE)J2d
%Ncd>#okc)<AFo11ji*GdEpDr\m\^_(IKo&4DFK1hGg+'ph[fnb5=q3?3Kq;*YVYr-p0q@kKA2f_+8kVl09CF9q:Q!KlmMEJmS@s8
%g&+pYZn.\NpER2iQ"6N`SG0/4gh?GKmu;4g(%-)]S]PH[BRbDh)I;q<GkUsp0fkB#[aFcpb8]9iK+IS1pMC1cd$V.("\9a2!.'u=
%##^H,Ud#gg7maDQod`Z15QMMc.97K&Yaf4<:Yq-gY2*SF?&Olf83,)j'Xt8sQbrb#(!F?-qjl_pk'hnD1>r\%`c'6p*83bGo^2AR
%U[)Jf0tJUtLs\6QZlr]epfkSu)GYoSqdR)kg(2j?,gO[_0&UJQhE\]lU8CJZWVO2\#stl\NZO>[IXkmEG"Y"sTBJ6",j7`>@-B2[
%i[1n%qtJKB^uMUgNm;1WGfT@)j!>orJAug"Iu_>uV%ko%lf\(_j(**.@F%0RXpR2qfF;/1^'79FQik!U,AoDa=?iBEGn)>i,=3At
%nh9`X=?lO%5DNkhXLW>L20/SiYX/pE,@+Q7gi=N`Ror?n9pk?>X(Ao,_R_s\H7ZM0V=fkQdUU0^N"rTs63_5HCl-*FU=*-GrHG?q
%aZ`:)"_^G*E>Q6(/07tmjC0G,[P!Kg>-/#Nj>d(MJ"QM9&1cJl3ao=nlb<lMXPh@=p1.iHQ6_HtBsii<2:)Yr<X:4CAE*`H'i!"6
%q6BsE)'dhDT43chK?r#7<tai7h0G7()YSWfXU$FB,=2fn(<fc6js6e.2T(/4DdIWZ@3r%t4t_O(-9?Cni7r4p&g\uIiR%;'@MF0R
%`+gdI_Nrd,f9!k,'gFm>#V4?M@WFiugZ@Q@-\lhtQ!Bq7dTB.E`_+n#I1]LLVsP",=,J?6n$\'":[0ZRs%ZuS]J#0EXKMr3*d6QT
%X5a=uRFn5_$THP4GN#*[h"odk8-WkN**uBu"$*H.m(r3('k)f0.)_CC=SdCEfTO2,Na)If=DL=ZO3(dXF(=U2h#u+rP$9FMO)M4F
%Rj?Q$lXhK%[69#6<AB7DTqN'bYa=&r+cWnt^O7`3'DKpWG?'hXesBgeFJ*FN8TGbP2c\$o@spl`L4cCb%nWiENFbP3PsRh_rpC#h
%72`2q&aY-T\YZPpIdbjIBZ)Q\F]`WN%4t6@rjM2Nb$aU$@thn5.Z$%RkVa=-+793G)Z)g&iNgI;W8fQoUp5sYG1#BU^XbmbK[j^0
%g<)`cle&*[Q@W.D-S*O4qZie)_lLZb5^^<_lU>i@G>D^3UmrW4NF;:c;cpAS]HU=4Y!)TN1d\8bK_5P?=MSXLMOPbJG7\2*`lk4j
%Kf+S9g]FRn\SE"+r'XZcQ<:::`+hRG_.^K4LbUWpq[B`@`40OrCZF>s/5'K44aBF82Jn;s%^k.*UL?]0EWjS3GCsakCERrWJ&9ej
%E_klF-9Fg_AJP??M">gGYCgi)F67B)Vr'mEoJ@8uLJ6%9AOQH<1H4uokpb.*goSHNAY2G>Nn1-+e+mZbjdq?t(,BNMGHV\5fB^^V
%as[42h"Zb"4f+M]1,hmjEEVGs8GTEYGUBDf?e1jJ#l(`I&c\`#ihi+<l+#I(YY:6on<.uNp8>jXmd8YBP^iP$O54kQ:RUp%3s]&$
%?iN;HG@fI*b84OZ8a7bB[.U_l*6>f'#_%X9AY3"OJRhRMl!uSff+jZrB=t:X4(Os!1(Rk]p1`'D1>rR6b8>XCHVESp?l:KM3uFu-
%[^bP#Zh$S^kbgF:iadA$4.dfh7]HKX]FISl0pST,VI%^\r_qafnXRXigQ=jhNV+mDq/:ZDXZ-_=3,cN`"hM`7UUqH3"8DT&"93W(
%DagEOho`c"?(gnc(1aGo%O7fdBS<-]Q;OB'PL"R4FOQ-MI`l(PP%HqKm+!uT$j#ON2ljS%Oc:*#R_9rod(g_)356(W6F1lU5ILYW
%B.?/ra=U6EI&tVHDtYH/2.SU0moF?.>C]'L=5[._XC+Wr`auDa`NR=j'NSi&^a4(H74uM>j^Sb,/Ng+sa)%6#FaA7Ek-1$23RQj@
%!e(`FP<YB+)hYQ*&n&-AA[):Hhts4R18[*Q/Qd&l+so\/@N^<2ruk1=WCR5H[XaHEjBBW6Ks&C")Jd4ROhs_9CC"q9.a)@5VoW>$
%7S60)Y!eMjO$59B!0"/;lZB8aP\N-:XuEBJ6KXn+U"9i()k!S>3A#ZdlGs%,h_S#6!/m>_T=2-]1^$j3ic1%O$t)ajc"LeY9pif^
%ir13I[V:L,$)$c'i+m@G:[E>R-3t_3/R,qd-^)m*>97I^;$!EbZVD[I$d$7;rQ"T8V(j+QR_cd^#7u*oURDH4CIeJ<]lPBIbPl44
%*"P(uemR7q+ds%9i6Q.ql1B$1I(b1#hU0.nM"1g>OhE-bPJ6(^;8dma)SEaPJ"U=qebZY3<i#Qpd*USe*j%\Z+'_!F$EJ.)*Dpbh
%1#DYEbgnbn962-QU&,n`dLdl^OYBgDe3G2RUH4-Hki/TQUR@t*+\NucM4\A"&39+2L(TI)<[=WDr1ZJ#PN*>qm`9hneY$W=q7)p#
%"YQ+Edef(\l_1W3b'dYP]q.6:6s9T[bEmX:<mTin:^br:/]?9CTLXWdE.%WIN_&-BZKLfj^geC.JHXjR73odb6%S.%9Qs_F(\NPq
%*uc=d(#HZ/3'I(0>^C^ji1D97IIZr?7mml-rmXU(6(-><CeD)sf^kD&BC\eLF:h6n*A%=?11-^$]PK5J$$qLm?74CI-rMsqp,gX;
%?=%6B>W[=DZ'Nr$:kg\1%F#hcQ8d[rep5S4&1c*UH6gaI>QfqBfk?!bS:HVu1LO1HRXJ-H;XX`.R<hBBd59mdBA<[j]J7p_HPIpf
%!S!pI:m2o"Ak:l&0VhtGqc#gMY_ZD_')Blm:MdLbI07t=8s12fQH#^7R5_(OP>#K)iRrQeSLFu*o5n*3-.t]tbo7Nh,V@`n#UsO7
%aI8:Il7!Q\@,nm?'NZdS+Noa`$1alC12]N2Q"He+=qYRenM5gF!"%f=@YJ\?;H9,K2-P*GAGRR-E_tST\+SD4dkleVMqB76Yr7h0
%!l5^kPRTcj%&(/-AJe(bod(6e?_ejPp?#QL-!4GdSTY%@^9WrtPA)KNT2)6mpK(iC?b;lH[%/>I+hU&0D@]=D4q]D^H7\6b*cJ;0
%Vphrb\P]Ef,<\1#.F[seB=@PEdGRdK*^RukgDH5a:^XDV[5(:Q4"t4kgGdqoaIjg#Y13"\RPQdrNQ/98H;Ni463B9Dh$]J9M1Rpa
%a$pG@KN>"bT$SfS=^;&aS4BL$3]\e/R.m(@??k=qPlF;ANcO+K('i:^6&n+@3&p\4JV%6*%]5%::rs(mliST/QLG,TNPJ]6,esZj
%["?L6*F?("T?O<T!R7Y&j)D%3P2T'&Z7;g:;$CD9KlI,YUfBY>V7A4_*i.C,OmpLrqVN$tXk;/h+f%SE)"S!Fn3NAI7m9[RGK)'7
%ZXE49)S]$Z\oa0('>Ge>]<"Cs!\N>sE3f?mdA9o(frO,S0'U@^@Sq0^'Hk&c97m^S/s+92nIYCbZd5nZ$B9E.@#?(m.n?-&'&r,/
%TF)>Y*`TgbV*IQYY9&BJ[9p:eWl@A%Vh$Q"ps(.A0@875L%^HJdCK\ZR/8)I81eVW]MXRsMNe0]qdlj(aInV!#4[q0+=&*eZdVE*
%5E0Sq"(BOhIoJA5CRgeE4)Zs[0D9Lgg`:9<A7M0N9;=`E*4Dl*L!$ttc^UAJBfq;5].@r@Cp[oTg5.nn6elqg]rR"A_Qucg$J.Q=
%kb+Y"83Pi7orA.&g,7-ETfBu?QC/,j_leC0!j0_kL&5.VIRXU=$iFTQ4,)im^`;Qu7n]eNFUFrOn$U,=RHH/OPc5.c>q8MT6(Lb:
%h&72,*Xu<n,'ap"`&!#n]*rEhHj#/p1te+U1BC'@74BXlEN9*'Jpe+=$B,AV?41><$$R9K9b'np*3bI>AJ87A3L!5g4+ipf<K2"(
%*6OGp^\gY"Se.@:UN<>0QCHcb"3#(e(b2k+Y,L0tV>WfoO\7(JNOm3Da8t.nJ(2J-h9>1J?_ZAp_0Z1LC>/'Cdr#s=:b\QE<P'\q
%!AJb"cu,'R#X`=h!`ITeS/+p+FG4"*"@urkad'9=)aRfP)'g1YOe5A88b9BUGWV#8[L8Wr`oK/^O6@jh%Y#.0jdr*l"h2u=kp'lH
%+]D\#Ra$C$hb[@;RPc^^[)2]unR@u[kuci=Y`#R0Z0]/ol#DX$"qI4QBBgK0!20\"IR+NC+!AP($5"!*";h:*eFPl%4#,Kjnn,/$
%]e5&:'_dd7:K(F=!JO;=q?VOk/'f?X.FbXeN_D%HS-+17@BY"ul^n5)>TDiO:!<Cce`qZ`)Hp0<hLG0%s!PAgN#[K4@R/(oUW-jS
%!RbZ[.kYTCd)FR#KHdf`EcD,.lf7l'dX4/[*9f_TiqbVsh0"Iekt*^"@jATL`bZR"]XZH$C&4ec\D^b&=SU[9Yn-VNW@'RF7@pm[
%H/@"]"Ogj*43r8Bk..K)B:,Q1ZE$'[?o1#Edp4j@:<(ug/:I&''+56M@aluh@NdnVKZb'%K?JPq-S&3B,N!3@DO`B76^KCJX]/J%
%j+JG:ha'M&ToODQ&mMN+g'aURDuXM(qgkC?)S[S)X'\/YF.TVE34.J\JoEu1>5S@-Pe8C"=3U:OLkV]iq8>A]3g4BZ)9a[Oal('+
%ddc8&!%QeLB1DXXBh09?im.<(Y_]KU[@E9u;TW*+Zq+Q!S56\]&"pI.3St-D5qO1\3\N/L;m,57e6Ji?O.(-1[=!qnEH+"2E\6/X
%?+P9#3M.Qt[[-AOWc[d$E^&Sg^)Q4!O\<mnP\^)4\15/7b5%9;q2e@`7QI)C>6ttIAbJ:[Qh-cND>`a5.[VD]N7>3Mebj6t=!q@3
%K[;+pd0R=[cmP[N/4t$dUJXtG<fpA*W0.Z^SSUjZ`O<$$X5j]L[lh.tZe5k%Z:Ygm3mFY%pr#am6A_1!+L_u/D"hG/E^^nS;[?"t
%^PS<C8<m/?f85!P;&J;1>nll(DbeLDKRka9`iJjU/)FAgL[fJY<!-Duh3+nt@pl5Omno7F0"2"(-F`D&+m#r?%U)e)Pk.OYA'HA%
%@L_;YK)Y\2)i<k1^>"$Tfpu*Zj`tE]HLa^>h'cBKG<obt/X5iVGm$0Q,G/>[o2:5C/`WcDA.-@5qE-i:>/DY9]'2$ErMYRb7L_L1
%l?A8bLNMmLbgU*TOLj^`8#?N2%A\$;N=l9&(]`K\_T'*?5T:AMA/FLk19qQ^<5@hG=";8$Tah3i1WS#1d6treZF1URpd0$riDFHG
%dSj((<j'1l$Y!B320(%?b^0esAdJ5i2p:kCc*-cf<)ocXH*8SI@9O:54XKG_c""9HU7UpVV[dBT/kCOSK30'L[1XLVNet2G+Z)&@
%6p$fA9_KAu;_D>*b;?WU)Ut-$.c8AAqJK^_<EZbX8#r'$<^jf;Z,UK2\aD!"mG4uOAuNLIRT)?<ko8RMc_o8<kNAk3YN?A@b//,%
%jQSe.5:?n,9i7D\&1a5Q=nsH^rc%0OffQ08;'2VXVUZoSeH2u-:2;[QNhoWKSuhB0cOmR*?)]t-.?=IjUcRN>;$2LbJf$O&\Ktc)
%XFns]MTXNhM--r0cmg><b(Y-C"a%YRW%:qS7il3mG[5Jr"]9?;\c5qIc$`/F9cL,i`e$TJph;oKXC1X+7h.MnOj/R/fI_qDq)%`#
%T;\hj$E#D#UKm.%\.YjlCN5WN-&g]*:89c6Wbh;s:=<[I2q9^Z2^2gcf.>O1hY8ZWc^gp]LPG"eod\'T!/BkJoo#[/>%*1lHTdmF
%oS,tj;lb\c3-p4c^8!oDC[afe3p>_%,$udU"r7USkFT[]'m>]TQ,][^#>Af%f@3E&Pmlmrrdbsde?dVOTg\6^;W/]p!fTUP"tVg(
%MHSX%O4#3]Ll9q=-4X1qHnB;lTY`HBq,e>$&k&KqicjptB=f'SkL#Ee.lUEsjb,m9.>j3GQP?b5go-ZNjA`P4:RhgFjDDtY!Y'W[
%hmteR1@N/rd?$qK7V/1hDU_Z:o+7?`lXSHqo<d(n>ZdE7eT_@Wo?OLEOf?QgarOFdUcUO0e5W?gl)n9ZVa5H3UG@ld#LBRed866T
%U\W,uM^n=o`o`b0>e;c[7X,b5;ndAD^(=RHGD3n`\DCrU?/f^LbCqr"ZqF=NGmhI3<`A:[>2blVMW#2;?:q(\mPO+d]Ma"XaE=IR
%SJ*;?M!Ao#!kM,m),-*Qor`G.YDV['=Q_%R5gu33%1P(JBJS"ZR`]#OS<#>/IeJcjn1<+AW\\jGV1Od?g9jhPq`?VP0/V3&_mMIg
%C8Q=F.RtN.V2KVaH8$r"#XFNE7Y9uEF[0,nrmad,aXNj+X=Mt/FP\_ckgBQ-(so_':.&?l"A[lu$T<ocAST&;Tk5>ql87<%-S#tS
%N_Dg^b18A+A4NN%A74@A#>3[Wl!C>[pAO.m7C!KI<Jk<qh:bkdA0IVhMe!uqP9O/?K<EbJaLWa*\0(qVWD:tX-K0>o9?bGJEYqJ?
%C@<H;H'6A)oo&D%a6'BjGrONHpKAR7F,TU"R!.kk4KZ?\Kgg8G^M3,e,t3*W8JYqSjXFDm]PSipI3lWgU[RjPS1*R[A7J&XM4^U$
%,hhcS$(%Z]4qO0[F2m;3%L#^P#jn@J-D,"(o90o4UXXK7:bA6('B76[^8K1q0d`1ZJ@)KpPiI>+oe(TGO-XlhI^j&dh4s.ra\8DK
%!SnleCs5PQQdIL*SfS9YW$OSTG*:*:g3^'dMOd_VO7%SF^D?P-9KCV%k-CRM/sl7^i3`s[*O@`]Y"g1MFGNOk'W+\,QS?.q?Y1+"
%MD[gg87C1WI+!8ta/sVhK6,(M_RPj]]B^m\qiRc8eB=I4U9_C+<kd2shF'Pj_tp?;lrS3tH!&$%]Z$BdMcF#*#B/d;07;j4U"rQ>
%'\\eomVn4<<bEVjQ7MY:RE[sij1B]D?iNj"!,eo<m'lA(Up/]0pCu28q,FNLO&.<BI-Sg`/Ngb4pthI,ad.oN5*Wt]F<XOhhU;2H
%-X,;8;Bd7>1p.-qi4Z;K%\]T>0:Pp>H82OW,cjsW"rE=NnH,b5)I/`'g8jb8"6\el3PTjK<R(]?lNjj3nn:(fSekd3][Q1:\QbO"
%,WrVD4ek[Eom0Mj0thm>o6NR!'p@F;<]OMn/$!2:0m2X3j>G`$+tu0Fn%q0XAj%S>83hlpc+1]aHI3)*CefhOm$>f]$;,a+gB)Z6
%8Xg'8&d=dYR5ZEYjYA/8Y?"JIELjs1W@jcY79j0O-WS\E1tAd-fI%CU@r-]H(A:="p$jrRY#X,PYjZk^_EM,QH/6?ObJN)($i?`I
%'.JLHYcpo237(ZR+t[bn_EOs!5"T=,=^dqeGKm!5?E^S/WiD-7`P#G`+)N_>WqtAthWkpM8QGHR@Q)gfm#r>r.boI&_EOCTeS>up
%8bIoH%:-6C:ML=6WE*(Mm$"I7;_arj.I<6"Fn;(tB^1;"=uV?m/F4%&JqAJ0VC<IBHC:Y(YYPMQ/h-.NWp6@gn?,pH-WS]@,CP.$
%-&$bF!$j$p/hQGM0o"M#Of__G^T^MVY.j^+I%o?6Kmcj!IA1hTCD?J6N=r_\EOEYI5/BomT17^:Q6R=6IhXg3cRnLI,3_REK"nJ*
%5%1&tI)HtX,$CV#.'\!n?.!u\PaWOk;7jhH>=BB>g'@GK2XU<-TQZ6cN6-),>Ptkc'qor3T@W#4K@;<m\NQ9Zq1Gu\+`RdL_Y&)h
%dKmO7@QacE(\h^H2a+jTpE[R^1TOKW!qA!^$Jgk@cd:8k1iJV2VGd7hkVB"(.Ob_1q^p3dfG6HkD:0%TdrY>WJqgF7mJQQuon7$l
%B0@_Nrhhp%EREltgq6Lqs%d^8PhbAM3qK&k^&7=gFGteCrI=\'F:sr?8Hi&"A[gm7r/Y,H(%;/9Da14.rhoR.]3Xg`:nBoEN8KND
%S$UQ`CDr)"\/Zn3MgSU<,lO>IBL(IgrSj80g%7`sg"iU(n%?6/)c9c&mDW)926!sEPLWSFDd[U\g'e`BWQ?Gk63_-R_U2E46qNj#
%.^!N<8&6ZfokN27.Q,g*rlpjbC+9PRH;^jF1ekO,g/>$Q1bD;[auSi[$XT_B;stHkS>:uB?!QTOT[7JIK'Lhk83TC6h]7m3\;0[1
%\O5qfe\5m?*X5e2_9^^oh@P:%Yktr4#^lk0TYFYES*5G5g$HM77W.df9aS.X([/.d:-F)/(O5r<"XbTu="'">+6tJ#p4MKW$3732
%>`bZBE_#W#WF<\Im:J`:\A,SU&6!?N`JsF_9+]IH(CWYZ2qL%/J@]5dahm5;`2`tQc::#Vona\"1f4se.!1eP3#N;>cGu:;bX^'o
%J"cqJ^-X^Ep\lm\jQGQ'mero)4QN^Fdk`*-n,:^FWaB`6T?-ah^&%3!BlnCahou<@#jUohj\0gjl9BuQViH-(DQ#(IjA/0FJL3#)
%OLb*]24[6I[;T,,F\8u8HiLXpp^p.;J9J&0htNb,CCe_'OA>EGnd<c1=RZ$(Kq`hm`H-`l/d+_aa^V#tWdl_mY?9>#P-o@Sof[GU
%TOK7Drp'BJc#kc`@lA>GZrHIdVYSln<CeDV[M)]=%:m^Wc%T,58/4rNIpJMG%4_]V*;MU+Ras:M+Z(e";^'^@AD0MjnTW]7c^r]k
%.]#J3iEg]hV9nG,]C"i9Uq/ilhss73`6jXE?;%38.**MH(<TpSb/\H7h1^'d]%ascNXod#Bs5/9lT\BB5,o*d?/m\6p&`&\e_T@M
%?J,c1Y$=9+me.p66WPa5qK/1OK=Z2Zb:r1"&KHXR(f;Ns#KA*D[<La0:4A&_ZJK=TD^MLOI*1.1gi#EJ+n2J\V!8A8n&;9PRPa-*
%Ka<Bb"\`F?#YG.?;_:166"M*OId&feOY,PBFKsV*?W<G;_lJc[0+$DU5@_2S<ih*;jJibYAkTXFrt)]M_Rd!rq=7$SET`\/=u*iV
%Mm-(e!HU,(AaGi,>tns5W0(j"jX]pnC\VencgLLbMD";)eD!Tm7aA/]%Gs]]Kh*N-Z:qDIRPIu4k1d[]r_osTDlA2oA-iS*NVNLf
%-hFAIejrq?l7'a,&n.VX3ES#=]uX\8'V:6"Ts_\60(ora&peZTHU[=8VO]X<k:d>fYtmk@US/]=>&8O6E!n$9]H7^J6*U5L&rUI!
%_8"tOCo/pQ'C[km(N(V^[:X(.BXlX\?Fdf8,a]cQImeVdH(BdrnpSYP-I1H:%[tdK?Ua8+?^J$6:?'(C'"9,Z[GXrd2;qGe<Ge!(
%[i=_rE>fJ!1mc7^,_Kio.L$T:f1[cK=KMR"@h'@AGUR\",RmFsT+DoC"/mRV9W:h9_<#b#buPtmN:)_U"WJZ9<Hq;#KW;(lEGV(`
%E<5QdL4)RWqDMJ^bo*uopB(50PnY/d+'D@l>TkX]-u_qsq=-:ILYaJudgF^ZruMkN6s?NMcRL*oBfKCbg+6:`c+./?Ud4*#]$=JW
%;8bQ(2tY@D=#oKUGYLt[<7E!WQJEd9[=8PWQ`bkTW$no@T_H)E@JD/<F)j%S19q]$LsN61"*F2MO(hNWa[/gjW+O@INj*$qbd=0L
%IBU&I.Ve%0/o!D(6,(W>l*seHVRiF)njNTuM@p(9<P[.]j[uqW_Q?CES*94M7.gr'-r;k8CNbr8.:31Zg9DU"8/=NR]a=O?1/IX-
%07p'%9r*\].Qa:aRAR7lWf,)Ii*Dpg-WSBr*j;`)#5RT0)'t,ClOej";g1gmBd]_B&V[*nmZKtl?#5L?BMBe0>3cc'Vbf;\>o*rB
%Vcmde8^pq)aNPUVV+,c:d!O05jQ`_X,Z/>?U)$O.Td3KN4egXGSoRD3Rd/0I?/j$7ktFW6ahqJ)=eWDlWt^V/]<(KkmD+\H>ZOBG
%S'#)c=eR5]p92'/:r\^5p18rh_KP*L<d5iQ%IUF1XAHF.rFM<18fLT1=VXi=X&4'tS8+nh_F'll>+L$!+^\HEhKC<4R<$l4LWV'/
%XG4I]_F$cOCfe]/Wa=ph.npg$Wh4$KPm\+fD`bVZ;=Acr)2:+Jq<SJ"V6"t1[R:$8_*o.]o%5=0gYpC;"_IOO,3:"F\h?0F^?tFP
%iqkn'$P+nLF_\VZ:q6Rf6?@hg&!b<@1a^,??[/N[hXe#\%gCGAUgchtT[1.;O=MN>>58m"1d)Wr.Z^I&IrinhLN8e^e89tEp'<K\
%Gc8:QBhl9@]C8Y;4bX\RjNHD'GU$(pG1MA&b"s?=]$@qW:^RQ-ad"fuFBj'h6$6Mo_F*GM(clnkq1XUH=UKOf"/296iSb)%"h,L%
%Nt$$.8+"/\jkC86hO;_(mq8bGrJb!+gi_mVRFUnD,o>"=*U;5X1)Cu]Rg(6Xe@?A:8jIBqMLb[6&!`h:QBLIBn5/qh6`$>?I3f\_
%dVXc(::nAsLW[(H1B,P;(EVinO1STo2ug<RbrSSd_SZaUFfcH$C:^>4nd>tnD`cJ:ii67.W:QUtF"]Wi64k;@-rUtXs2%.&i1%GJ
%J2CPVW9e[P1tT8,;#.Oe2&B>@WP7A/LGul(ShI\E:u?7kB4#m3.ZP3[M;=\)MgKL'iOQA+3\NTpJ:a9e(M@hE(EU`;_<F?.-3<8g
%$P,+c&qB_2LWX$ZTsD5e_F(:X2U32(>1V!1n5.fMV\>=K^[P(Q]0D^Tk?`B]`AF\'QT?`]eEVBeGi>@)'ZGt`4?Tkc"h,LmBJ-se
%O<%TJgCAK80UH'iW*H.AmG_GsiM#h&&"dPP?$IdaQoL[_^1AP#n5+CCi^W$#,L%#G.c5Do6_-)Vq1XStT;7BekoFsG-bFULer!P^
%[=ZPPC-68lR5J-9T:?CJIZrXsAb,e<:@F:/W1t%u'u^q@jH[C8nJ!Zob0d_8U1N`@ZfQFaGoK/-*U-(F_ceG^HQP7,Jn:foFM9nA
%0Q1kIVOG<#/u.MO=n,n.NR9h5gBINPGnm4M-<D;:Ve:e0]s_.O5?Y'MHd%k,NnKNaI5LVL:S2>o,^q<"4Z%Uk_4P<=/KFBc-BX'm
%cVsH%NPToin<n,FT2X546`<*8&<FZ"(E;mUl"9:5r3rZSJoU!cCmF4$M3MlK1CX<=maIZPUTs]`Z<I17;X!i?X\uDGkN97hp77#5
%nO9:OalcFr`TV:OdRN-\kJ`kY>LQ\/>K^KpY=THZL$i.ArFaWg-R2nVDb0IB1a[k8[jG=GfQ#bph-H)V*]5YUGi.@@q7_PAn3tUM
%)p!VWfD'-0(sPaGG#2bYGMLidlSafrpoPd)Y#hIpKfB,>52>Q"IZ%'cf"#X.-(<t_f1sc"fmD]1h"_#XUNn^S:18E`Ppocl*aQCn
%,><o?fUrRCA#@oCggV%.$@Zc.L"?/s1lVKTbo@O[A`D(dlH-X<'W<u?AgB`THSa`d*f>No\m<)YUM`9VY8,eh7lo.>7XKn5p_nVR
%PEA*HIJ"Q>aYL4aXk?;&:POW8pt_VGBD9R[K7UUMe:p&O@9@*o+/Iq>iuV'b=`<V:VUk,ESV<D:)1DX_2ch&&<:$?R!6JVucU=E[
%n%f2a*JOek6[OG,/+X(VU$+:?:j<)VL)m3H)/,_d%Xbs6Ts%jTHeX1V3=k^bd9A0s*[1St)0=qG\'S>0g<,Zfm]t,n9NQ"QoSe51
%4cJ"u:B#mWF2C+[o,eCX"T,tb6F4k[fOm24V,I!lei5cQpqJuH`_>D_(]V<&0P)>Ncm=cufoj?gVpL$^h*jPUL=7'Ho^%2M!F-N`
%U:J7aMdp'940TXP7J!`dEANg;kb*&tZgL+R:a/*ug;84Zj;>WtLXAoV00KZF5Lfc9$rQog(69Jq+Qi&mco;"^3BU&Hm5I-5NB\BP
%8)hJ&rfrt.MN-sP@ZKs5&kEXU$@t''5nbpIgh"(qQ<,S-.<nP17KDusj$8?jmpioPo3M8M2\4M`R8.ACKo8=JQ[No`MF78Fc"E[@
%(<hSVr1&-:)g[i>Ua(F3f3R_o(]as:XMJg,C')2<M4OK"1;13F-c#McKDLg\op=Y.e+\81',C/]Di(V-!5L,kS%-l46YMe3^ofP[
%E%lMK.s_DMB5H(qOX53I&&rYNA%ON$(nO[MK3<_m.'Gq&R^#*M>_FPUT+PUVL0i\]mjN/lRr,7Q`C(m=I8W[Bl93P?0(nC&YdNDi
%-hn="Gk8d)6CH">W]a>6Y3Mg3k4SX+o:t2n3T_lc*c^!B]roPZr7<OR8LIEL5c3,M^u>q'#_L1fA4'8[^K]LM'dh+r.-F(I(-mm%
%o*#QaYM#\CLsh`?\2,G.S$4?0,r;FZ//0h8*VL:JC9i.EV,CllW,,*']j4PdoN3k[1.21%%@U2_EnloYHt\n1*>6r>7kH8:n#.?@
%V8)Hq<;5(nFO8;H;"f!pd>sdf#`p):fJk2"C-F/lH2W:u=RaDFZ5lt:Y$q)-I0G,s>7[PpX_Hf#P&G#$]242AP!8?/GOViY8IH>:
%qk.BY\&8YS.GGidK#\cemFXYm_)"=i"r]N?[^1#L60k<,]bC(+U8A.GL\pHOg9;VjXX:q=jkT#S1ZcesZArA0E@iK1?(nY`CJZLH
%Tb*Oc^LnBF%B.C=Mu"<GhS@_MeI&2CIqMi[9bAjUS5QF.n8bN4Q0jc&K<^4XNOCOIb]JFP0sdhM%$H$R(63f"+/50D-j4J`:1U]'
%O6/t)20QIRa7<iZ<@N$r6nA5d_=,0<?b7.4#GE):N*9E6gdfn"NZVoLQh:LT0>QLgPXI#ZF52<_SK$KQ_SD]9JS(1dP)^9+hIHOi
%I[KB\#4I7dF+L6=1>WF)PHV&(A21j9Zh,dSj;.f6lMteS8,@<2SiNY_X-kLu(U*F(kG8Oob2Pg2^Wa'G`d.?Wgo;/[,HIa33]50E
%,m_jcNg+C.]D]geqpiBM8"p_U-#!X3f9c5V'&DR:n:@LteRaZ6=d<B&SL0DA7ZhIT*Lm1I*9RcZr!.W]7<-D\XdrX6bcuI%n=3Tk
%QT!T^51HQVo'S=k`*l_:*NrW:n+flGI[TH]rBD41%]L$oh?R"8?9)fFc^2"keIs?DX[;3<<h2YMh?d10IBZ6#^%fK+<,n;OQd.1?
%GPh#j[0P#X:N+GRIW=R$Rkp%,U(6r0YiNQja;15/V")?ka/6>84ID_F-OmsF`Giie30WM>_]:Q((>76Pr1oI<+s"W+FARGkktp/1
%F.iLFE<BmMW:sru`]U_V"'n&47GZ@k;\KK3+TWnV3%EI0>&Dm?hF"</.0kiZTLnbBCr'1J7gkH9X0<\a#/Heb,YP2)hE,EAL8DTE
%DN6+Zph8*GTX;MbVS/K*dbCfPit+!7Ek1Pb\p;VK_H'R$Z9;RJkU.4?O]$>bTN36RTFoQ[`,0/G#;_*p_V(k*WW="q_LZ0;DqpJ?
%e?m\^s&@FleMrF9SrRsY>M8[&lSn_D!O'#KLff]`m4U/)<$b6h]6+\octK(T7bk@LNC'XXNO745\m3Z9Zf4eDNLORrBSYH08%^8n
%Du`6pqr;JAkaZnGn5%X!neE7GYBEFeB6:m)g.&R'>)0rM)L11p`i[Y]ctaS+p,$OG1:e^uJ^M26-&q?;dlVptKC)U%B?59F[P6k1
%ZVi0"dDqhACgbK,9m$lN>9XnRk$`jk[a@cu'_B0!B;Q@B[cK#XTdglkRgHUH71U=Sr8GZ3429V<J^*[*'iQ]>q?C6k-GoaKUgIm2
%'eg+<A)T5nQtru^mU+5E=DsQok@A<#9nn[Mr-^cQHWm'=gt2L:X;NO(<j6Rp$VX/%7MQ8PSZgtZY&+/u(6_YV8BWb.)Gp9TI\gUM
%]02it=hS7H5e=69-.7$Ws5jBX6L0NSH>@j!m9eeU)]aR]Ncj2pB?Im&NRGps0n+gVNm_WC=_2u948s@!1%.-*F8Io)BqM";,>?`U
%Dn>Kk+'_=Og@At\9?eq_1qJFj.f>/A>sGqR>W'=G-W;!;-OljLo.+9l]aP6]]bsTD7X$`Ds(g1)W!]1FI=_6[ok?k+QO4:2`MZ^&
%c"(p1d/8UFB474br-1F,r`3CH;S.)MS$+c&ea?,\Z317d&i9]%o4#gK0lR4@9q?7%jdRaiK/4e?.K=P"1IL2K%/;Lo?>Naf8^k<4
%lCVUO5\m!)B?D2t4YN>b)Is=MR\"eJ-<>ZZ'#emZV!1c.=sfXISYhZeWCb*#g'&rqb9UTGi7-p-b`-lC3=R2%F!G^.&*>BaZi.q'
%CPS`BPGcH15331sS`\YGXSLK-i?M82I6OOC3kKWFs"SE0;ts!2Dk8!Xq37Z406U7PrgCSheNJNMKQ%clj,+G.^Ntr+_:m>C8!$m>
%EbDT<8aEjiDlD]<0<mCB3'#3q\UMn+J02bZY2S1d$bg(49k\EO,5>ibd1a5V&%+BgFtHMMYE.I2q019W2#Q-RRa(EcJUt-3r7^3O
%)<fs_d?h\O`$%&MIh8?B%]rKoao:=roD*uZk9828_E=/%SK"5'g]<j?Wo\KOFIp5PR_kET;fQIRT4.u+iEJlbA$tD6`](M1+m0Io
%h,p\$a_oW(";_Zdk:UO2$)TU+BptTL7AtQN`(lG&1d/#saN=WahV&\K=d`ZJjuS-r9J@J0^3l$-7p&Q/n:G@J8_Om`=dtt*nK9=q
%%$QnI$o/h74/AC(8U>2E!6bN-=Z1@72=5J;"['_Ir&9s>LG8Zk-k<tJdi3l"c?DCncMMcnb.)k`4$G:X*[PQ,c6i2F3o^4\=7i!X
%-Zj`D!.=@e(un3VO5o@5De6\1oi68oT\k_&rAD3TodmV`#Vj!<pX/D\gS-D"J:@2nhDc?h$3jf("PA<HnYeR`im?tsYHqY>d9sjb
%K,Fla2`pumkf6!h[PU!Qnh?>'$C+>fgRXoeaH1@_N>$Y=OX&\)N.B=D/:n*J=E`?PT&*n/MD&3mHD8F2/Q=SmmGaiJNL39W?TgWj
%Y+":$^@5/N)`KZ<j47G-de*:erYr>@gW#Q14)c5C-!2kZ3N_gZR!(;QX@A):!V5W<&T)WB<Rf68LG+6hhj.\;g<X9GD8Q'>`<?ep
%!a^ltYX_@CH,Jhe+Gp\TZHZEG]^qP1Hu#r[&7)6r@c@I3I.4&+Cc7^mUJsT7X(!>1Tdd'4rie(MTN=p'5,@Zt8^E!i]uKW:r8BAY
%5ALf7lBjJUOZ*'RN?ugSh\#&C@FBC^'*]t`kGY!LAl"$EYtb;GP'-nZ-^:VbU]=6c-*[GfGSd&fLOh'1&^CgHBu-o1/<#^jjLg-W
%^0!,jUo(%6%!7`B*^Vi-OG*^WOQR6Cr0HQp9C#-">RAY@AJhLnlBb5f*.5!\`UfUFDWAq&.0*s':kle&ca,YukqlF'q(T19LlF'W
%1&rFSJprMaE8i<2,,s48_Z4Z2M?,uqA=7V,B\Bc8-5$=s(n>h#E)UH['W=d.S8XJAbORR.VKP];Z!o*(p:(&FDPp@['R4+(.72k7
%[4=e:<b\s_OsV\*8CEb!+f,He&L*CFZO#M89j%KG8=EgZdPQ/7gELLAk22eE(d;s_K]1:S"mP]W-\fHpkF%kPBgM_BXd'b6^2.Nt
%Mj$T`Tg:dUQ'gT`72e0t`&@]+e$;VOb3Z9#?X\'E'aEaA7T[Lq65;2YY)')gA7@I0$S%PUSWg(!iY<%@LMX))F3E&j[<K,r2G9e#
%*P)5jBqgItWBrVhk(0Q\q?<HTA"u8:'<q$?ej2TT]K.J52.hJQB%]n.XTuMgCL>Dm"0*K]]YOrpPqSh_2RHCR<?qlDRlD=LpJ0QI
%?>3V!kN3fkMOQ)%mXa7.T4N7\)E@V15R.NdpC?UM53c%k`I#Bf%1AcCA8hM`oBrDHT0C?b,803<$\pQcH0%e+$.O4^KTXV/\k6aI
%$-26aF?Q:spFJLJha=U8abq>Wp`rjjKD'uID`g2[.ECHThVXbUUV]lQRI2Y4<pC11ETlm!D12+W3mMUU[^%F0b`QU7^?YMt`Rs<r
%o[n47F8SD5q'ROE+m?#R?7mSsK9UsX=%*+N:\B&MA2\[G>):VICLi`F+"`Dfla2L7\o=faeG!r&UmZ8VJY/(n:4Pi\4r'Zno-P@A
%;W?ra5NUf+m!>(7l7N'#rij:93)_?[7J2RCprUj2$;^^0nT>+bIAPm3-`E(#'qNiE^]'+qT6O@Tn7EKF!qt0jIun#@k_ZVC%^KZB
%+atWQWdS)j7I:2A22&YFS@l.e:E+`G01?NJLH^?N4uFr1r:"Z-rHIr>jQd'Ge*fWDrW?dtTdU/Ll,,%PIh#$Akc+@Qda.$G&UUcb
%G^,(l3pNpZ@`15A68b]j9-Wm4b9UGo,9os-f_&3^3d$d,_We&3H;f=Xk07hRqPuQG\k=t2VWk2=e6fe4_c5\i<,_c6jNVW%BIMpJ
%)Bo2ED"+ln.q7Dg04p-%_0,?Rr8oqVVLmjSS*@Ak-\r9&O$e@X3Ne4`_%8DI1[SGD&dd]Wa`^8nk^^f'-Q$a4cZE9OIlrQ1hFM@>
%r)^84/=Tl<U\kqZ:Pr'OmJcZ>9Eg*[2K5QE6#E%#k)25nqXYPpa&j9uPi[mBm(nIq;!RB`?JtN7[!k`Z5E"98f8iZ%F)ab3O?J]<
%+(nija(i1$-'OI3U?a7G?NVs8rVJ+2IkC@U`V[mX"Nc8bHkiLCCA*`&_=@AJ$EV4se_obG.J<P&25O@N#P]ZBDhTs3h#)8pCYBXM
%,6Q2]^VJ,+)&[Nup$-^TaN1%%>i![:)&]eEE-460A7SN!p$:?M&iZ$P'm>>QaFO/'ItaF:1,<OLj6CfBaN1%$>i3g<)&^p^hY$7E
%Oc_q,Etpc(o,.YS!?&1U%"t1scG:C<$DYWM4ttS4_5HbW9;&W5^&&I&Ae2&LHIm(oa%OfH#Z#toNhGk6n-(*i>T:-jbS`\4Gsh5L
%Um4uYoFW?lAn[Z<g=YXA.?06XFt"`K0K&<$,taoZ7*\<L6NqteEPp^MJ;OR49.CCc`gf#]/P3LEN-rBm2dYFpPWe6_13bg=#G"56
%QNeLU[V"3>En(YHP\M(GVqiB^?rUO%fT6Ps]<KO-H]jGB2K<cH4'DcNBk3:?^gcU7ku>B>j5D'r[*)nRC1<*lH>u1Xd+6ITK;%e^
%M8Y0IG(:.&XWH<fK"*sMg;Vu@4AsXl[^$28X<+$=3T0ndZOuEUB%is?N%)L5o+**Xp--H]]"n2=bAK49^R9*['>)`gEjAp6,OIFA
%b3qFDU*,'HbZRgIhSuQIg@pL`<_]H%Wl/_TDB5IB=jg8#h?l0T0Z"OrMI?(&bmXti@2#0>"g!)2glrcmhW&MR?2P-:enEnD7u98p
%')`#5'7aV>W1Q;q+k1o.,bqSu#B<)oH*K\^T>8U47.6r"7uuL'\@k#7H1iE8dq"3_\P_51jMfX0p,)ZLbp@^^.&qDm][Ou4_V<p3
%Ase,BR2I@4?Dl0MAGG)&$hs]B*L2UiLP<d%<:4DBhp;MTPM=o*dX-+RE6E,]Bo`gO2/MVOD/cg/3SJ_:KNlk1!#,I-5UjRS9>SsT
%J@E^>GFStl"lPW9(/2HRlHGo^,X8UKPfZ35UO3(c*p*2,76m+Ln"lSj[,h]E_SA#/!,.U)\EmD^\]c=C;0'W0m5u4e:c9qm$k06_
%io8&p5U-Y(5_p838&L.%BcoqSLbh>%Q\q(:'*5U/`L-L0i#9*SRNUT(;O<Gq&MeG!N&6f73C,a1K55,Qpu>)[?#f6F[W?2I1aT`G
%RM?B0d_mip(JYi$:J(VUZf\u'T9N1<N>MkC.3W.(`(HI.6@AVk+dOsg?[^Xn"8<<d-O""P%/L,-I$+hm@[^>0pfqHTK"";J/eot1
%7oh/DMmUogpp?DNZFOf$,4-'0+KYtV3Tn1h9p=d7>/&a^Cb:O8<:%#s#HfJ6Vj0W1jkONMrC.*Z>W@c7o2)*LT7#D$;=4YO7MZ35
%"<G^#&0'=2m4I/.@<q-Ic@r(lm145tNYh@2D[!Y&->LR$U[K*T>L=`_aNm=_3Bs"i=[5/f0^YaOIZO\Ti%Bm`^rSRElS(kNBAN-j
%.WV)*%s#/GJ[[N9J[_dpS3?A-G+R@e^2%ol`BM1a0=`["3I=@N'm7JgFVB+jmj%ih?f6mJJZ_LLn.077i)X@/X_'m:Nu/U:/;NM>
%BU7\K43\dd9ZJWO7Dp.T_,"Uh(rD7!#TVt4OI$1@/"-o#V/1`9i#2Mr^b="nHAOiE[JAtZ5.$YQ1N]/"m8<-Kfm]J"jF/jtp]mO6
%kHbLniLKfj>1lOq:6'"IJmN>8Z66"%h>DGs$rW1[DQcO$U6/>.D'_7=b4OQ3*5^IJfpJRr+-'V9c!4q\576n?eE$kQ`sq;B?$]"U
%r9U8Tp#@*JO6[NBq"0<iZ)I3.Q]+sm@(aK(5P&S-5QFVO'oh[fKg<5s4V6OecV)$eI)D=I""q_Op/t>e,]fdLeB`Iq0`$RSahaS[
%5IVUibB<$-Z])FZie*1#4V*HnK&d*/3=IUSKW!cEis99]9tA/l-hJ*;Hj<EX'0NoA*VO#+r8KUt'L*[WUXW_LG=+-E<D1U[N,aTF
%Uf!76lL`nfc$tcar]?,MP&O22L4%sokHM1Yo(P8_caVi12K:_E:m9fk9?\0@qWJa#^\J<t;#at^5MY2:%=[*j$Q4>@p`5"%f#K_a
%fhcGdDE$(=f/iP9p4rQTE`d-:U\ui5%/nb(W'=ASL7!O,4TqnI"rlb>2?_:@,<OUs*Q"BXDgoS4)>L-(a3ANmpn7`fG_2=?(Q91b
%Nuno-ULEouoD-:s2]aLgo&E%*+m=ggE$+uhM>7#<QOk2I@1bkF"Q<1a!5QA-[jq1F%=\0V:h+`(]R=1Bkm_Oo[;LG7A"GqB)?c^P
%gi!160+`qcK'5juq;V-=i"rQ\aU`Lb0A(VY1kLJ_ILhGBUHV3QNe_WL!IP:\U)<6>`:s:pp[61em7=P8([rM=,fbjTGX(7`0i\_:
%Ege#J9"aco%!N4i@:a%no?Q#Vg9j!eFDX5K/0Foqif.7oIPdMl?g"@\lo*7/FH>Hp8uZ18fuP45Wr6T!Ohbl/#s2=2GU8[o6-</:
%0Dn>cXb4ci`%"Z>55:aR%n9ob43S:oL3`[qmsk$/>(2L[dkUDmJ#8g\a16/F3Higt\!f+O<CSMGs02N",0&)hNGN)"3EH&I6[^+g
%pc2iC-QsLUgdp1/J#D!^GdZ'oVcIF4iT`rR9k\rCm_,7d^V,2cgn,_O9X2%J&KY.*6u-\HgdBl<J&hOMgMgg\`L\fk'RFJM8&uI-
%@uRZ=/GGMTEqigG*$c"H=8of0aD(RZQ)GN=f!,u8n-0s9924q4QpUbnd63LR5D!P>^W6`\mD"e!XjmIk-JOQE*2.OqK[=A%=SJEW
%J*1/2h92dJ0!fY0AbJdO4IXF"IU]q)`rY<^IhlDQh>ALB2ZF':<,u\2<*P`2!'-:9fil&\i8F!,X8,9Tj]hcYIkJ<d@4/\V]EB:9
%e9\7L"i4;V.+`(<`R"8([TSfmL5j._`1OSaV]+.MJfYl:*c4hioBiCs_6`Z%O;+`TbPh/)*:hFI?9Z-?gUC5TO5S3j5dC?dS*08/
%[5@d,ArOMh;LYL17(!ftL8l'`\1hE6[QoI=AiK\pSum:Nm0r;%Z$XIBbRa6<:s"![N@5P`E8*-1g_8`GkG)i<\!LN8j4ngQVVHXG
%0Tq/iD0O[QYqHqu/nL$ka>*_?N7&O`I#<8m2XC.N/uQ5.Sf;=j&hYsKg;_X*f[O_%#FY5d*s\0Cqe<^?BmSY6,Bu,Un_$*o5Q9:7
%mDo8*IsopdaX-n%f&jCN3Ae@pdXA`Dn0I(4rXo(JrUS!K[K[Ls)s=Fuce-LQ?ZNuZ=R'b<T[2=qq)^C<&%,Yi^GMF>/mXr<`Zee;
%SEC$Mld"(mnPG%Ma+h\^rp6E!gPTq=g`*m$8+<-eQp:Or?ZW%_0?.U]/`]ZXVp@CK0C&\]kR_h43XW9a&/6uXUNf@=r^^OfLgn<<
%bVIJ4am]:cdE86hA,@TTgK?<5e5eWn#u6.s-@t8#?Wo.Y3dtUfinGSFWr*G]G-KPLI;f-7NVp-&=arR(3P1u>X\]qXc7KsgpTR>G
%<*Pap\]'lC`^1r?/B'9ri.D=sm!f4$+5(=AE`?XPG,\rD%DPD7d>kNgZVO:L)!)15UQs$\(ONBG%OB&_3(&m7/!43YS.,i/aJ=Qa
%A'\SDE==$N`n.XQTNaonk>nkR,fR/gRU%=n)H_qAA_<O^,\*W8Ep@COS%E@^7P1-m`2a3Vb%=QpZ__,ADG?<i]_"hq)'SUV+b#JD
%gX4*^g%_m.EUF10qcSaY/7#QboO*)n6W6pBW(*Q`Sn6,;6ipiOL^c3h'-lOF6dhH7#615crL:mLT62A;L+qc.cE^$fPW2R9Vad+k
%g\!`j+X<JYCU.4Mfb6SCLtadMc[*B!(t+!J'd$,gDPJV!A><^2f'O0V>/Wm&`YS]+ioFU]B`$%?dhjA5R)5NQ'/(bi;'OjfFuI^k
%ps#`PA@D.?8N/u?l'!g@F`cA<aSMC#ChSGlS=o8$!]jH$3.4e:a$-e`*Qh,,G"7:[UCso(;NS^q!p^S<LBN^pI\_U*WeTbI[TFmB
%%HnC2@^(:?TNLYG#H.tf*Lf5?BY&tY^jZq16q\KJ(ek7SR+.(1Jjp7N-4p_3`_O[;MiRnD1TCs<E8&#[]lnD.3JMs'g)'UUr2-H%
%Pt6\]KQ0<$&2LO\&YZr!XIs"ERUn;2PPs7/4-<-A0Pt`gY'EO9KQ^Wdph86/5KbB-r.#>m.VfZf'-o]Pl_fRWqBEFCWs#E^@f7N)
%Y%`[8jS^2#^qR&u*l0ueNeg7hpmJ:UC$_VE_2VVR]BWc8>"@>nTgD)OrYr:IZN&0WSi6M8E+bYP6cNpuluAnF0Z5D+erK4Pq2)=!
%E**i2Zm00aG%"0CnoPN3hmI2^1)M8Im,SBpm#u/9LM!,gng:1!L8Or=Ju/^G@BhIpV]+aMjT#AAD"8sY/tP?D*2&F.r"&q$JX`NF
%LVMY.cVGA*04'QlGQo)=6G(GW#AB%]W+E,!KcU['FJ[L/!srrK/H6+&N#J+>R50^73B;SO]Ph>K>df5/=3)b6rH2oXE*?P'@%g^C
%LU%0R,)@c-'K$*ONO\B\pQL0J(8`^_ckAo12.7Ji.W0(3GYpi_kRG9s_p&*oYgO@:46'oTKlQ*N24h^JiqSV=G-D#(S&TG'!>CJD
%&M\9m$<#2bB;=o)ee_7X;q@e8^gDZR??@@a"rcGZU[_s'^2;V5#qAnIbeMog!8.t.C3GQ4_]FETD%*b-fr'kB.LQXgliD$kC3b'+
%gW[725pP"OMi_;aPr$@cH#Ik95XjS2*G;+aPQmi6AdEG_^Xm9Y"oHn@+!EJom<d+)KQCq]CeV&P)**2lW\\F"Y8nXRQtduK+r-6[
%Y/"?teRg&gcmpB#f[[4B*f8bnc^?$KMphD;nfRWE<iR.Sl9WYG3ZVXjirBabYYI95n'n4f-;:M]VJ1fDooIgR'=D5N];S^)&)0pO
%rucGL;?)V)1W;6kf4QORp((ZZOmCIEM]'qJ,RQ)=_,>A:(WOPH&9\XV(\[__-'Q<8[(n#42bJXh(T;2&M.>^Qd#Li^#-qg>gu,;I
%$j"D]C<OqR>Ah4f3qYf4:C[Kp3$`(4ao;[,1)blPV&CFneg%qB8!nofE'fomlY0l[erb3C>s,H==1]VXFiT5H6S/7j&2V6?1+]04
%(^<d*D)0QueBeKR6$WQJ#=XT6V&]+`PKqpDMr,C-m=lD:H=_\Pqb@"YIo%Xd#te>;,6hg:FtGPNSACEkWXIPe$;Ee#WA`dJNj*"6
%MCsM9$B<e>"h<.n9N)aZj:`K*N+2Q8Po#8$5'LX-95b'IU$QFlFn31cFg<?2MYeO09@@+DrZRtcQ'iE1A[)]IAJF<s\:9EuBQoc@
%9?BKC@fKH;V0EYqJ-iao^I^f*CudKU_h;aY/qY%0hrCFJ@&HXR2#a/?(jB_1L65^C+:k-ico5iEl:@&/61-m7=o3?[WD.1J8\BIp
%lp0loHBraP&3!m]1;H_*$k+s64kYpTJo`c43p;YiJ[E(MZE<<*<FZ9\]*G)]hN6ls%Ppi/.CXZ-/KQTmdJ5].Gk)pc@ObK6M;aj.
%"\CJ:/d[pc66q6I!cjk1f1)>?L.'_:HB:k-6/2#L>%\KN"Lh-/,AjcEWASZ-=PCT>)DiZ(adJ08[>(eRd7Bu[P5]4ai`<^NNIQ$9
%:VVYB(BR-S!I5P_'6%aP]&8)bMtuKN[#-d>85Z-^^R-aL:'Bp64"C+"%kCMBZ9eU$r14,R,*KkWE-iGbCUSfn>sECl(H7=J`2`]!
%'!KmEqQV1j>Ra2rq>e@Jo5>CMIc)JZ_)A2XU"k_<g#aA[[K$M_Mp8F<*%K`!eZK!&O1]qHF6nc8/^Hin8g'?5;Uhk*'\%-WcF%`/
%Kche^,!d6=NC#%2lHlaQ5^dSsL]qtVW1e3h8i`g'iEcu\Ue*<YM-!OH.i?]%iQeg4e!%-\mVOlK=F1i5k[2-VTsXrB<#EXn.[8_T
%4I3f:37,`Y3)im6bdecb[R/La&m!#X=]_Q&`NL%R#kUdBfE7iqP]lAki&^DO&>h](X1"l5W:Rr*We0#:5;<no76T**=1^)a$H-++
%P)c";Z7?mrACF2?:#N8$btM'#69[o'c,[7XO[baYF=26LP`BJ0U1O[r"E#7h,DIgFChCbFp9VgDY_u;?(=ksd0JHi3^`o1mJI>/W
%Z:q:.0=cq4L;M]Og<j%+]*[Rml=s:HNKNhtf_8rs=mpNjK&<&NZE2N=LODJnFB(Zj)Cd'c4>sF0UqRa5`_n*fm527NYn;97)p(dh
%P?'#]"#=K;g)+KCUi?DRX>B(ZPU,')2J),eSa6Ws8U]DjISJN)\E0Y"o6p_('6(^tT:bOmWDnZ8NYS%$T^>Bemr1L8.epE,]T=B`
%!:>DBlEY47Y4jaYf[Al0%mlbgQ.kuZl#A'.`Xl'?LKefS6QioX-H1]m7e"ulY9!*Yo8<oAZ=25i]4$B##$[R$<OQDKbB[8b;-V2V
%<6U5JS7O[g"dPfiK<3S__k;\fPRXdELLi;n]\D4C79'GU.TfQ2D8oC/VJ]k![!b%%[&bP<@PCaB;P\/m_n\g9>7p!7-o#OM7lPVE
%S173h6?%WEEKt[?b;^!-cKsH+R'CdBDQV:5P</e25@1Fqc0:CCOYO9nXaQZ]UI8<)"fNY887nEi^E023L>l5_)@3l[Ye#Q5AY8Ar
%=>sr$[@K(#0:2n"of3jpZ^-LN%IM%rW#[aJ_fT(2\lEB1AG%*_HRc3jj7]0UD(l3$@NDm7$j'@mr*u7kbd^?X3`QBEjpb&VQbHX5
%9#i&8%+B+S\dZ8A;eRI@$je6,=^WmLs-4B(e._=?=E$>TI]1hm3%aK$GmGD^k/&c:HbaU<)AY]?fP:32RO+A=P&<OR?)bhCh5+6P
%)M8U$9l>QW?%^q.79QX4`uAJ+W&CYDgB"H"lNqa@&^f]gA%8nF>1Z=^"7;`figqB3"?3>TS/QCHf]YTd1'cR;BVgh/'R("f;D?RK
%l+Elg]3t[Un&M])#k:/r_1hXbj9IW2[F'Ml\:lR[\:oAMfF>H"4'f<QNMmC_!8?F$=t31br[#J&(Jb\lNC[EK=R)`U"Y"(R+1`tB
%j!HgUZ;!J:^;;9:kZNtn`_Q3.ah^H5%G4b"/j>h'0Nc=EX-9+:6C)?N?P*OD1enjTfO`V&!Lp)^A\5fB;VgY&QYb/_MRY4Af^uU(
%A7t>n.)%kSc)6'UVE'<G>R)l?3So'XQ-gnqj-o6J0LR_cN)CBX(g/fI]M;)>[c?@@5Dd$mY&uG:7/$Pa3*AEj2bM]KFSfU%#e<<#
%2IUhBESbE/SlM;I_AS1uUVc$',X?IFbeO7s4Ek&#hUQXZ<bH*t*GA(j1"HhE`C1E+i!c;:dH-ehAaZ[p9/e2'CUA@EhOSg*WS,,u
%7pn3,FXot-=CQ:#e$_T64Aq7iL5W=JXG;^h'cNE<87$P//h*0YR\F,)&[[18%e(F,8%^,FV]&U)]J.bJeA"Y=&?h;("7d$0o?13j
%>Fta%;Q@03F(5U]7%0b\BN9\K*B#qp%qLJQId:gfp'K8Oq#:C8=io>*4O:`sdkWMk?P[VB,m5oQC#E$MN"B\u"aJCWbYMWFG)m@5
%IOYGkE6\0W.2`U+pp&o03U_6\:9i!I,G;>nVn6Ha,__92U4)E0h$)m;bO?#;g/M9_)87-&HZe8nP>U#@jlJG_BuV4QH-+#WCg[\c
%NZS)U`1/>1i\@nYJT?HYX:_%FGn@7<%A=($+1fT+Es\qe-EjTb=hh92`T':eIM^l0oaY3H\khGT[%#ZjV;.lPLs)#<jat`phOu+A
%YOt2\'!)0F3$R;F:lQ%&E88?M'!1C5(PB>k9.=nY8tU_g#*0\a*U3q"@Lnm%6(HN3Z_]/!W@mdR#uT!nj@5dF7dN<:o`b"%8dfS'
%6j%aj1KHeZTi&5)ZOjfYC9(d0q#g@MB8Wj*,,+apHjkb+&^.o'BmbkqH5QQ['P62R*LTgl**IZ53t^`EF?7d/M"B\.=E)r^Ne7Uc
%2^E$n%G-$X\44tB,WE&h]gmB1D/5D9eiLjJ),TPXn.Y`sG/89GgL7MrVhC-(!^CjO8f\l0,j[\*T+USr[3!O2VRdsM-#T2D#<D1j
%q8`C*oC&=>UrSCG$J&jWrnTk/;[&$6F*1-ZDq<dLgLp36(5RgM91LNZ9DGhdX1:]%A^o9b-X<mr5hM)/S:22nEs&CA)pF!-GZ[[K
%#]&[&'"'"SW>,_6@i=H@#6=n04ZtVH/gL-B7@"uhCi4Fu9LV6fgRuq]/d+,&:;utCBOohZFC^dGi0d\2X-i)+U^4k0F%:tL8aNkD
%(:u\V@^Lg8fEB%4/URhk"t"[PCe).9CfkjuqJ#k\"(W;E$?\qmc>;t6^kI;Y[cn"Vk4)*H9@dIBUB.[.[/e2+-sB'LJ;-S3$X>g6
%K9th$k4H(j6h%S31Z*dN74nu1@_5E=GP_[*]-_)(&k;l(#)>at(6^H!GU"elp&`]BK6A;@G6r/BUcSgradccs%TJah#!j7,)(n_J
%LQ`LClMbbe+;?Z:QDH-nM_7t6/onYXKP9tV&3@&7?pY_u-;G4S`noOYX)JpDF-a_QQITq8EN<q7R&bUYgI>p1Ui`#0$G=`-@YQGo
%P\t8(9\.t<,)M(g.(;lRG#/A[?0<9;ddF9:2eMOlB^<NS09J#n*T+_QgH+mB&r`<:_-,Ildh?oe![Zl+g_A/2S6h;9;fs=(O'6HE
%N+nq80GOa0a@Kp4QYZ8j]7b/^gsNO??%HU\2@s-EfMJkBKCu-L-47?"i'YaV?e"`WbC'Ms`M`hYRrDfG-io`nb.3'Ld#rt<-(]gn
%FT=1COQF2(Dc[P?.Ejc.Ca)O[^o8670g@dm!fXEX3#f60j6T'S`hb.0;hJ_6F.Vfc"B%@B+o$`qmm2^_PAuq.3mGW9>kG[Q>EpY-
%pH&3rOJh29;!\j`*tEW8;_],pIi)WV`=2k$r>UQeKo)CA*a(KA2Tgg*m9KDq(=&a;gE$FL)oKH8:Oe<En(!>grf!'?oN8Vnr:okb
%_bF6P7"Z!PEJ>:J#2ESukglR9a.IpT3[8)2?S650C[amH/LTeoK6RZ[%>@T'.e%#t(d_jJ3s[.8^lV[R[EbFG"H-1DX$_>%$qW_q
%F\$.aJPM>b?mN+#jQ.:8^=@Rq7>@+&+I#il"A'D$KbFi@)hAmTXYNk<8U1:ZJM`*^`/lg<CI")ZBcl'e58:QhN$IW]7Dm2CWZ#Dp
%(=Il_@Hk[cF;?)p,6u1oi\IpV):PAL0b=EdBNpL.A/PQ#mD"L2ST<puGoJaU9X"Xt41DQ>.&XERFN*Hu_@ngBT.,a';0_E*T\CUl
%E'QMlGN=QHCnsD-&MODM*o23GoYj*,J7=&On0nlbX]eAAPAM.0s'`]2V0J]<6q%E6I\$#%E%tG)CYIM38^620R8H3.EoHUA8_Gjo
%=?0!6bkGtAZT5:j7mSn(!(n,R233"L*l<bAgLX?DE\uGjbd>\F7LYUR=NPf8Xg"Xs)k.(G-6l3GolllTRX@WdgHA#5R1L01/q[3i
%Wdl*HbZgX>$nc>`BSMkO?FPGoT+D,_R[CY3a!a8iK(3C-Y/Om8fFYWg2"]!#NoI<<0_Q"?HS?_nTE\EHSUT'MGRd#:Ggi@TK\ASb
%#L"%m\qF@*.R+NL0D$`77>4$&='oASWC_)Snp)eO;%X[-:hhVpJ`IOm`cRUk1.#5+oFbF?fk,FVMR49GJqNp0blLnTN,*W``pBQk
%1rI2X8k/oI/)T,#,^7uS0qN.$#Y]Or&iC9rNTH.m2@b^9ar$[u`N;ZX$YUW)$!TY5<A+K(G&1#*3CP3RfS-L('J3F<j(^%RF!U_.
%<%']2agM3F=i.1*3fA.s*ENXoeP]rR''LoF?tiXIRQ$He*agQ@8#i_t4Rk@W*?B8],9FPbBueYc%ESXQ;7Is'].YSFFW`#b890\C
%9Q<CN>Xm@5)9.I"&]$hU,BK^j\`.(rhrTsXBh&YS"UV[i"kn/)Ohl#Xj&Tl"CG2$\bLC_b7hnf!J%3Ui=",=H;HK6#VD-MhijYkI
%LFfQ]qXmck>W,o%3J.pCbC/+_krV$teKZa2J+Q*nL\p`X/l;d@;u]4T'-.5.F?r1pU&(HL5W'c)TeeFE+4^N_M]i"Ka?cKg;oTo4
%ZFjYKEoN2Ga]u%dP!md@T!EC0pkucfa,kr55T"?+mSdBUNC@03]57EC,VWSFV2?#*eo,S\*oN.HlFB/`F53_dCI1$hp_Jl9rNMX+
%fhRI)Bm4-=&XtkeW%%KS1/aJ5>/Co^.(lq:252=;14*Z=e_M&Af'.d1>(aC^kj-\K+"st@NJX%Bg[(Db?EDg9PaW`TMjsDj&K$h;
%M#mtr$]`n93=!7,9$*h4QQjh,QJ";I[d/'L?S=cQU\k"(*q%Kq/'qf\5[^-4ap1fCGt%N1M:$bJ`@V`CYo>k@nHt$+k_]H!cYK4i
%?6Kk[<:2fTN#ba%L0\fDK+8`KIbsbiS+Yp&>6/5mKbDF-0\Z#%c=gLEJJ`/M@eb3qO#*^Y7#=i30IO8Fr"XLcm+2e<)5.2Z@&`Q*
%5YNgBKQ^1O?6QeQH*g:g=bblAeO*`$r.de\dAhZoCb1JGgmf_4rBm@+S7<T1D_q5Ee`OHZ:iN+H.?C\-;ZELgPDUt3,Q<81/[0#d
%,l<-n()`"SgJ'\>W"ESOI]&qA#[KcU$rgJK;C&+mlq##oX3foEoGB=h0gR5m!P*-qdUHIT(KHd&L;]<%pYh@"<o(:sKVDRY+S6-U
%Ta2*h``g<Pd(S93Z3MSR(6V;]+OVok:Eg%iA5X8f@!E?G9?ocY&(&oMcMV&;[<lPA^\'%pB4A4!VH?p>OYaqGSejbYd!Z2J*-h%Y
%+@Um58p07V^h3)>R+TBCh5Kn5B'K"(qi((Z98?OQG>qN!X).r><\S5G:)7,cbD(#C2[<m`(isAQb5mGN4pHTln<^r,qf@<&-':ib
%Qou8KM+l_8mb\W_/RfuJ[]q.gmHPau5HL^5-l2A9a1K,o/r*Krc.chhLL'js7&+]U<7i,WY8aua[CX+br^sT]asK!nMHQ5k#PtiF
%j2>%_'sk>)@CN?o#XN#5Zl[?8"Tl7H7e0b=:[o\V@_Y%VJ8'K@UoTQ=fF07(p9YClXGsfV$\8T3_&E6_JI'b?b,SPCM!^nA]10&U
%k;h<$rfWMKgn1W]n?C$8qi1A!>Y5gB`r#')pU#,DHg5NKgZpR4bGE.Ai7s'O<KNuqjPK!b*t>3&],\eI6-pL('eO!(LCR6k\j/l_
%N++RPQ^Jg0P26#BKN<Y,#+V_E=Fsq`]Y:lehk?97O.X7DEpm`fk8+qZ%;^00%K:L1cduP/j$BnN+MamNmUsTY?'4iK7:sQFimsAF
%h&7cQ]T<`&N4#-2!qtZoW%pX(cc?Naq#J\H/I^JWk0C/J:a'>s;g-B?Lo[rtHM-eaP:>QNhd(*[^1IlC@BH^+^gC^:]+220"p6C,
%T"3X5NaYiX6=q(<lTB^pb_6pE17n$rl3<[6q)7hu/>Z[PRep`Z>5PG&NLV*Gi#^J7C(L5RG0`BZ<8VXb_<m.o/UYd\&U+C$k\"/Q
%097n#(NU.D,/0.Y/"X6^9Q#0JlNL>NUAVTRbV2k3OY3-YV6B>b/Dtd`GCdN)S]M^u220+Gk1l1LI3:_2Veem6qKRL\i&.X25gj0-
%Y>fjTAW?h[U'Xh+S&^3YaVn&(i3=+c6a;0cqEeM_Vhn&]6*gEoaHVANlaNfMHg2FB9?m^;U+Hqb67$^+(<hCHb`*l96L:((J`e>%
%Ja4*)rU64f&*(=!ep,M6.XCCWd561%hsUJ1N_=,>CV7E"@$Y*\l@2V.Q"k(t^>XSV%tDNZVQ+-W'$?nNi7cY=-se%p5G>+V$VMVt
%&39hSMF/MlI1aEtlNS+8<+Gr)+&c#Za#/g04O4$]co8A&bZEOmA(T-,!dkQn\AZs3J))j(M1(SaXa.\/m.n2^$)3A,*C+T%150HF
%l4P6IQ@])*C+Qtp&/1q)1eCnQ19HA*.&J=Dn8WtkWMe;C'6Z:b"u92F<QYp`R>AL,=o67h$P%V%>j6%BS^(7G2'T'2+!8+LH5jZ:
%c2hTTq2R>I*,<sM!]Jin$T5Cp@PPbf3Ft@_rugfR0Y=DXVqVqu$r[ice;]\u(kM??^j%g2^T3`lNf,Orbn5'[%iphS@+*g_n8Wu;
%+@]>bj(eN!3ue4mGP4]=fumG_8VJf/@mm9[33^GWnR=u]qVu8e&Nj9Ic__""OjWW-jlb(%%sEN5JT1msk$9,##,6cZ"DeZ;3/jZ)
%#a63SA/)Fl_!&^]HlC@Um2Ycbg!<#OrkC>A_C2&\4q:D31<(@PRstRek24:1h@;'UN1>AEWh93%JY.u!^H2AOZ^!3GDWd2aI2phY
%$%*Rk7'9N!o>ZD,@ZP*[4dZdSIWOX5'7(VF\*YL:c]SfTZQZ+LE'Kt2BRqPSg!)a5hoCNe1K<dt)e!tGh@J6CDs)@&rs4'<.mhRH
%1!\2;F(sK$]>31:5#)+r-p?-#.q4NK9QsgMM^=n+k\W`F[XT.+"o$BcMoLXM4*f3TDes&Drs8UjnY3M!]ZOj'l24^.;kE2K*9pn:
%X`)lfWmVd!H*dlhB%idtc(Yo)P97X>_&TD;+2&3Lg\):9/1XBpMkP*qfaH(G>\8V4-KWK:JnO\i`K(^?P@'!&#nKRepCk9Vo.]Xq
%+2N/Me5Zb#1`;#og9E=`!eZ1sP9qn(WLLK'HAGfA6'8V2iqEotd4b=8N8QZ$$q;Br&f)$bP5Cdd]aa219$%:K>R'gmq_:b&erglJ
%BtIJGbq"4AXLVf\Vrm;S+u#N_2f:J2^q91^5pt.79g=4_S4LU!9j^9I6=@YDeRI9@P8.8`Bf>fF\6\P*G"JL%q:]LmN4'hm*%Z0[
%9=k_o1['f?n,7Zhrjq56Jh.bR&'/O>gdpuRoYusdrr2+/'&?_5XEg9c'D\W8b6/Mh6d3N[\uRr(]ui\HecU]Yblk>c@UKqtUZ%`T
%/L.!`;Q4joFChGCCRYlW,Br)I?@?ES1d4*O?'AkTWKf?K7g3B&rOBaDUX!as3p]0E=+b',V"Ap4G7^(P;XWKB:nOb>k!tX*.eg(D
%3_gb]Je(k3n"a]2.0$E%L^s:ITTH2".,8l?Y?h.d5"Ear+bqSfI#G/M6@N<o)WG[4Qo.YT(iQ"[."8t\+'3p-EM*r]PugG8T)_P4
%#1)A_-RplLmKIt)d><NugWX%O58j5/_L/RVDoW$a(.Oo;B*5o=)1dhrpsu?mMlr9A1+VE/Wef=_/Srato#h`16::2!CS,BK6g=BT
%Dpcjumn<jrW`EH<KkXVRK21pDcaD05%bZhrn1.oS2p*7[*K,:M-fPg1S_A"1Y'D<>J=RYj[SbVD\9D-khK.uuJWk5hXR'/`n%8Fg
%e<:=iD%S3u'U/2lbSMFRX@J6%'`P"(1Uld>3G48-JFiU[)nb5ngM0^7INJXF#&iM[8+?PdKR5WW9<UUbfFBOs3V4:Zc`#t4s'./J
%fTfIAfF>gliO.,&!r4h]Li"WLG^L#\NO#.C?m(R50f4dIWP51c1biJ['O=FUDu)s3S[I*;W4_ZZNaOL8lT[5.jM_G`]nX)FKisfg
%(\fsUW,K@f\TML"W%!V`H[P+"%CTf[:dHO@+9ddDEHFg3dI^"1*L#utDq"+Hs-DWHjr_G:E5h:@oV.cf?+-u((J<Y?;+s(sU?^n7
%Q^bgf!0eU'JQ)d99l5@oJIPqO,jE:/KY1o/miK@[dml+R%:$#t4W?=up!7lW%]+mDeR4L]d^8DW,!%J":O7_[@s.ruCIC@g>P3,"
%lPA.J<!MMG:#nni'%F+dSBC.SMn>uQ9s^QNFR&VH>F.HMpOQ(/72(SO<5$U+W@$mPVV.5FrV/4?2,,/kp?mFr@UoqY10++kR4n6Y
%gP",gDj*R-aNLHn(-&=oghfGMdK&17N?&YLoZ57,]V"bm=h]Cgg[td=%l"Hcf%Z#3][shs=(4S(Xl#Zj6^lSSm`bj]DW#9T]^p6C
%&oqqh\UP[[>HGl*D_EnM5J1E)BcK'NJ#2SE*:L5E,QU]:oWeF^J.YVfj7@q#GJ#FBG^g&uI\55tL\cc\h6<uFjZBt9PHkh;+.l$5
%7W5U&kk..9Ws>k2&&Lba*PHnD^NBXJa.o1J(6%Lh-Uln+IS$Ke$XU0BcYZL[8$XE6l9u.GDk%JO<666->[c]<\aQDm-+r\mPW/86
%bW)TqH9Mrop@bCOF7.EJSYOB[H+s_uh^EabYhDMF02jr]M[)/96>c43JrF"WIPn:j+2O^4YBQeRWK_)][/Q`rLu*Z4/jj&_<Nh8F
%WMQOr:cf"ajd*-2/1(,h"Hgi]5QRm>90N+WY3(d@I;Y0$Q:NkBV+kW+bB)#A@eXi>NMPKd%I3d?i2p6=*WKTUb_g.TZ")X^TGTFI
%LnOqr,F]88R^^C,j\1SFNPE^Q-*$tAkM")bHJiV"W5N-A+%fTGIe@a5HDcZ&%<pN;oY_G[=ZqiH75lo'V?<\'HQ3k)ElYnSeG(85
%[,+9\4?=QEYnbW761sD36VM6@`GJa`ZC\5'TA1tNSfb4%q-0R-dj8o7Am08%R0A`]6_3r`^\)lNDQ;l@Hn.Ws*1n7%?$JgU,:T.L
%./Wr?4=UL(DRb7uF\q>^a/;]T*'\\Jk8k8"P(UUU)11BNZ)SYsVS@S*"7qCT4dS7QPB]jomGjfugu$]e2MY5]flLX-eg>VZrs"Nm
%?-PTcT=3n>k0.nF#_-;]qTR-ka`Q8H-L'lV@@29firGrS-kJDR_&QF7mHQ.,fNn;mI;g?*Hk=8p4U0JeL6<"NSm<r/pu2<h>ZX^:
%kjL<TI\-[dFIf+q0>ha#(C$mii#H69?'>Z,'2N!G8t=NsjX?tk7QVeh]AhdUri;p?]q_?V]TCE)+4fjoNVn3RIgE@V`bgNQSSPfT
%_Z_)#XSBt"(K0A1]'i"2lf,Ga]/#S2%m"agLAPV1)m5bjE..0TI99!854nRemVRb8Pr/;%h<&jIV`&.Ua^7G>Dq^K<"3f@98[kiY
%ik3TS\?KIm'pV<MO?;hL`*6%Xq<Fr[*l*bY6uLaus(ZJih9e^[ZuaTLFnOf?J"PWu#MTg/J)\X('R&jrgjS)s#81%;q6gT,*OW8"
%m(ua5pA3W4DS,E7g"Ke7<u\]aG^qu^@iK1LD\HBFd(Z=VeVkb^P0R#1]&2oG,f-pmI<eU=I#G1u0_60VHJa=7?$iUTY:t>IGKMq%
%*9S0B/Vlf1]V]`p*0G:M?GBZjlfr..GIffu_n*:LO8OETmp#;=^2"6[0*7'Ki[+@HHj(Sn95t!'+:qP,W.V]ms-\7M$",bu7MK28
%+'Cb</1?o_IiMg=jEV])K0GeFbIk=G>I3TZofL#FG]+(,Uq^6@2&Yl^R-gFmcVKf%jY#?N)*9d_^4Hk[7]FAu6g]2h`WpQ/Mms]f
%l$IqUinaP[diQJ"i`FK^VKZ1g[R&#HS&>PPOa)K`M,.s4b.BlMIOEM6'@e]J1L0"+`-:^EP8]%>=n*$]_5S<u_44'MXO4;:`!>KO
%hVB8ankn16Hj?4\K<GQOD,nOP,k4?!&j(=_nV&P-HhRc%mf[rcU=pf2f4/$/'#0#n@]rdXOEb:hag"Eb+W#tU]9@JlS&F1^-IX$T
%8`EguLXp2]pU2Z,G`qhe/eW*l+Rt;j=aBb^bjP[\I\PO?0j4G_KjV'>YhJLq3DbJhSO5E"7Gs/r"?o'unEt`=Bas'tmgJ7[;^pq:
%AYrc3,4C(fjPA`[h@j+7o'VQaQa[G%Jh>tWp\*C@q[,LiH4B`L)5OY5Gn/q((3qi^P4nsI]Y"&8UcjU!^9=1?/a;)NUFl(<%g!io
%7GnUr"?s(JX0eJkfJC8UkkU'M+u,mk:e/0\p`4_fj?k[1,LH=mJa\E0$Zf_mKl8(_I.cnq3lZ+Np`4GXl]n-,^oFYed!#L<H%k(Q
%]:hYun+rFDSM\YgoX]jZ.QoH']n9)8),;ePV"Qli2fR/Fd%.NOgQ_B6&(::[m\IOK4tKYi^UI4bg-sa8ZA<jXS%<f[:!("3Apl&P
%o+T(YH/YmhrIqnfi5<BNEZlPg\(b:cA.a&r-\W)X8\D[mAD3e<8c/qld(D'ddC.7r:D+bj7H+at,X/IjX'KpdchpP2J!/+S[q!2c
%oKgUsN2kamirG4[_4o59U\RFLD#V+&i86S!Nr_`l$EMXcFd=c?O[XZQ42#+=iJ-[s$9#X0Bhe<U@_`S];6"YjY&Nh54q99`[kg1)
%h-5BGcGnb0;*\UKXfP6)5+I`,Y/s9.%DFG5RstRek23J63!KO:>eB7\^ckNPj1l4&`M`RXh8Hmtn\1>4c/M%'F"b3;ke$O$.j!_&
%d'XfPe#7kX`t$eTI=$8"O5SF^mj/XO'G??[Q,OI1r$1Kh)sb5R`rX&j(M8bqC,Q"sT$>$*';8#VSh@d;p=&1g&+&<jAldlp:p1-H
%**H;VK^X;6r)prEgo6"^GO?^P[a!9al;gA<o&gO):<s=*i8Xel"[6#Z31>="cfX-,MVaCF[QM^BU+Ybk'eSq8M>roYi-SQ<`k_.P
%-S,$QY`D`Xb[Na3pgcf23P)/aF>BVMU8&!]5'bQ1Lq[Xd0mX\UktYQ<U;HGDJM$(r3kOWHn@LXl+)=Y+clZm^_q(@HVe]`(+l82C
%K&=k/fJA]`De%nl>.P5fJ[^2YRK4H`UUfmP6`A[#GR#498?Z[a#!)J*qhVt'j.M,XSdmjX&79@,C[U+*$Tf6ODYt+E-X>m(es]]0
%(d^Fp3,Ir$@?L#3p/T%]D*MHAgMa2NnSJC$8e[=eQPE`8.SW>%YBurL<[."(2#T1on(Km*<<uQP+0Tf6*./_KAi,-L(0Bftf\-&g
%V0B-&$eUGd0(,gsYee?\dO-ph3PG5Yn8/*;PpX4fZsIHu*mp8=^eth3:-(!fqt+&*?p/o1lLARZO"7*iHR^q,>oDSAT*W%aJ8:M'
%;>>6D4rpcoXk<-6A+b]gk?6XV)pZ@6$9"E0q/&7OVAimM'oq=%eS@.)o)d75]:49Q^[FFk&dGfiZAK[XNlWi2E1Veig#3V>r<IXK
%8,1Z_Z<kHI4Kj&?\+@gi%HW&/hZi^igP837MV&V9oD2FSC9k[r!Fc8H[]sH+%n1jGcfUiVR_KjjX)^*0m*F(SEX`uu\'Zku2UL"P
%,PX%jmtm9g#leO^rq[m0*2c#TFH-I6B+0YdSj?T)Ia+u*4kP&cq5.SMBc`BSTg%AJY.6th0I&/&nh'@*!3=X;Cr:SgD9Qgjr'K3;
%b87B-r;$Wc&)jA#P[B^Wn[3VWjTZo_'015s:ZHg?5OtiLedMp/TrrHnGH1(<hEW(5oI'KF<%Yc0^NjtJa.G7pA4Bi#"/5L==D7FP
%XhhaoQ^=K-OZ9JhVSpU)=\>?SFMOeknam.fGEq:5Mr/*2*B6B3YMBla'(,&piIum:oDN3I#/0im;kJO@s#T\$B,Y+%nEBcFY3T#Y
%6+)/hkj]29mGlD8:$)(k3$,"IhDXFBE&W8olLRg03Io&g9%pog!7.1"n8]^:KAQOrWR!e[[fN;->+N,'TO&ocNjt_1O.\F]I-U<C
%Ishbln6*:C,mWhaM.gJkpDD$9MqG)^q)l/N$9c;fESIaC$57@+hDT"u`Nd-bYTlIC3qqc@Q[]):;@fkoH#?_JY^oT@HSaW#-J5q;
%5fR`5S+F&.5@Au?H,2QC[ge6sk#_Z`gm`$S6O,PhTU^G@n'/=*rri=t*_]D!pC5;$]D6Sfik:ZS\r2d/7(Vd1[m'fprhU[o=1IX!
%4SD8%dsl8M^39;WCt7Rd/Z@hacS7glj>+`g(B\F\nNI.VN\;irJ?OD#$2dF/6Up(nN<We^[Cj]bAR!ms@IR__b*Tkp[k@]2n`u$m
%A_qS1MpTLa?UE89kI\:f%R<3bH/07>?2am%bA#C3(ae+u@f4eo"5t9<q6DGP[=>i<rM@\%?t>UO`i.\=+'rT`jb;_bVW=$>q*S=>
%T8L73YC6BV>f?)P^+b'gF2@eXj8IVXrtL:8ZM?03]urWk,QR,b+SPZEY#,mJ`;>8Cp$h1)q&sCR^2h0D*rgaBlAqHR+3/7gUsk<K
%;UTjd$t?$T$]BK$n.40?3":)@CWBd!^L%t*6[l]'7@6-[!O(Fpcg.>':ant)ms@I.!AqKI#g/h?a7CXXKKZNCFZ^pB-'C9G_pa))
%\h%0Yg*#;?cHLp?Wg@]mL*uIqR+I-UHKn*C\A$QrpcZd4nA;kf'`=5fX.P@k?TTq`e*cE:pO.?<gu%2V::8:kj.ltQC6CLZhuM6O
%;)iABC0<1mLiCmOj$K1)ju)kPHF.UANuQaD/DK49r$-GDpNe8?CB1oEbZS_gWpg<SeN_g7)!l8l8sri*>Qa5@7fbHtW^h"JqB\[`
%NIpr@d.EqY$gp@>"UP+icj#K!)isr?_bfU2qJ5K`h"YIM(QEeFN]_5)Fmta5rORcn%K:V<ec/)q$K!%fq/Ci>^ceaS^!HRNX^1,f
%n!)A_F5Ot.o"$:*>(g?Hf#pJnFP;FpJts*8c[#"WZ4l2L4MD@S\2rB3D$[9&mN0ri+1G)YH+o6(TJ(thRs_Z`1Y&Iqr?"R5cX>S6
%\iST=cg'`NBDtL\/]N>dM)b5GC-$U;VLo+FpsT&!^'B"q@5c>:0;,bpeU:`"XS+%^\Pptn4#M6:9p4?4JT)HMEb`72C@56lme=q4
%WV1c,E;*W0R,NHV*5&J1K*P83Oq)C9?b!d&LkEHK^rRl:YPtjWI,%)9(lmAf`52>&m'`C`]DhuD`qBc=H3&G#]Dk%g=1\@8MSHDG
%=J:`CZf9esN>A#qd[5=aaKP?N/Cs&XeE(IZHR[N/O3g$lZ`a0<:Sct6k3Gc*O``K5Cu*E=:O\")hn/<%4IIOKg%pj$DJ&!;rG:Qi
%g4B'eG"6o7YLEB_NU9N9hsPd&#$C?'r.<5[HoM!0IeOjIYs[R=Nh?(M1lUa\TAesZ@Ye)+*`-[^.t/`+'u.TFMVm'tJp6,<QG1(_
%h!ioTNuK-;?Ib+3\&BT#@@l:njLX;'m'u"-E)#W_?IO@seb@kg#jIeagi)s*r41GNL'M#Zio@c9B(4I*I2AKr^>WG7e_.ra"/"E8
%Q9IgDDtnCdqhF:_Re+2NBCT!Xh-[t/hsXBI4Y=ljFEHoVI\iFhmMC?-maiG=g\mT+]&PD`XF'G'%]49ar,t:jh7ctbl\<,CESU!6
%G`UVXRdP(*.'gJ"J:4oaY^EA0T$ctPch`o9ho5Z"Sr]B>U;CoV?c6-WgI9J3".mTJ4l=%^0;*4>X8d<(?c+j@p1qIac$iN+[p;DX
%h-[rTZ5;lZ*V2;Y^A#9IC%d"Vs*]XjV0,JF/5j(LMLA]TW3DF^*H%jMNci:<l,D8A'o%eXU+Gg)m:;;SAD+]#s+Lua(0'E!VXRcY
%>b-*GV^=Mg/oKD552/Q@,UA>7oD,`\fCmbF@)TkV5nlg00UV38+_ia-YX\$aD]R7'^(f<==Cglho79?LeNEJT3;H><8+:3ZEM&l.
%L,b123V9l)&1'M:$hI6GbJPRn2jQ7l!\`#0KB?C>S:a%EG*-bf?eWc1WE_[2r]p;0Q*!pR@U].d5nVOl<+GcGJ:$>nZDi(W^7-/c
%G1bh:DTfP6mi5?bj"::816V1NG_(nh7,@W%?brV[LG8g/&/-WFr!8)d:TT,$+:=b(9`D>7of!SqXg:5gSRW=#;!c%cHs>bNlhN?d
%Mb`g/WdC#BgDBDR?IZ-F%<%.-^9Xc?,sHJ\7#qm(38(lG#GSPTm/e@g0`L\U;\[lcZ[@K=7,N1I6EaCgB=S0T,[jt\>I.cDUATWb
%Rgur^p)Yi=ED*O9[Ge:ofBDBVoTNmIp`?;@p%V\<ViRu)lG1&[ESttCX]uChJU>"ZA>ip\+MKGA54,AjB<B>+M9HlZ+Z!"9<r1$<
%o@1!Vj1_,.8Nmm#Z1<+A<2uX<4dhGlFLF7*3'kIhJ5\SUjr_F7\PCj,P6]5_T#@'9.Blnt?J(`'W@3TfXOgOQS:8$>h_W%(L3l>5
%DfG(6]gq[Ti'$MaY/<i:68ta,RZ5W`7=jEKK6dn1;\d1H38oQ[mFU)P(\jUJld>Vl'.?mhn+kb]JEDD196:$a?u6uO[b[HNM9sO5
%7kDj]!UI74g&Km2G5hBts,LDX\,L1em6<,X;Li[Fq&NsIV^O9K+J+8tUSF,9WbTS5El:GA\&dU5,8qH>:ZFtB7qkE,D]n(@O[-:Y
%B$(+D'cXqQn6j9U0tsgS-mJrV;,BTG1e]2=[?D:H$pSH!in4i3*X/(-EUk7aYV7>YK@$[QM.*_P7>s5L((=?SA1ER6D<C)PYVgpg
%\XJa^(Enc)Ff6WeSO_m?LO]Va&eJ_HAJ't@\4mofOEUD`ZJ#oYKQMP,A(4jAmTpKILl82VWt80EPXgYXZ!/_N?ASP;X9>:6hcZ<+
%#uREFG_Z8>KSh\CocQCM>.^2R;+cIfW6:ccL3AHiG#`Pq?e6eZrfRA!USgk0"VHJ[8$ZiN4R'N](KjA[DUXKp`"<$$.&s(5Fn,/t
%M]u:A2NGN,<HG2$f-mX`$EDQTKo+g^nt[7@5&6$sOf&!qnJ]F%RVKUMc.83WN@KtklWug8!hAZtBIFli;JrFF\ZIf@AE8<L?U/Kn
%^!,78"^QEn0Ho=srW0s2[qsAjM^W6es4t]QPX_Ok##OL2f[U.iU>kiY:T26jf98/??r[U?ck-`?n#a/6QS,jYd7k-t,P9T#k4j-&
%8O&d%54q_&"[bR(4/ZX)0nb)im#D*)/;DZDn(u-SB^7efCkbcrjkHm4j,>TG+=#^^FqHB#$TcE,7e4Eq*:&2q(+<$ub7!R0.;hD%
%4Ms&j7r5M@X_ulAHWhiBl/gro^E^Y'%T?P[J2es`*0J\[p9Q0'5[0F?$GNo&"9YDum0*pKB\u(ac0"]52?rKXD2S;$$#9M$9`EeU
%0QFae1;GV+b,0B4lg=q'&7`?YZ-F%8]24RoBh-tnNHPD-eC!,TA%L7(IY?4bOngq7i:-<EheFN.47rM1b!g=_ec>5l2AD271$F=*
%ciM]6?oE5ir;PKdJ_Bem]6#\+kR_e*3g5NqG>!<-FoC!K\BN>%o,c+corn)Jik[-.T-%bEb6uaSirS<)r;?YC&>QN4D!H&V*SLek
%!k*:Q"Vl#[Oi/t9AlM#R5ii*YD[WeeOnHfi$(52HT(VKp^jKBm5/8.[2P.s^(PY69J[3pa_2*Z(A&d<`2lLV6!_fnJZB6g[@K9ck
%5g*'p!+aA2FhLe)+Y63t^C()urSs0;cOX"Sjn4P**hj/d,_)$A"bU?A)Ln7j,^koXPi<W"(BJsY!7p2f)f%-`Vk[60jLG)*4>ARu
%LaQ5CYk`!0c[Z`)T!aX*!5?8>4N>%<#I0l5+nm,90$fWFn0?"'-W$9+,K*'m"O-O__^jKKniJPBq=0G94Bu4t"f_:3P4\R$be>:u
%L-]'pg\"pY#I0u<9b]!A$lAhH'!X<MlgKWk8+ImuAstR$P5][qR&0I7C4iD5cR&p)a!TQ525$4&5Sm8BWZ1n!/u=89]HoU>fIV_R
%ePD!FJ.,NX#dXP4DAWA;'4;@grf5pC%'unuj,QFWi!ZR[E[&:i^K5/65>YI?OdU%aKBY->D"RTFU63?*6tndBYs"IT<"]X*KHP=:
%G+/]lpD[m+54Hr/5X\(Jp]dB!7+JM)0b`jJ,CLPgHcX$*"11L-&F/j*o7Ag]&1J>.8Yrqj!a$`ETrISY41XCf&Nn[]32Zp:,aP0>
%c2up;L/rB(_UN!@iKqB;5XAY.Y7uE!'A6Fh.OV5r,Gb_$iV*TD6&b?S^j&?EC=Xs&DrTH\'3I$;`_?3$<G;O^Ud]sXD8>6)l$(F0
%d20G[%UgFDi#X$Ko1"!<h_:$n[CH$)=G-1)a2Wj_"I=H;92XF\j>6uXD#d0a&t1_/7&W+`N<V.3%,9[rO8HYSp%a0g^+-#[(,@rc
%R0Zu]=6r4HAZgU7DArUVT94M>5T<gj"":B:51rP1o;(FVQo[YhaTh<Ddc9"/&"cVsabheG^Nrn!N=RdanMPU20P4O&fM-n$4<Ur%
%=>^sZiJG,Z=EjV].L9T%ncnUM+M-E[bnP/][oNSa"CTSN&"Wi1b1.G2T-#J`74E2l<JA4hE/!0kYQlnGSf"b]W-n)F'Umq*^J.7p
%/?uI7f8GU5)dqp$FL91hca'.Ens"g3^Q%6o&;9cX1Lf`ep/ZB2K2/'E0RA.DJ9f!eJY(fG568p#l:KWS+(bTa14Mk3@'lHqV:@iE
%m."S8)t^tq&T:WsI\=&$8uCBUH;LWi8RIPa&IENo@.AbUB_'eTfi0Ssd*@=5/Z8oBrAT848%?i&J5q,sEjdG`\*O$:$"CM1]Fn2K
%rj`9H&.Q//qD$(ZP(>O%<;"B]_,$^>s7F0C<<h[lg/KQX#"F_UGd]pa1pUolmGYtjj2VNfT5Ol+FaslV7+-oQ)8ACDR$u,\9KWI_
%4h`&r'cMW("4,nq5j`_-^=XpO]F]EX;8`*;"*i$.5r]f;m5m/<a`(Zc*kqSm3`p>^R[_)$0X4uso+cT`CQhY%e?r0;Ueg7^N9(1U
%6W-^s.W2&MY93E[G.dppf#DlKKE,6_eG-K)8X7umNNCG:V"RfnPokt3[n[W8oErD]m5pgL7&q5*s2Fu?YU^cEoDQi[gCUXoR8@YM
%hplN?XhTu@h,N0W6RFM2asQs9E\_'Ufg@Qg22PISfRm;X$Gd4@dB9=?Sls;-"Qn(-^9Qr`,9,iDn$R&KVAY#i`e!ZMlu.M7iu#+d
%oD)-i/HtRE5h,uQCY^%MfRk$Cq7q4kj%e0B@FpZV`Rj!abNBi18[&,1TFU(*DZGec6uej$pf]B&I=3&>$fX;RW60]pG'C@*@h5$b
%#M`Lu3gSNN7R\7\6:J*d^pg+(Dp/ER9bb*de7"tFl:/n6aH0HAap[ed%t#?p2i*9VHf(dur'4t'Pi[mUq*"&K]f-Ak6U?MZ(VoAa
%8)gZHg%6LmJ5;h]knP0'=]IUC:o?(/2GgETrF`0/.=:%.G^5OfTCQJ&YIGbJGmnt,E]!IO&Bb"%Wi(a-%J7[SaALs\`[[.=dd\QO
%!Y!NSn)4?Hfk>Is/?CLW1iOAJ&bPmMaM&^?Oc,A'8k7'MpkE3tOD];5%+B<XO]GTIH6khkpBa*uIBo!.?M%(L#$R[dHN.9@&"\al
%F92"$r\TLc5^:3A<.#=$V4pNOMEQd'2UkYrG%KWG6EjopE,;$E^SRNT_*3h03B,;.Eg`/r!I/3]XZ3R*Yh2<S5"J)sHuDu4I\=%`
%V+#/-Y8LY%pW2ARlp5Hln/"Df@&dqf:>q9R;g7d9N1V^gDQ$XY3ZD`<^,C:S^i"(Jlt7i5P_CZs^J3s$&C:ChBAc([DjU`'56*Ek
%fececHh!\$ZoS4op$,,9rI\.A%DY,8!XXFrHo[R=7pW547MQ1Nn*XqLY\Ce5p%a0g^+'BoR;1J*pq@j]+r/Bb+9Ptg7IT3_eH0O[
%#o#Un)l&&4%e'[+d[RZa5_opH4^/e)@I;qoVqJ9OfY]4L]7Sln%@Y!a?jM`W__BR/N^CAZ\Gt*A+<+dCR7om.,l$(EJ<<9YjEAoa
%X5LD_gE9p!5@-nWHm>r#79>!ZI)sO1r;?YC&>QoV(rSR>73ZLT"A)04&DWYeZ#3eQjU=)pZ7`d!^uj:mXUt`(qI>#C0BsIL)W!R:
%Y+@lB%oT/aL*8omp5Y:BD%07=OM)m/f)o\G^gCp-Bu<9"-+<'%B=u?iYQ=+6WMaDf2OX=7@t/_-q3g+GqYWTh?OqX_Ld$7;$@.=H
%K]o<YKZZP#7'HG4CO;[=F*mAq:uDGIq@2*.TGM;E#_[6!l\X#8NK;P1>D"K+H[q'DPXjdDe#5u^nD\Ib1`B+Aj<+)+\&J_NS5N/"
%>%YY;rYpt84Cehe/:CH8N=_oo0>[WG.$j5fH)9ftS^:Q&Nn=aD1"7I!j"'aE<4^+2d/K%ng;$5a%k]pE.M#=`&r)9(a=#eoXU$.D
%!(70_nQM%WUR?FX*&2>mQnUd=^];ILeEW'.e0b0n-^np6Hm:Xs:[Rk"F4kbIi1"[(DST:``dID6UT+foXUKj>)F')bGp7fo]"(]2
%q+bU1OWpP(CP'H%oD8X`+?$,?g3ms:-S5<jqB(31GIfH+USq!Aq^9Xk'*MY4VFU27"SX8=r5>$1kkJ"?KKXjEOKUgUWgWt7A%3"_
%[#Db1&-+7-##r3p#S^su-c#5(0=Kk5g)+;Z&RN7n9Q.`/agX7%7k;NUia0LBHW"*D3(CQZq><Kd?]:$'ihVqI]NOt*"/`RV)J]=m
%cU-AU`PX,do_CH'CjNCH0R.^Pp9K8#SCS'51emOl*Z0m(ldJfO#=#?Le\(A"2p=Y"pnf:?Cq"Q]^c1t?6G=gT>#P$bKY`e':l,X'
%^V2XWNTjk;-O+!kIs]=7n4(jh#;Z16XPaNjCDR;jDqK]pB[&865R52@pc%6/p>=@t'iX3*gn!^+"n$2o$J41C8=)MD+:o1E7<CMq
%pi^XlXJ&WX6)^3b@N',qaT`SuiOeMaecc&Kk>$Ogl5*YZ4IuJ4_QW3BKG'rZf`j]07,^@k7Ph#!ir1i,Ko*RloD*sW>)n`XZ6AOg
%(KsVkYQln#11K`+_0oE/i_;)sE<=EU2?ZNt2tCjZTpU6K"<'Ei`ZTRHX4>('Snt6A_Z60BiV!6\TPsaR%!l>!1r=g@/@Qr>=AQq5
%,.p7mIBk4sRX]fqD<Nk&%D_dV4)P"71JL^VOV?aWjSX04ck+V"7b-Z,9)G=sZ"D!W65BIt!IGBqdta'22g2O\h`<M>Ib3/R^U%2-
%:Gs@!pTee4oqtNLp,r84AYAi8b(_iX(uId!B,LdS$VFm''"Vo!F<RX2*ReuhNW99e.cV_Nm'nd24-7'Z0cNKY.NX6!!(pA#E<+(8
%:"$FEN*.A"GV(FX<ScF:qYWTh?]Tphcj+"507JDd*lLP7C>RppKI%3_-3,kiSH-@l:UUmjh-bS;s%S?rpAG21=2rY@#\>S"ah5Ao
%q3:FEYm4sLS6)aQVEp]/-B'tfP$1mLCKb7D+NX\o+\8d*2/WC!_.5n7Tnkn0P-:8)NA5@+h\HM9a7i3Tk:Z"NP!e6r757f"DC?sW
%U.bM5CndW6C4j<_.nVSa&3m*OaeP8<0#D0hq[jnX9H47PM]sQq]"&+=L6P%63XtGH3TpK$;.'K3!PN1>MEUB0L-tIqRMt'C^<c.Z
%h%Y3tIX,oO])Gm%k>W&Be=&I`lmhQ+C\S\uMA:Cm0![gn)L=7ZY.CT?*L=@V,O_CP&;1*<(Qc*arJ!K'fLS:/I-TG2_rM1,0?a4"
%?9V+EWp6=8jU@j-XBbf:B+:ls3*Y=1aDDYQD9>L[:bD6Co_r+9(&aVTO1Ae.YuGX78B^N&GY?]gY_8tRckO@GCK>C#FFF.%d);\M
%-:[qV2Z69gO?Ir`$05.iVRu.s[Q22^6OuI`9ZIslhnrX`4tbW3V'n?d@K%r$dRi%qQ0EQs6t#ZF9bepq1:`FkN1q<E76oM1/%#Zf
%\,-4r"JK-!Fsnj)Fk,)]qV/E,2iWqEHfmOd#5;o,-BscWmtl=f$>@Bd;?WQ^kiGV:N_[kea/8IpOYnR;#afaPRWY\f*C/Lcp`&q:
%A(1adY.L3C-e5a0pU9`bG5JO[Z^0t5[Bpt3FtFK,S@c50(r8X<m'X@@L)Y>sH`:J:6^+3.ON&pR9#4au_KY?da4sV+]$<B(qHVFU
%;8+3,>MUK`Dhe-HKttr@lUC)L"hF6(PYK#XG3iK*9M*7X,+0A8d,A\(`#V6%3g#&:'pcttf@1q_Vus?*.:%WGp^'bl=?Q#i*[c]`
%pGm_.>pnI6fCtK'.t+aCO>L@_d*'(m6$HJ,=(T_.@kcJW_7cD?>X+]gBe&32U+;B>'Zmp>'1CfB_5urLH+MT2+OA;b]jJ&9SjH`b
%$k?@jT#(93Y2=Y'5po)@h0Ddr^Eh.eJS+R>i"EI_/E+1<&fuU<q7<J+lm,lg'UCT"gF^Ce"807%;XrA3eh)Ra_,P?><*iEJ7C=BQ
%S]FC^P"J^t/\GW.r0"(O+9=Fm^82BL!N*:#,n)nTl^kR"/-/^b[U`]&QbTZu\)1(Ana>Kj[1%[DV_E<M+(dWAWu8l3DTo$KNI#5$
%D@;47qd_l!VtHMdagg-(6'o)6SEbBO(BAd+qb=K&`uV4lke6.QfDYC8XOs\hD\N'qSFSOoWo9KFQC?mg[j239MN%Ak,$86mcUH?X
%<,KCK:_s7:Eq)cr:%E$[-SRlt?W7Cp0<0]t3a.;dc_1u/lkqI7qXoUp[+6Ck)S<86*Vhld/ua*XG1!1lMi4F:G0u8EbD_sib)4-+
%9LJIWi)c@QjX-\c[oH'$'op2J$<YTk%=cUGo/_R<=X/N41K0?;V'<&VFX3[@5^b@q;]$^p+B&r@5>m-G""^tJYngBLPWDHnAHe1R
%`kp405hnU[G%#Ae!.!Z=-_u(6\^H<H,]#lW5@%U3:'"#0BrV14RU8gko\f^*RYWb3"'Zq)":p%iCuFup>7kq.KP#8!WcYV%nNg33
%=o_[XY;*OsrP0[jn4SUee_g0\maP)MCp-]EV1S9uD:/'jA@GV"UC&?gA-jr#d,?N>@G;qL)nkQp@\,S(+[H1Jg*[\[;32kSr^mYE
%SH9e*+Nm0=mR=%d.N^OPjT$^-a:DMf\3=qdYnL_3QtpM=G#]ce6?HC5#R[dQ%-/J*'Ak(g5_l1%!EU5@Ge!_K$">NL_6<qSp9oB@
%ISmfD"OaOu>W1C_/:<_$Hb8mhk2*7]CkLTQ.iJ(Vd]`dMimV;0+-/s].TNdY_E=(C7u4W^D2/9K;b-"a@hARC&pn>sYMa5E>H>I6
%20TfiZGVP-T32T)Wm$!15?Q0,6O+5TQ61ec<+Z+W*^oj5G>G$W,>]d<2Ch9#K-57NAt(on8:9*[J\%eh_B`a\G[)VtCQ8s""s;k/
%-]eZN!X,G;"H-s='[j`5+jN3#KS2)dI`V[C:rHgb<Wgsc8)TH]$]$VGrkSA(bgGA?ii.3hM<@$@O_h.JGT#&ed4o^U&Li;&fTNYN
%_gpLpLhHSn]OWd&(AAYnRj_#K9U%k7*1oa>S60lY"miM<X+ZOkFFVkY6eH4r489tS+X:BaEY%8s,6,W`=.ZXPn,V4[G+24I;rf]i
%!^Z3Y`:TgZ1V>kaA$eOq(-G1?>%BH1[2j3,50\kLBQ@*=UBl(u(RN`qMSdddGi]2#UE)3@!&0rZ??1/*l:iZRpr,KSL)-MH:dk+1
%4Psf+Lq<eM:&&(Rd1ti:eVH(JgEJPk']l'h;f@7t]2?b!gOF!32\R[_a6]7j1nE5](Mm5I3QjLmp#&QVKVM]ci2hW02(6@A:44Ca
%qc#QCE4h;QLHK]]>S5,?9Y0FT<(?K\S/=5uFJ^:]P9jEE!br,caUkReETQ3"M`aj<cO5pG,9-cT<SkG=<<_2X04os%Q2[m$ZT&g9
%>%tK8]pFUA,O67dT^i\6GX,,t>\%_7=WPZ"IY>RL?3f1rbR@\)iIUhEF?/%b@n@^WXJjZ+:;4OIjkV"gY`hnGFUA>ki4Ue##eKsW
%k"^5EM[=`@o**Wf2`We*?$tJg=@Qcr='*nTOcmR0.d:p*hj/'F"$FZB,&Q0('UE8s75-p]&n>=3Ot:cG<Qk^T:8\GlfE]K4Y<g-@
%=bl&s1"3ItMIN=p8Lse_!+n>-WJ1*cj0hE01%c"\10#oBRWJlS\OS`\3,CFC>k]1qD5H"cL1`1&\D;]Io02#f:sPdhmQBS/1$9%p
%@]8p8(,:TE9r7a3<7&S6;[h61_Q3N:9T"9D`M0VOSZ8emROY7j^^DPqUdQD6CQpNugB0`f=`5q^B`."P12p'lREO\XJh6V;%#C1l
%?4.FY4_aPj3WB=?$H?NEOqOoL!Xo9iMQUMnUo&Rj+Z/5&BFs#4+bC,=<#E*d1XP?K*elMfY=!V<PohV$CCtGNLf:=KS/10C>fKU&
%MStY,g]i^@'1`C'j=6A9/(UAtcl8cEgT=lT',73t=#nU&MK)1lb*nVJ'Ncnu60fpC5R+*>o3B-e/OkrRgK)5*;gZ[=hEpbA1/;6@
%_/ZGO*I]c6`.ePbN^Qio*4l>>8e&WA%gPk)Lk2dB5%E7[GuFI6L#-4u8RdWkOt[V<N6^2[4NFOqM,IDuGuCeQYtQ.D\,E[PK/s61
%X@;0U;+J:anZWQR;$A<9nY*49*Rq-[dQ5a2FA*atQMbT(#hO#:+e9^/`))d+0d!n6<kVD7rIB2JZhPaiXInN]Y5f-1L$\dY<*n+`
%QIp8@aV4-$%9Obb^r%PS;<;>5N#kA6]Pbc/'5\bC[K<`TX`[46#)KWD=A'57596tB<aSR$RB_%kMGJ7"aK:;:_L-0:UaaVnD?g4Y
%&DYkR0GQ-e$K2<;jF/hL,'VP'CJa((&S/5`HUQL$/4bIspI^ihW1;/"C,BLtEs'<O5WPD#-2VqV^+Rr[h#s(mJ80X,Tb"s]c9Z/6
%W+QNe_pUgLKG4^"!EfLRG6R^*I"hu*&K')p#@/#>d3/&Os,;/Yr3D$.MTnQr"&"[.G=g=+\-H+C)X<.U17J(bJO.IgJk]7I?HNtl
%HV77:A,:Vf'MUI`)&p:mgl#f5j4,(cXUp=)YpWp+F12WQ?(`>p"iR*V7Fn5YGU!ZaO9pa^E-7b^68oPJk&L,+5-($gr3>]Kd7Kaf
%DVGU>2oB=Bof$63$]sC:T,N)q]V(E0S9GN+eObM+%2nhdn?j\T:chX!R"/2UjJZH3!(>DmElY%!1`.Ri88f1#6^ZY:Al`DQ`JHjM
%CErYuI-7#-$UYf5$YTmcH/!dT/"NY.Udh-U._IjXR;Y"h.\amMdg*rLL<:2#bSYIM.PJpVY,\*8+98jpb8WIV#Y<o)%g..QnG8Q]
%ed[I"BZ7We5qRm^=pV%>W\u1[laBiOh1Jgd;no^m$\d!1nD\I.Qg1#Qo@+%CGQP%q,UEHj:l]1?lB#$:6!"S8n%"ZGWmq[".]Y7)
%=&)k%!dbBn)`Bf6L8J.*dq5CDoBdTp-R2Oi\md3gh!f]>-f(8lcp:/A./XJ?V!<pb\6^@9iT0f"Dl`PJ(K<\C=Y).BS#dI"]F@M6
%iUl%;#Z\<cUo6er;Q6+^[ZO((Rho!SU#ZUs(?m6/cXfUT-G4Ih\K?G"<8_@T*$c!qfJBXIG2"k1!/SKXahVc1BKUM%2P;EY*np\#
%"=2+4Je>hWnerV!bkYEVGEM()6^S%d.t!Eaq?2d<?`^lVHH4Aa=YGGo`@82leN]8S3lp(t\dVHoGg].5ANdrcDrA=5CW-9@)q5JP
%"7Zf#l:Aa>!P9W"'opA?gEO!m+<^ae]FN/Wf!0>SDJ=pH0M+P&a6os]`T/1JESm#;]o"4`)c^>EVkBD7.em*f^.259#U']^XA:7m
%Qao4<dp@ikdtU2>lO-;bW[q_"1aVL.E%%lEC;20Q"b>1P\%Ut:g)j"Gr-rV4XMEW8pVPAJEXGbaD3Pp<-48H8*^-HFI$S'+Xk4B\
%U?GS29eG1s,@?/.P,W\86-qMX`0o4=%(^:P#Qj],oW0OI-lpiKGVpP3E2[Ig!ng_Rm#1#j2M-)Q$W.YYH>+!(s5e)u?`S?<5ZfeO
%;%/=ec0H!18=TT'$h33=@RS(E%NML/H_(oDIou_AL0Xah6o9H\7FOn,fD\ZYeT)rQ-DK?\U"B69-#jQ50F*l[",A8Qj\$?@+KY<n
%F3TLpcujjL-`J'+G0<Rmm$I_A7LDuuGr$1&A.ClnY$9A`"g$WsJSqTQ5DePA\HJ"h'$GaHKT05%8mP77_%E`'\q7)LS)B[V.\Y0*
%bqId_a7/hNTLp"@!Ldah3#ML"+t&Ip#9gFHptO42XgZ'DU21k@SR1L?f5sk!:Dgb?QE9GK/ET=s/CM.-T.]W)7W+t@s4Gl5KbSXH
%[,KAgd=-h_da;(cGa\\oGu-h>ARdhmr5DWKg=3+40p=^C[RR]6*bJrp@d-^O$KI>lY%tsP@p$tukjO6:^J.9U]i<0),8pDG>Q9@k
%"MkcG+R][DI.L0E9bV1'QYS99gWmp6+ce*qh,O5?SK?WI3dm_1f1W%1DB7rim0<o[T)"JDL6n2fjf]Qp]\`l8e2AC0c'juknfh!j
%mfXVIpO>m"R%^;3.?ZH@DASc%1@:6eZssZuQ`;,ro%kW9TkGAqXMF3,a#kY\CmYp4r/7Q=2Sl]7f7oGXS]cVB%"7Qd.cBOp2-2'j
%_&/d.Ce*e@\VlKL<*9^p5-:0j75eM7dgo@IKK.OF49ZK1)NA0H6o7;=+p:T[9hYWsO5)R"bSZ#=2cVT)D6d8!bV_5D\]YaT;dqM1
%A1?F<@m=3QrKNFk<at=(ZDP&5UtqO@l^GR_8oqZk(>*EqIQ6]@P?p^`9)0sKQDgHB(kp.&,3Uc^6e2W>b`?XqK%DJ"H)S@V<Ah&2
%M9\+W?'90mmqp3HP*f]/g!+)=cgNlt$5g-pH#<W;Z6*/eR[*KBW/UfKP[0-X.KZY6@mOhm08_LeORRpBQ.#eaLGCfd6)>Z^JG(nN
%L.G5iBk'XNHVKqPDQbDU!/e'VJ+Y1g\?jR6\Xs;pX?!S4\6R3'YD\2+%P56<+qRbG&q$4+Ec9EQfuD*uoZD\7f,tf!H$1,nmt#P6
%>%M30"CsdpB^C#FH8+Fm)_+S,!bMS&oapdQ3ImoMP`]Jl_[Xd0%VJ*6Z>Zc6kT1aBB%)/E(LEqn*<o+@+uJ3>o_#EE2ZM+Tkq9?f
%j*jG5nu1Pf"j\T@^.d=I.9aOT+@4bh<2H6QYiRd%&46#Z<QTL?"03,!ih\mqA+BG`]gt]al:WQQ<GUZ$kTHW9iJ>5[QL74:P)\Dp
%'h(2j+>,C=SI6lQl2!`0QQa0]f>&6#KGE?r7r:JjUREFNAi6FUi/8_sBWBe)KZ-Y<7.E!=AQ+l%,"?[`kQ5O$DYf(>N9GDq&EpL=
%CK#-_Bb&-BY!i^u-(s+]EN,^X@AA$Ia2\Bs7AR#jrl,5RAbp`9^9;t5Tp<3^&&SbsO2,d]O^_4Q;Ahbt(ia.ke,DT+,-1K!b@XO%
%E^@2`&9oH#[&3+5XnY.UeRKo^d_'N0S@pJWJd5V$Ifj,!)MI9J2^Xt'ThmQ3.E5!rQq7LG6fDcI+`E+B9I5VGpWA\g=\4BKG[QUb
%0["H<#[GE".]CpOG"*G`O)'Of^A2O?P_N11<g#:sjD,$>>NY7@inQd[4V&"A'GR<?n?)f7As#"q\"W;'.H4(oQQ=k=2&$h4@e9\.
%X(Gp#'P:jC=I@iBO:9IN5i7DPId45k+G6Kk$;o'a",KR5.A>n[Y)r`a<W9[\L7e\1ra/3:Mm@82Nf,QSF#RRp$usHZj\UtSgimMg
%-3T?#khHSAX@Rc>CHI]Vgn.k=oE@Q5_TBM'bQpSg!(seJI,"lL(D)r&[:FNjficjR%G1%C:Z#S?jeu".dR[V\euWX.WWt*_qCf:i
%M@7<J`?tgIbn)n639gRq*2tU<l(Di,#.Sq&2178k"]2fK>!8Ya'3#-lOGj.;YnWMf\,Mt>@QptBYh6cO^&FU_:Kjm8NI<8VL0lB-
%K`D>0bgq"PU+q`WH>W=_E_u6,nXM[,/69OrC+>=]#9aYY5Vag\hs%[2kR-lnp?74G"j%+.)sQmjf5ePYPRlaE!?4>#$u/)@YM6Nl
%>&R@8/WcC6I%3@qO>nWLFuAcG5oUU28=H.S=A#gXF_u-V6e41IePop@JomGG&)fQ\61J11$"0D+.fguX#Y+AZ:"k3uR!ILE.*sjc
%o?!nH&\*l_Ep5ha4jUo'Bj;5=]ODbm`!Z<_-<_Vc"pceji&TF;f0+l5lf,*k=re*uCG0^`kP"rASpstga*1f:i2aagH=a:aR%"01
%E#!$8+iDtV/Qk8Mn-C"]K/nM.3(a]Re'K+qE8Tlqb"`K^'99X)=>J):9d$L_eEB+a:*h:p:Q5qHeJKlB<JZ`]\Z17dOP]sKEiI4S
%2lO9=V)9Z7Tcm'`e%g_UL>RWQKgbc>[1#e70FS_9-`I[1KS:;joghoU28dUXgg1+\S#3LM7Y1tD>mQ'jj'4]7+J(#Z][]>6d7-"S
%AI8D1Ab%1Y;Vl7?EsXQ$A[VpqB>J!VJ57p9'`[<f_8@"@6l\Hla*AIuDrA5Qq_%8b'T1dZk;W55'Z7[W/N>-Pqk$QB7Bli)(]t/(
%k=+L]<2?N1#g,i1JH'I9U&Z;L\g(<#]Ot=J8dg#rJs)9e+S-`Yq3-5+\Ctm%+!29WHPf9C=t3Wm(<?9b4p<C&!H#lto6MU"\&2Hr
%O5E3g)Q$kNQYIt,.(Tt7iOm%N"gVN\58uAQq/!Q2qR6t@e/ip&q3]]q^mWaa)^DIB&3S''iD=<$\l^^haDuC]@[@Ml$AS+7_g86L
%@&DOl+Ojp(30;5<=9)g-VeKu5L_+(Lkb3XI!k9p5B/h@o"@:q?Pf9ok:I^^"V/c\?%KBF`2i?'-!s!oeF;ME#QqT'h3;c7Ah#o$a
%;+P8\%mY=0pr6K=4WsmrCVeFnKBn5a8e@_'QXN.?,SkV7kO'A9J-$,SlY:jG=b*\t+edoi1)%I`_.9W(Ip>P:P56+hHlaf?,nbrA
%'6pP@69:lcdXa)+J#js=H:kTV`=SJdB_k`,G7uk3)2#^C,Q>t'4Sj$oF%$:Vk3Ip&_prup`X$KTe*2k@+"XOU,[F(+<DPCspsm-k
%&-cj0GmXh4_S2Z\%:OriZ(R<XHNmL#A6ha0RBO44jVC+_UhU(RJ[Q)REZ!@_N3Be'@3mD,."h+#lL%5(%QHj2@jf->b7K9%`#]<]
%D1")7K07e('RcN66mS&H"#5'N)Z=bsUpF5c<_?.15b3%!J"[5hjNn13)Iql8s2L16<Q/;mLb*i&(gfPk,FSkQ)#7(=N.TCY#3g5e
%l>FFK^a;_ZA]G.N6qS>D4&H%^aPo<mL/>8kX/<ZLn@"b!c5d+E)</=^A@Ql0+k)^TkL#BH5.N!mWnXN!Y&iKeiB("TWf?Y*<4Pi@
%^1fi./8L%1,fke:\q;99K4_X&&3K0?Emgp)ZG7/dcP8I8Bq?_H&Ar3OqSR7aFG$f.+XXCo4>QaX),%_oK5signuohXs!siOLa[cX
%<@;2`fSK;g?.*b%kf8o?]uLW/*QbXc8EV%Qr-jkr#UM8pMTRu@aid=oMSbS0g,<">MbU#^/gSfO>qZ>s^%=?JcfIIHI>[.])4q7W
%g%i@8hf]e]0*\Vf\pOd36#/bP?:W0<]M$JHoGFKYi#ZSdl&%$e%0CZ5JM;Z/R:0)X:ZcV1K0T\j^<`_)EEOtL&u,j[en'Kl.kqW0
%R!'RTk`/ba#%gJlM(?FiXWpGt%WUrip40_"V]ft'$kQ+#A0eB\E%)49C:_&P%SpVjR3Bia+_d*rmb?jXbekPL;f*X<'K6OI7']2i
%.3oaQ&ICgC/P\Y!j()(F"P.DrbU_6JmTs)Sk[acR6i8j14mF_bQ$$Z7?"!C6X;?ImBp<W\XE$8<g)%ga&R%s`"<qPE)C!C_)%Oh@
%Lk.;Z(&?=*nCZ<uSTDaCi6lQX4"7ClQkqDr%1bf3=WE2rjUM`d>u4q1Wkrs'U$6F(CH:PMIa&%j,W8tf4]W#S`bGEs?cTpbePeE%
%<D8*,WPLA;"^l5r0[[YRbh:``_=O:TVsbhr#=8)Q*1ef-ZTlGd/p2>q41?Y$^/^<q=-S!(_`ouMffdHrA76QiA!T<s@HM5=^7kWl
%JuFAsnQ6l$k$snJT?QZj/*Z?-.k^)\+32#Z]S(kbM$r9P2Qgm(_2J!822ML"[j%Z3aC+q=32lnjC]@0GeAq=R!H,S'MTcWD3Rh6"
%Ga/[dgAQ9f*.c$KGn0Vib0k%InbnZo^6P99JhI,4GXQg.i:LpT#KA]IIi[>[W!d;FVa\hM6I$s_?\c$)^-Jm<_P8GRi'1*F;<]*u
%s0C3AVfN+3)&G#ZH=aDJCNMgb8^a,K'C4K4is!@W7?<edT<QjJK5Ds<1XX/%f+9t-<qsIWbfh"l2Oua=e`67Wp)`_-ren10-*g-O
%hSA9m]&BaUWjQNGO!:IZedVPj$W8f!+<$_Yi9oN"0%6p[K1u50Bgd$X[#KLID0pb74o9'4*2?e3Q)E2$r5$WmbTueAWX96q"+0"P
%*lusT^3EecHjm9<?/b74,m\4@+lr^b;#H!K[NO#j\i>Yq6^1J<H>A86\<5B]DM_m-lGkT5AeRaabU*H.J\k<Nb("YBjNq>bCoSQ0
%fq[VML)VJ"Tl2V@bdXTI"gXjmeV#EpcXY3;:.>@tK_Hi>AkLg)s/sp#O5S\IkBM^t?GDJ4JXQ1,6q]5PR<3!pCc`lfLS<?c^sMfl
%L^_9"]mnUgK2aolhJU4s/l$ijnHKjj&"Z*AWGj)tRZYt\3>sI9Z[2pg(mXgfl'(#=F5^MuG\H-OF^[>403e/kgPsOm],aUmmp=)i
%=8sd/YE/:hH*>&&&3_ibh`j%QT:)A6Ao1kf:4WMV5,#G74AXr']5O25(sfU8O7=c_T)FB=jsA#OH#6k2d)soULbss9n"5$_]Z4uo
%c$Kk3JLXMRqJGihE<u'/VH4p-jsB<+o1b8=[WudY3Q6_kfZ4>2`D/aC;*fRI-IrsIJN'k1!F-a8I*U]E6.-UM5k[0U+KT^f3d<Nc
%WpP3:=!b+UF'&]@.k`$Fij>'788;<#IP)2Xm8j7`:G_MqD3[_@T=ZMQ;G4>Ceca3JPsZ+K:G4t@I!=NEJaBd^I#-Hq*N#N$*E5P'
%j./SD0ie[0*$@*fG@^+'+2P:oT7'Z00S!'[)TEF.F`>0L0ggtGaj(oZA=csk2VK3'X#cre';IpDqrZ@8*IJhLWXZ0bal@(6&NlQ_
%fBqB.i*\,7[W`AlYP:11#DdsAj(4\a4tumA-7+27c/JVuF8,q`.,1@Tgs&^_Sb`&)cl\sr2imiQ^'eHYV$bW<Beh0[\]igXpMTbl
%I2dh*2Re+H^iSD=>]a)7J2dK6T$>#ohaW+`kI,:FGj\dpCUQ3@>P'.b2ZI"4#[Ad@l4@<RgQqTdn0F,"rY!9`q[EVkXJ>q[-]IIP
%K_kOD%1,@2-#`\R!]#%9pCFF^,J4A!(`R`A"5Y/H_ikDRO05p=O!*&LrtF?FSn^f8&,=`aW-PNEO1E$RmJ4:<*\mn$kc1MIW,]Z%
%adPLB)2*D)E9NV%NO#oIel.NPA!;5A^P$J4K_OIcW=@jW=d*hJ8..m!b`-#E@6K(R^l4W,cG+#^7q^+ZZRH4Npt>-QUW]Y>1Hi#P
%8<E1>_MZ:Qc<3g`;_WKmY"%LoRA;BE(ft$lU#(@[WKA0XeRgOArRngj2I#*Je6bheB?A#a>]Bn]9q3ZH`f<"]KFYKM_ipQG,'0m^
%F0M)CU1X1\`L?&g!^'P<Rbm#V64/%(_9:KVUbO-TNZ)".B2hoSJU!(TM?N8iKq!ZM%%JlU=L>G[-A##0+aP'K%"'$+.=I#ic&M0F
%=%1\M[Z\Z*U3uGYQ,;0i]JtK_-Qub+/-OHe3LZXhb1/F$*hmDloI@1nR&odGD\bDR?LtC,,pW)M#2V"#<B20&RD"D#7+)\u9d4</
%5?E2.BiV#k@O__tK^XN])$a0U_r@gsc?QUW2NLD<8JYAIXR$:e#[e.jDMR\Sg?IPPE^r)6ifGjBN;ujo6s]RF:je@I5HoPqSa!?:
%+eDk9Y'OsP[X);PiIsP=EmY74?B@;].A924Ok2N)iCWddo&3t2,QnngK0XD>o_!!WA>@c75e9R$*@j17+'&$ioX&H-0@*X"^"h3Q
%FYm.diQ=F"W!!61:9W?raWAVc]]>]@)-%i/FG=*JRV,cb]<G3$Z(-1BN3clla(Jqm=k<_MbT#H:\htJAlImcp*;&XaWsPb_d@2&P
%#`0j98Vk&?JTUibU]0#Bq-$)sNaDL&0.,HkYoRTd+`c.W*DjiSN6f3R'9u??Wn;@^ODMNZSHt(PI571pZ'Q+]9>^0@I.a%c!rMZh
%kd?#@g`B,2jDP/=>]W:N,\1=g<%-.d)Hk#<(NGX(?emQ`aWIW2ftA(4+3QV[#>'$;PJ-mdM$3n54HT]B:gY-8iYf;Dl9BGT4iB''
%]*Id>P]U9aLp2No'8l]b*kmTU]6daI0lNk%o'IjBP0Fi/Olmp);X1&/*1Q^T?bq8OMo@@]F<'!qQRkrFot#_djI@C*(aU;B%2mL>
%<rWTO8BddX&7BZ0?HhuS[[i\&O/6^=hFIqg4m?`:Nhp<eCd"_S#jPRDJVqU%j^WsK+LpGkcDa&qX^d]!72IcmH6&cnI(LOcfQQUl
%Oq'h)B,Q.#^k7E=E)q%]/1MVo>D-^lO:uuk)`(Z%S<hbaoVEQLpifqHE2l0c_%UnJo,D6#jHJd<n$D)A'geX<nfs#N&a_>T*8Z8!
%4dYcMg0rtS#/.SB4,QZ8L_9;f)i17c'$)d.J?p!*B&Eh=d];hW9!W9cS74o2'DpCgZ[u'=+G)k$&V'A6l.aYWAXp>60g2<<lh@#g
%KJ+sLm1;,cli"54L*uPLDd`%.VCEW,]!(JMo:^W<V!b'H2;tQ]Eq]_O1X:9W60q]U`1F4`Yne*Hk"'/m&e-:^>h(tRQ5+R>oQ.42
%bhC1b/4/E+]^;`iI]Y.G)WJKAK5/7WTNOWi4eM)/'^*V.ItCE/Kea7l'.8-<;33NWI]Y.?HH!&#Z5>s`QY_sbH&/k898"b&]'`P;
%UG.9[G"78u*pE4F,#FS6YNd4,F[jCmN$BR(CJ/keTZ,)*BKiMC)cUNCF3Y&YHX0$H>^F&l=Q57^pMKLf=M/'<\ou2'Yi7S2M'5pu
%Pd+:&g0RA7bpq\5eIIci9dQR9L6ss1qnWkP`DDLX#6;.:Dq@q!4]f()eQLR0(e?0f*L,bo`qFRf&`PO2pqi;5rd;6$/4uAJDopV8
%c_\VZ;V"PMo.g#[(i-5cPCX%#q6I<IojFZB@L7#9Z!cHH"@flpp9M&*=5pVfMmMAX423A@QF6pB49R$-D$`L?Tmb>M=dK9$W/mqr
%Hm\&^>J+?JaW/l(ilU@;Nl>Te7i:us*H2;9eNJr[8=luh3<q'ljRfaf_]>4n$[8CO[Dg!r*+6>8)o7Ur5N]eBC#=_!jR@6>rL7&c
%VMA]\IU@jG,rZC$)fn4U&+A3]0gTCsZ!gO%[:1Ti'<!U<!AP*85r6M@dK0fI&co"!?%=U_CeskD$(pO?_!4h*CTl41X@mgqJRhfH
%c6h549H(@00U*;D4Zp8XJtarZ/gU<Jr!Xgn2^68kKU&S]1m$(KnU'mm<;0K^^o;uZT3N$&[mYdIEC+JO0T[,NIoi[CK)p%HIbaS4
%:fN9<QX'Cg1C,'s:9o:C4;*mFetUfA^+-a4=PJFT&%iq`P*&)r[mj3JC.l0Km,(^lLC6bqm.VUQn-12+icAca@d)NgQ(%NSA3-DT
%HK;tVV]DKS8L)3,Nf<k)9,59-OEF"(bdj%mP?bM9@"K7lEK#&b82&.>%8j6,S8S"\$?0i:#on7r[ETM%0-q6hB/u:k'%tXk1A-=8
%a_C[_Bs5VW/Ug$30Pq'eYXmXC?^02flCc]3lgJ,Z.R'q%BpY4Z6;NSB6[TD5a9'<eoT0$P;P!,c+*r<kA^Bhb#aV[bq+uo$lP3(<
%)3]PU6Cgs&$t(6(:la4m>hXcP<.I>9N;*O$`Z@PaJY'o`I`(r]WO0NeF_t"@s(Un<H>McL/A6<0ocN$^%D*c\'L.=qTFD_D^`IaK
%,9mdqQOUm819([upto<%>+64K:1UcgH/#Kl]Jk!T8JF*Pma&;F`Qu=OGt>(?WS\LA3$jdTo^)t]6&[Cc4V*+b#RLgj<F_genN)2E
%8r!u?b4c5aOR,,420K/@K'4$t$hNH&:D@+3Y+!.<En,6['6ChYAR,QELBsO+2'VNgR[2[$BI'Qn@Gcj5WuFu^C\,,upk6S)YM1Ri
%$]R3JO<K.V_[#8Ll8hg^bnR_<$W[4CPM+/Qb85EP@^nI8RqbH![>W]kbFGP+bp8Js*V]1VDNp*N,qYB'_%dl>c_8Qn-MYb;h\Yso
%DHO&sH:?aq(@BZo]M!<seSKX5LNWjQ<8p?sY6q3A\<ieGjD^o>EuoBl5rQ@^eo!EJYrA46r@N`n^1s#5:r1ATbSIA'e9?OrU\Eqo
%0XC!qR#?_P@<LR%]>DnSj4DGd8#e88aLq.3Ub-8?V_$-I"m5GOMg$:`o2ek=OT0@B@k/I9BU<ZP\Z@gg,[f0gZRV<WMr6:kb!;U-
%94KccL+rYpMCfXE=\bGTG>&*D>p[Y]+j_/R95TVe(LF.*0u\H9_"Q9GI^WfC!/OWsE6O^O:amU0F(t_Eo[cdjO_R(&[V3-0CtV;u
%Bfeq7]7RHE"Vs#'$f9o]8rIuN7n!/`)t$"HV;>DG7udaB>gX>06b>U+Q@:JgIO53'7D#a,*"f+`U"35U!q4R8`.nF-EsZ%(Hhmn=
%GO/*W6%"f!?Bf`DiJ\5"'/FdiEgqjdA;Q=6]B<9[H0iUM0<+*(UH2pcYF&9]>1<q-Tee%#PDM!Qe665/RlT=#[)]nZYS7(tSps)%
%@'2$BZ)X-8$2aHtVXh7;fW;o`d"-kp]BU3*JmR(+Qg0UgGs%`0T`@4Ib6FfGno<:f"7@"1QEY&[oGCqR%6!O-IK=!lm)ki&d#t(9
%p\_)k,lG'*IX;tC^5S;V5h'-6rSFZ=F;rWnKd/*,p3q"X.%E*E)"Ak51lHfsr7d:7het!dpn6Fe[oHoNY*12?s)d=5DCMp>S-@)q
%JkiV8<qQOC@P&UT&a9D\@1cc=31e8-$$@-.'nJg]T49K-fQ6b.^*pJ0^,]5p@+NfZR=u.IWl#FM84ME@F\@'k'd9c&97>l@K\\`(
%/W^NL7(9*cLpq"k[r-m6],a),HP+8-M+N,#R#H^`qcDh6FufN]i$G,IpYMORV&ZtbIVih!C2JN0SNE5l<![s'/Wa:>>jRBcPltH3
%:-[^GABCrY]joc6>r!(f'q58uNu[P\>^A(=Xdr,J!8X,:pN\_<!Xb5;Q[o3bQcDZbjX<55k>X)(^,I?eKlWXh:*.Q3S'iZ\I(4sa
%iG2dI^BCdg6V#)npN(/pFN]8&,HS%V<"X;20[k=k86<*a`o:F).Dr16!Y]b=EBKLZJY.sSq51P'8Yp#$lrV#@fDM/FHFRY;;lc&f
%g9Kf4ZSG0n>PLRr7/:n,[c%=9h*!Dq2=GeVm<S16QHQ^ba8JfhR(fZ*gn!GM.(A$pYSSfmP'2l1M?WsU`<\r4q<YXBB,V][fT_jM
%-`1MuS+<sA)7%%-MC9HaR%p#0_^.C;NFnI.F;YmD3/FErWVcZ/M:.jT0i1=j](5KfgD3>"F,NA*g]f)742T_/SqjJ#A?7?JQ4JR1
%\."R%F&)ofD>g/4!d2M%)k,"*/tDs@CrMfKQ38?VJWJ$ek:O1_k-9Fd_@;Lmk:[YMX8Q)fK2J:"J?d1<&A@>TWWfnOci#bsIgNSC
%GFbn]OR+7(pGU6p;nTPM0BqHZOrDK\FM`A0E6=lPc!<1I]_n':D@e8`IFuZ.C"c?-f?A<%f!@N(2gcb3Z^#bVp*)UZ;k;OOl+n-J
%D7\c0Do5T^AO<&4VD6h",dHHu-`*@NS>O!/:n0MNY3"'_^I<nI\0d%oi4a3q/u+sZ./nI0a$%-ie`U1acJm7b7mG>)Cn&N.T"5j!
%MI``fLI4_sI*](l*g,/rlq;D**2>#ZM(S6)nKEj^<f<?:cnrJh&QKYHr554^c1a?D]h4(jW_<*[BX\ts>H:8Pm;k`._lgUDGGdsS
%.DLGi[Oh`big@Tdc*tqa\PbZ`U/T&Sk-KhU3pW%tMq<DkOPX2\Gj.FGlX#eLh<EQOpZ;:*Xk,:o8%@RTfP*%Oj"K?$V-(QSinot;
%asA:;<W>=^\glAe@sL6]6$tBVb@(!?>qI"dMPO^4^nh_Ga>(-`ZkZ*=;6?mlR&Y:8`\_02DCi_OF21K`d9\u.c_I2dmC7rI'pUCl
%T;dN@d#U`_Ng6TJ*YT#\<u24*^c'noU6qVThH%S*NYCBuY0mciR]>n2No1%P*Y-f_oPchK&oQEWH6@'F)P;'&f*dY\h\p(\'td09
%+44(ZORB3`g`og@Y;p3r(BWLs8PXXtH>.L"VS[:apLkLO<L_KD3i=mh'iq0'Ama>e-$[-?h,5fc6trS4bV0:tV]])&*kEZcQ1C['
%Sg,pK<QiCmp&:[hqC'bKXkFPe8%35["JF?Q]/KQih#4A/IN!dnWi`;RZ8o/QLD&.>T8OVkOfKA>P%l,Xf'@b?LSs6;ngSH_>Q_Y+
%6a,d$b\XK'A!i-ke.`9j^`oLo:1H#r)>0lAcmroBHi.pL<>7Gs"He9IUTKF+2##ZXU(`7iCWLadVO8'[m:i"DR50QnO]%'9_>SG'
%(Ai.(4<e?lc$R7-[DR6:],eL'?mg7`<NFISX:2cVg3fTpjM[3jXF/0aild"-:Mh1A`9N`]W.d9nm0M8'#^,O])#FE$M_&>3WmlJV
%iXBm-?,*[M#kF@_Hfk9X18m>OeL%0&/M+Ohe1]FH?(Z:t2e&^bV2;m7/E:s9NQ=L"q!X`Z?]ITuDr*jZYQQGF4(k/u;cQ2e8tmQ'
%kRC8jX,\)JKhtY:U%R#M2]L1n;o)D/,?.j+h=#[J0g:;j2UUJdV5J#Gm6?VL1^PJ9*m]*mF6)Z[N@;/59cn^X3L*6@B<,W4A%Nh@
%!eEc+C!eY*f<Mg^\dq=#P"bauHRM=e#ObXrdf&t]-QICmg\!TS7WO__Dqp;4s%lp5ZON_L<LlrSHLdJ(R^C-jei<G(+>t^=<qZ))
%e\"D4hQ@o9:R3j-jeQs8]a!2gdR`#0^,pjZ+F7Q=6EDQ$/BRp!5#d20aXb&7G<j9S`(-%PV&])k8!/uB^-.f0?&r!s3?0C:*ec7K
%D(7AC>3rIB(cYdr2C3'jc^"t/RqrKAFi"<_B['dZ!2p6iG?(T'Lf7I-BA:Jh`S1_gk#HO9JH.i%_7h-*Xqb8(lm,`1a])&NO796?
%fBF,e&Eoi40;k3UX[/Bne/k*?OJK\D.*Ha,269i9p?D#-gPnQZeeIdM/q>#'r,S3(U'"tUWg7=V8A:tGY;DtG`C,8NZ=o_jkfB'N
%856KTX<El#a/cbb/O!$54H4tm]suU#p5dCAb.Ka2-_*h!=PmC*UN4([J-T@+o@lCG=#AcqJrDXBNB!WQD=^\gO=fg/X+_SWg`g[=
%R;VEn(UE<nOWqr(6T3Y87nQ\m8dYksmBIq6-6^W)EAs`3'qVC7c\7;da;BUI=&"uo9%J?h6^BOeBZj)*+M9i!WaK(JAXQ53RZ;:l
%oapjp=S&5P9;miqb+n8Z\?RT(aA$X5o.n:H,/`i\-[2qJ0C8f,$N7AQ4I7&@$b8ue)&nD:)N.]ij_8YU$`-adhdR3t[f+B\4._8u
%EV=ZAAK/;fnFf@ul4dFu>*f]mOS9@DNcj'9!%qQ"8nk+G\F]D/^rC6X%k*4M>*Z+j8qd=ZI\(Kr/*s/Hs.NE%3U;.nZ#73>GGRJe
%OZW\@V(_F8.`9R,U=Ig'U-"WbmAU!9bH5AgWl@Ul[EA2J93]u+\,`b*Zq4qgY>[qW7[;611g9FL]nTk0J_OWA\\H]S"a\q"])nR8
%M:nhWfqEVbp@KMAgFV<hL]e4&>,5gB#?B:,]DIXIf,]\&EO[lK<2Js)KcdHiEAI)%R9mDhEungN?+hUlTK,t?3tBF1LECTKNb+fc
%;7!h=%($uW3u/5leBgD,'I3gjCb)bZo$SgF-W>4spWG9!nPJ,'$q4AjY>7`)_m\9YE(C;fVCj!:W)SU2oC-u-f+RAbbs'0>W!rQ9
%^<PcZJp;a)pE`f4Wka[O3uh,,ZmqB-Z8+V1Z5Em4OOL[JF,>4&<O'%Rb%XVi!gQ`^6ob4%]D<Tc*^R^-D7Fr!E/=NpCbokt;mD!9
%_`8+D<eGEFMQK`3]hI'2"!Kc3.on/a&&n7p<*GZs;mW.9]D#pU*f^l\Tj]QN[o.Mjk#*`VQS4?q]6^>@lJs*rL7BJsoS>XMVAJeE
%e."@L[56^oI90pWQO'C!7J1Aa_b)cqO0;'@NWq@&]fg[_i*oU"'<pMG7PnM6ar$#(&(cq'qD\Yq:d/5=UVTT9jh,prBrOTF.!-Gn
%*//LrXt4S/f+I,F893J`1XXM^[^b[`;\B*d0\&nQHD_H#^P%_nfa"8GU^X/]XlOS0g6ZSfS5P!:;[Hbk.oc+o6idrrJ6^6FiJ4=Q
%5P7@u^H-8o<^@1GZ_.FKiuI<M>8+4+9"[uEh!3U\r%f)F^FSha"sA(Npb?Cg/6.n0:Z[I+jdpfC:Xt+;[u(_Dq%KGm_ddWH(2QU+
%gfHqoAJaCD]Xa+L;I:/CbY\.8ltL]X/!a?*J],2LQ4f^i58?hP>M36)WXF`BIh`X#J=)MrMdhAQ+9[h#7\X[9':#AN4i\H.ofD;I
%*89KI:rkq&F1.dom,3KmGS[ueS$QeE2+R2"@d"/q2;sM/X)GqALtfuT?IW_UgN$(@;'\(T*<U*<(l?F9ZTLtOlV_7J5Q,:=Ra!r4
%&>M8%]dbrO3e_kZ=i3Fi((!NWq9(92X<j1>?<!I&@u2;1U59O7)S#FPTT\f_mM]*35?h*FWdn%9jf'EGCq$B67A7$]:.l'',!\3'
%=1&juKIV]f:Z`DD_q@o7JdH\A(r'<(<pDTM.WW0q6X[T/o"4`^B$H7?=fY_77*KLJ/&Vc)n;_FE\gM?eX'-Z!<,pep@Y#;A:Q(s@
%9Jg\2H=8SL`3!&afk#W=7s)JEqJB6u3B`'mX4#C4;<p5Zl:%g&VROFFU"6N;mTNP=890ZPhp[+\)J:tu'h[8n.4:Uj^di2U]^]]K
%26QgqULHu.-Pja4br=Z\b]0:F4EPr7kAkl8[iGE=QA$<AV[c4el%h!2eSVA7F>i<Ie@%8(jrR$"5p[_,%i+cbLbe[1jjMmCG>AN[
%+&iA_)=Rg4D:%*Q?m6=.bB/\.nAJsdmPtPgg$8O-OuVY:F.iub3+bOe]"a=Bk0+I?=3]`prJ?Q=.^q'6%"4j57iVFA*0GkXFfXX)
%D1Y3!gd8^!o/PA3godNJ<O:1;D/J*Z"GebXTCU%7!lLY\mS_%/[mdYQ%F_"@BF^bS]@CEV6/Zg@oV*K0lI9n?OkA*Uk(_7T+^4V^
%4Eb0W*iF/6!9WQ]'Ibq#F<m+%LLR74/9.UlYt4^l(<(<&hjtqWYtsCD'[%>nG(e5Cn;SGl\Fh=BjW&WPE.u*-O@(P3$L59_@-=Xo
%&`j?eC[;AOZ-_B`B$nP'g-`-d[.d;6+pn!k5c_Y6E.jj,o.iNe/*cYQCr^n@9@!')!=V=`9)j-L(>@6Em)IOC\`Mb8cnFouG6rT?
%k%3oQFK]O>*6-uiJ(r^fN&2_MebeBO;0Mggp?.uo!0T24Y<fee$EHA)fu*$#g\>4q!DEsfEBg1poZPL!.Y!RmWKP+'EQD`aNp)d7
%Y7kMO$3Nn^O#b;.2#t>JV2F7l6B(NZrK9@WZr3CI,sr?Y0d47i'ojEd@J]JKC5MJ]JUPgZ4/3g1ITGAd(s,4VXF[@Wa,>sr'NXO!
%lU0V!F'PT8:bbH/]d9TjEfY:-e/K]E=h2e4B)DFrRk)bM*_su.NM"'4R$u![:cH2>Ci/2W.V@,(YKu#4X,^.R<JDu'-?UqeD=N[4
%c%eYf@G_immrTi;?:1n_s62gTn^)'t,K:aMm5\Q,k":*O?T>CW3NJq..\,0tb\(q<p8E>[8eC<X3o)H2)/B&t.qOJoc!]0s1a]c%
%IseSs3]d+Y4!kH28qUP;aaGgPBuqAsEGI6%8/4+7N]F;'*Bt2EM%go*"-LK(Hpi:fRt@.f#"W1e);A__WoHb4Yo<q'RnC`pE+[o/
%F@Ki-,i')1M*J0Wgu@h&0JiE>UjB]n'Bj4YH4H,k!#MPl`huP=!jS!_ah4Tl`$s+?4"dNrH^#s#,:ElAV'2&Bgs`X2?ADOg,W5ZD
%\eTLJct1Vt[6G&#nY'+E8b?N'4i+/Q2N@eF\c&M]C:5M)k[mi*=^h1"1jJ(i*=mWX$UUuZs)iVprYNW3_W)>nnBkTbb:Yi(S>pP`
%g"S[nh<^PPH:qj$jL%o,p6k=Y`3u+,_kU6s>2#V:ln3hPD2l.A>)7L7ZRI.q*IdpFqK6YP8\!07.9?ZjGTF=h:s@PFDZX5LgJe6i
%Z,)=OD^]5:6gAj;RSbrMC8JMt/qhij/(DF?BZS.uZmBA!s*hZ1KT&S$Yo0r!F^Z(qDj>j3"2R#+bo9VtU%8S^eY?oTOFJX&)BlRq
%L=)5_\!?.l,Dk^.r`aE2g:bfbYRosdI`@qs-,r,3T/S$&"7^-0ld)O(4-/Ju[q'dB/KEf>\!gfVHc*$+H4p\%i*P/\<As":-:#@^
%X7"DV]sd_dfXESt#sldBUMcQO8LkHTL`T7=eIUV_+G@#I:Ebm:j(XZUI63[FJEFa2enoluRM5KD9)_,!g,CD#]..Wr!Y^Uc(4jgC
%Ig%H0(@C5O.PR2uX!<-*`07ObOq/A?'sfTQT2DA=q0_(WIZ!1IJ^i)4T`";h3-TR([#D8R=ZU5n>$hjbn[pjoD7"0(\U'b.YCZ(c
%q'^i9:K=LC_W_0+7D'U3W:^gY\/MU]S@<:_(`t.LdTXNDW-o@9l:aV0;IBA$[$bYp8TQ.g,Gi*2?!,fpcG?WV*!X"eZ[l1]i(O]/
%/K6gNX4OmZ7qZ\<Vu>PN(-IOkim%N;$A+a'7\MB1?&==I8)-OX_R-p;lrnlVHrO*BW:g/F>h/r.bN4dQ'Cb.c)nP7eT?j_NOBhgf
%OpHhW8g;9Ic<J6D"P2D6\#6HJ2C>?kgRF,#>NR^apr1M03)lu+98)Nqc/hCfq'(I;i/d!fbnV5A+PNp]i#E@)aqT=%*L)i&Y9bbR
%7+'S\D[m'o^"RHqALJ+i^d]_MT\<tGf)Wj3ll^DQRYusd<-P_27DhQi(k#ZnfbbRP`<,g8lg(!sZKYrV72,W@H(Hp@&2jQ*+fWEn
%e,1!SSbnr1`YQfk_Rq89]F.F,1cg9(&F?b:.<']+HZZn.Lc-+pa3F<(S!Zd1*%g6t05u<oJ,T@?drF61oq:oY#0,l,IBYspTc_OE
%"*.dT(Y:7+X7@_9>X`]kF6B[..t.t9q5WkVY$]@\TYT[CA1Jej^TWf3>VED/(R]6-I.Lirjk&bnHF&KX]7gA[e,c5rC*@!m>V!NN
%/>QK`Mhil&FY1eocTD*u(6ZhT$n?F)84;B>oJ&s-/QimEfW[aZa_e75_Q[h<SVHBM5B!fgeFlF=`;MJoTEOL:mrV3g#N!<PY'I'p
%m&t@&4"V_0XR_`[$]2BB=8lX5O:W3#Oq/]Ke[H"*5_>aqbm174<M2.M%$e-dZMD?M+]4r9YLR"]M!iuR(CQ(l)*hl&5'(aF$V;#.
%%c$qo'R?"Wg^7RcXJ*ZJBg2.*M1Mr'.p>+AcgORp]"Fek8t<gnkSO?lkanlbM>h?=&h/X3*Y/X8PpKLJ>"D23`!m)GjfrR*>`Kq=
%?,^LKUdDApD6]1#%D9.BckF(M[^Z-MUk`.cYk.c\JO6GBO',@6l?&F0P&MI22_cj/,Q_F\/L1XD=?j*QON7Hpq_>&lKl#AS>j7ka
%*nClo0Qi^GKS8pjr%sNI.V<lhjSHsBI5DG!75?h#2qdAP9W-N`pXnMm6/9(9M*,A+f0e!>]mUKm8p[\!M1e8OK[iKMjTTre9dEVD
%FV"\u6kWBCC!)5!fYH!<H)nFZ$hV+@Wq3"3eP]\B].BuIkjGbG!iP7m5$J$#%22<iZqYm4Qq3C)85X3t*j&V#Bd+]t);I'2I&H"=
%,&%aCiYs4B)GRoo7!e_3J").f,H6p*Kgb?$87`=nGEF-:Mt/rJIk5AN&WB0S,5PP5@km;pYcZ+QIh,r_WpZR`*t)(Ra8/4+Y_<fG
%/Ykh@Hn6qVcPN!0^?<c(\+2Rcs13nP6#[0%n]U84$UkhJ1S(-elji_m'P)<2^,i4tpV9Adh2$#23j8"rH/oNc/j]n6Z<8F7eN_1,
%Ms!s0%jRXC9bdu1VDDBVTtXGr5XP8Bk@74$"Mm>geW!1N!!am):+AUf?dV?:=Q*oRqOHVOKHTW[pS_uL(&@dlSs.[?*-HVCc?7Dh
%>*=fh[**/@J)=Y9X$4[*BKOKrZA/5"EN3%;pWJYkNjo/0PJ&He-9=K+$EnG`cW!^eRqhEjSs'?CYFSmD:L''@ceJ/AX9FA'BNq4$
%"<EOJn1!_dal%2>*.7a-cegRgm,UU##Ktn[SC,\(pG=XYJB:rIi&N8c^Wc*B4[4GN('o/_i`5c\FMe$'#d^!e1tuaNJsUoCgf`aO
%ru'Y3?`rWI!Z]0)?nDcU(etsbY&1G[]2DhVi$7h(0KWW"6=lY[aDrJEMAi9P[3]mp5a>i1)Kh-&H^/[T<i=Y?EY'M`%e6Bn=IR>`
%A@IXqdiMa_'DeluiEZnW$5:K/H@WPa/s0OCa,0,K)T#8hD$D)%I*7bfDAaQN-30RFq>^4qh`+mO];%$ZAbZu?-Gh/T#>"[2V\+(_
%oo]V'XR>+i2BYhQC80%HmePVOE=+#Q\2j+ui*7D?6n/b5"J;AGoeZ5RZMJ[PNcdpb2?t,MlQ,-nhL`8uqKR0<[I&poXtPW>ie;Wp
%EpN$<malR;A2D$M#ca`1)s!@b7N.aK01/8ahj3N-([QJaMddBr#jtCA?`Gq36,^8<.2hJV7R^hNLNhQ!],"0nR\Z!1N>@Og;GTF+
%h%<?l</%?>0krV(%R)mf>HIH4V5c+n8;)5_SdHYL,hLSLUl#S<Fh.mYq&l2p`WuQ:j4dM<X"&lK?V2UJpT.U:?A;iohPMl^!4F3%
%/sGBuHqt*uK^@I*TE.uG:^"+.O*%-q'#k,T1/USN5+L$V3Jpj0EK`n[o.CM$LOY`Ad]Va2pkI\@lEB`\lhCGHNFR.29??*MU(`QO
%ZK3ODc8ggoK,CR/AW/Q!KM5^U#%Eu;b(P*shY_fMIabaAU#^Y&K))4`V2`C>LpW@\_::>XL&^&.._2WQdCW\4HCLltQokU5K#JbP
%=EgEg)-7<EK=`V.7SWfnlt)=F:+jm/>Zu/@&*mDQoHd[Fj$Pb).j=7'GG]]P,-I+ELctmHJRE`+FZ=Uu.j-?/HVZ26\,WE-8Ds'\
%-!f;B1ugcbo^U]&JPQ38Oq+LV;W("N'XI2:OSL[N4k$(t_ctREl1O.P[Li0/3iJru.uZ3f2p<WZ8U)Wf4deOP`T6M1GFF-FH+,=o
%Fl-hjr;?f6Ia`k;:)B(i4W7RS\^!qu"&gVX1XUcQFAmU^]=U1Ud+#+E`He0b-QkIXNX$mTL^f6$W<SJ_]dXhaI4DqCIo`;IiP&<7
%C"`*7c#?P'^o@\@QGL>Mj1>Qk=*]5jZicpu9gs%;e:9cLluS<:3?;(MpVf?(Q`L-f_$Fn[4Wag,;S_UX?OkJ(a*HcBZKFS9D>V^*
%5CD,?"!VCJ6AKCI<l_%$LgL!\N3E3,qRhjA:&MAD3tAC=m4;Q7>b,pIr]lZ-AgVSV8e4c(mDdcRFj!l?V2(C3#GcYgIM0r,5C^3'
%bX54?C*q*0BM1DO[2Mj(+WqU8o;)3EB0tT2%J%PP-S]ZS&/KGhH.FSgmRaM8\*PaVdQ*lHWJstpfdXqbCQ$KM6cRa127UJT2HeN'
%"2ZGuOOM06*f4XRB%#\^-?_Dq'Rj9MC@r`<Er&9RDSktRlHm7mO[P[KoA:)+[?$P:QMYQWcn/&N7`[3_4I8$'a?JWR7L[E,17EDg
%3slS_e"`)nQrH4m/[W^L]Cnt_qMlZu^(-s/K-X5h\F_%YhEr-I&CFrTAlXQu;G,>FbKt9SnO\]'f0?u:R#bXE(C;0K-WHkX_(P?i
%SuD(l.FF(Ak+\9\D[W+&R+Hq4,)k<&J"`KNq`P?ol3Oo;3T+m9/N^Ytc@kNg9_,e;8<.)**)iZ<*H&-<R8!H[VmgZ6m3@^2LJg=K
%`_>g-C2^18MnUc@'Bm+B?r>`$Me/#a7E)c'(b>(P72X3hhL7*8QaK%f[?ja^`9_c?9a;V7^>,@(Ze=Diao9*CJ9P%cTcC<,3LL20
%k,0fOpGC#&NbeeP-GV1af18ocSqYin@%Jk@l[.4Kb3u5+EjLC_O5Z$>b,.aW7bAa>;n$;9rPN@d/>j9)krj"u<k#%N;&jqD(q`oq
%<@^H-iRr>RHjDr"1)3&*f4$2;^>=<2@MJ?)8g;OMI]gQb[14E.gi&bd5P[#uVp3_&(=/r1\n=&rNi,5'69ApLFe:n_dsJ9a['ZJ`
%G;ed?49/=RD4)LUVGIdfRX_26iBrb<YN[L1OE@Sg74>[TjmF'oUL28U#f5,&YT\t/c.U;;dMtM:p[&cR7M0hPTgnqX,)THjGFu);
%3b)MOPJuLBk=f2_TTHW);cs02r4Zf`"c"1h++c506aG"t/W9@nGFik1#I)M6*9oSG-'5oC'm+"8=#E^o4c`Ndcf64,H(9(chYB0=
%moHPAK?NGpZ6mSe:`Y:Vg@+gO2B)eJOI;f;E3i#*Na[7p7TM;cm"*q#Ke.qkh\N4j>sa627:-hbLuVZ0W0-Zh2B$`FL$8lu>uC)S
%KJcD9*_,STZh^=gVGNaj5k&7)2QL#*$M+h/H/RGb2"p_k`0ODqHEtJZ,FI:-GDfQm%g[]SN0;84KbX/BKU1<)JXiaL4m!#OqfUJe
%a0t040\p;5d-/ejaesEZpNG2\XOQ.K<C7;n%>?ck=W_TDkEpPGald$7UZ9qQ8#Tq80\W;\nT-2J^Jo+udoI%>,Mk^d\-RMK81+%&
%#hs=p^5%dap*DPg(j:%_TVCC?8I12e'+EVTe.IQV:fb!I>:K4p@=(q6gmTJY&d2>S%KF:Sd-Y%V=#a7dW00FOP0m2*Rlh%!:G&+;
%=B!!7G'F#,]TK88VbXE``,#?ZXh"#+XLX.ki+7'(<b'ThWXIn%-o@S>G;aGd]q&?L@c2Te!(+2timOZb=X9eIZlK^FB\BH'Y!;N>
%ZfB*3hnNDuWp$X>U(%\)>6L5'GX89n4h@76g\o;i)Z*)SJmi3L>5W3_2A5_rm=C4a9`;!bQFKbNLU&4ZUS3-tl3eW"/:fB(8TbGS
%$RBUni]!N;^-*?JLl+IucFqo&mb3sc9KPIt14q5ee-Tb6'9O@4;(j()qTSgfO-nR,]kdX["bP9.&&UOIc+4@G6mO?L4iGjJ><ucn
%iVdBCWsN5=#>G>qT>jD9fHBU`TZB"=Xdf91ZYcV>!]O)1/W@S?h+a&BGB82+1H@)Bdq6kO7O:#iq&CfDHjgWNN5(S"_u?bdSQ\PU
%GjVhmC:Z#NX:^Ef6g]c#![^>($GYj6Sb_q=WH)S#p8gZR6>bE&oc3W?IToo'=.)Bp@Z0FP#TV;b09YqrM=rS"IM!L&BtaOXIRbMq
%$q$1T[(NS,qi2$I[ccaU8sF,X'S7&KVrQ`dHM6E5/4-`J-FMMe0?ettjA.XVndCPlON>]FE,UYn_K5nuI-HA/@DV5jA)l)g+@_j*
%iDd5/-LK,FK7l_g1I,;]M\\K=AS(q[*l6c&(VO(W1D'S#+'0%#&fhp=P,^O,`7]ZH78u,sUeFVFg3&dJ?lbnnD;Sj!,lk-PGu1-*
%:eFBV5>k7*l.425)V*$6DphaO!]+__dJ-O&A*&7`l_Tg)DQ6X+Ms5)$rWQO!YK_+](.FRc:QB6.0p!G1o0Oe461^?P5m;u;QiaXo
%rpuBC++YTYA<4J[aNORmL).GYQ_/Adf*`#LN&Em8fWbT"':aqX+IipY<<4%HN1O@.=AlAY8qCVBJ*XuFmtLO*0ifp%JTl<":>k;8
%ZcF%?435ET-WH/#(0Y_4rFIA.JE.31=lUG2ad641X3`-Tc_/`;H'N%u>C'V34fppHq(mPueNYc6ll![m>cn`,Ip)1ck-'qWjR>/r
%OEeOrLS2f6'$2*n1=/ZZC6*)odBL.+AKOI6A&]r['pc"eE`ijEAe7.0<CaCc6)7m:R$-CamoAtj*l!/*jT.>Y9uInuaAoUs:NGC6
%/`cfIhs"l83K:W>l&W\X@LqG`4[4Q:+Q-kN#oRF^lG/!!-dCuY%F+=P=`6qm#lN)JnF`BfWKISOP2ruC3o$4>De'K4*DXIIcddkX
%6>r+"fU^GEI/,7=\`&nhr2mUr+%.)`H[QG>$L7IiDTW3NGJ<6qnF`BfX^I#L`eYRQb`a(EART_4epurr[</c'%Yts#@%?&$-6LW8
%gg/rNT],cL!W2kgi`F'MoSUXQ"s[RN9Xq!eX`%DHI(pf?*9So[%Lf3lA:26Sk#BQ@&r6WG443),>4jBa-e,<nO$H7Gk4_+*7nn@K
%OCnXN8Y(A"B?YpM(m>YoRJZbn3e(5!NkRf"1?'FTee;"i3I5ZKqLUAJ6oV%J33Dk@JiLS?$oi\]\*(DBc#OPRkAl^%S>ll4^DWO&
%AP%]nNj+_J,H>U>0/$u"pbA@6]1'?@C14?s$j["??EtFq.,6f!:15*W'=X6W7d4Z&K*!:0oj5`GC_G^/IX-(8=[N[n@#505MF)CJ
%6s;XHi_u!nmm`2lhEM[[CL8aM,6mYI:f3t$?FU<TFh(=aV<>mA/?lH4pZg+bPiEh\Cqa33:U#"VR0Ck^Ym6>HibU_:$CC"1hOr_(
%IVi_Q^r(n-J5;ndjIs1[\_)4D(`,g6k@4t6Y0#R%b-$TXUHhb>h+H`@r+&ud:p:\b'o>C[R"?RdiR"Vo3FFc6gL,H%k)Y@sKd>/o
%^#6X&CcguYhRC'Bp[`:U(t<u31%)O&qb:'04T#ac+U1E\j7"]G8d^sr\IuY]Nu9pPKKo;E^>(H'3F(C_g0>\@m(l5u4G`'[_HH1f
%P8NWNS+(F<ci6%tJ=<PSN*'>99+C,f%"C"37I`p,OKe#@<i[;:AHe7:O4kHlejD]IZRf.Lr8L!>\pnh5G4Ke\YT=OI=IfKNC:8F@
%c9NJi,1@E[50Q4_iXBq?Ra/Qj"(7W*5C[t]I5$;Th>dR!!Ja?eT^T-a:MV!AQCWX(eYpNVc)X\":)Q^6A8LStKgI7pIO'EJ0;cJj
%UXP.q_-*t9k5/f5X]!Ug5[k/D`?V$%^?*)d0#9/&X`^f1Rd[HZ(#5bY;<H)p>BGK-Y5jEpZ6)\l+@DipU$?\1&WG90\iP>5@mL"&
%=Sl.>J5bOI.9[aEJ\:NWbGgC)QMr=\]k?[AfCYL1EHM[n$-&Xg0kdn!I^s<2Y&S^mhsU<0*!:;%aQm+`FtlSNo4bHCk")\q3JM*j
%Q+c$pbY'"i[*,6@2L$++7l;]"NgJL`IS%T'#5r_khrbu`k6R`#FUiA@dubF/J@<5@(?Y\HVF>$D3X5qE?Tl()rJ[LsoaW7c/"PMt
%G#?Q*iZ19.[BG`(cahHf(]Qa-GUdjHQ4NgSD?muZg$uP,@,\iW0#I1cDN;a:kb$rPYO2Ar)i1G6_Fn9=,"R*k$#^LSgY;pUM*/ER
%$q$BCL=o$$J^DAjJ/[DFXK*?h=I?h#qa^#<Fh%m]oB25X(TH#ihN-j<nFekY8>*@r$GBQ1,44+0`CoDDi,,BY^_%l#qpe>I;\jc\
%oFa,F\"bN]K%a2Qdu"p^ZV@"L-/\lkS/*V]8kP#)FLDM6B!L%rjqcM.:5Pk>G]>Aj.8!l!,S@F+l\/Lm[660RNJYd8rYbB3\LrM!
%LT.hu,FackpuYPG1e3eE9UDu*F*Z%\Ge.pDkN&-/HZe@.Ll\;poa'oALbaao8,Lb?%kl,tpGiZ+H!5(O?Tq^o,(CQgoT?S'29p-^
%D8P29@HcTm)U?.s^r9pt[Yb]Rj(I]oB5,PkDTVjm>;d3Vmkfdup4g?*B7TcR7OQA5jfuH$)SVU0AWP_3::`_&o-/S;0hsr,0;5R#
%%g#>3.BR\VW6m3gnf5G&qXtOQHbJBf-'s0^^=,BWb<XqF>/@Zg09#=>HO*3%7d6$@!%D2qB_+`^MRBbF-$N9dY?.:,;3C%&5]&P[
%^?nH:7R:.XblkW1Gq:R8&n?)k>QuJ9'3aa,KW8.AAhZSKh9g<^1oRN?49i(/$.F*C$o#Q/NHU]O@'H-SA$Ot2+Xh0]q(i"n70J'4
%[U>\60,0dc=Zche#4e3Z:cB7@^rLS>/_;l'5\\?6)!#WROEgM(>R'BtH9]U?1*@/EcTPE]''/\Td]GV&IEt$oRs64-AOu+G+nN5o
%EMG5#0CGO&iTs"OEd1l]^WgCFl%"SqDkDRu2Tk,joX"B)n*IO*Y1C<fl\k9*T)NJ-(i&59I0RL_"UhaWr=B8lc/j7UkTg<mr"-U!
%o/HIRkTGeQF"u`EG`eRpH6t/mk?b%FUjYI7KWfTYBu).[0+Z2-R=BW_55tLReq1)$\@k\sb7/rj]>1!7ee`snYmLMSYID+d5_&<t
%%=]N-e+lZJImHDP^^bk15>r?Wp(o:8(Oq#5Rtb_2r!Y,-\_CJ!_Mr->p^?r2la\8^oJ(9X/3++^H2%cgZBGCL0AO=Rh$%?.c:>AP
%g,t*7E/q65I18o#r%t[nb?[pF6<^I:;1=<GmZo/A<%mY?jjj'qDDR<JD'.VgIKZ=F\Bh%F"tK(^<Mi)0n&pc$mgKS%kFplaMk.u$
%G$mA4;%B08^t#$9`1=5m@B7:@4Pn!Te[]t.2R6A]TS=7]=pu'NZ=.bE1IEr,Q+SV=mruJKro$:#>4sQ$?)7J00Mt-#f*eR>#8(U2
%]WRN%M+&#eq(ltKd[lc@Zg-V(/[),OV]O#T#^PgYbA7KjAq+E-fZd0b2UAq3YgVL"Tc_S<[\]l;WH@L'gq)?`0R\o!n@CZ1S%ISn
%X<ZeL(H>KRWK9HfTjjU]@@&X1BtZ1*Yjn&AKcdN]n9,UI<-'ZI<G-3#!U2]%P5BO6ClE,cBFOh+rI0s:OMigp/D=OMbN):k&bf?E
%iEi*!IMJt7oC<I,gi8\`ae/\#K<DE"#Jfo'I)bX+HY-YU?;JJj49"FqaC3/V_5)L%bG(P\H(f.[7,.B!XfjKgf%=(^K6N4qNP!U@
%a2-`3\[jjN#.sGK4Ol[Cq@Nsu.(F9.`;GUS>Rg$C[3,BFVc^']82HdXS6oZ!<Uo<qkB]@AGeW(CMG-IRbQ-QV.N6)^eP9j*cT_F!
%Cs?%e,lT3(4_N(U_NW#^NO.Gb0>RjU[+^Q2#7^?@mJqJW\T[fAiA%,a9!!9b@`1h&lH\IkFj:Ad(E8`-?ChRXg38MVU-R`BLqk5#
%2ZU:ke#7HuMJ+1lol+1DLi1hc4\r7WO$Od51B_T5cN_gl@'0dWOPo0l8nq^O)PkfiVoYC?AjsfO`j>n0e+cch-MnFW*.[\./eL8O
%^d1Wej+k[qW&?FA)!f!BEY4YVWLp3KO>S<5liP3,2-'G20m2.h$KBmo%$W.7P[ZCVEB@#7J3)5s:&cZ4@imotggaf'`fq2f@s;i$
%\#Yb.!bI("7WrXDj\Kj&N6"i1738b#'OcY;>8$aB&a[SQL`)BA]H8H5J-T34Y>:/Z(&#(R5XA`9Qe&5,55=Af\H8_Pm2Q,]JH:!.
%n0.,7fUG0G#ZY:\$13cl8?d]q/RB=MFf85-9:rTLmPaZM^-+]8Q/0,+3!B(UIVEf/9]_oQ3\EMhRKS`u1%,GJ_,DY$?3k:"AQU.n
%.7Pj<LL0,s=H0\doXs[MpAburhF1`m+/@PLD\RGB%#V#59Y<QK9@'7EM&AlJ0\;B-N,6K2@+Qa%3bb=>J^%?]JNcB5.t1aPbUN-.
%(qh^hf#Nt;*carfp-:O<;VikH^Ap\KhQ6*CmgE=mV>*\kGf)$1EL!i$3C)Gg>7BJsQm=p&K*3mhNf\OeSJp9H^5V7H@ou]Yk_TnA
%q'@o:X9SqA:Y_n$BCB>=.PITa5$[Eo"+o**aI29j2-1Ln+4:^@9c<FsJuup&5NC4;5!9*M*;VR6Y.O5_T)bc6.<p>ZMju=PRL%9(
%kVKpbS#"t1%]p0W.>3Y.NN'C&]l;AuDlq(86"28?<&(+qr:'1m;i]Z>g<8bH)&Dom7/5$>M?K8flr?p/?*>5N=9^4=7NSc=>\n8[
%rZk@`VlPZj^4i--BUBY07h)RbT-(tF@7S[oFN/'Vir2I=06b288Co>o"n;#($NaC61L)/Jf6):B&TUJ@A38I6BMhB6O]SiKWRT3#
%$5%DI+7B`$+U'%$:k4P*`Y1eH"p=h31&M'+&XKKSL*/Ws5K3paf5l&?[V.;.IalL#k&00_DPQbt!d3WP=OuHSj'tn.0i\0n45;:c
%A`@#*F.BKUF0Tq&37:2RUQM(+7VYC+=@'C?d)dZ.f4PXYF4Gi.:)!ap,s?$f9?>lZkHK9`$DR%H5q",uH8Y5],-#V9Wq)c@ik*LT
%jL\;bnu$U.BW'$IGJ['^Z3\#qX@1%fgTs(koP27f:e2Vf0-/K#6U3!>ofiipj'9G=JYg0P^l$C7kluMrk]i5:9!K@+]t12r6*Fdn
%p?6'rJ"\.Lj8Ir.Q'TW<7>MB=&.h(Okg%B)4G093"P'_)Z9re.5`)r77AOda:LS0jjm/;8To$H!CEc&*Hef"$h0h(W9tQ\kL8Wj!
%r'R]5?\e:DF#^nl9jf[DfA%f+frGM_5.SBd2`F10U-rom\tbFq&ZYFqRqFSg$(hD0q@#_d20eDhJLa^<@p:f5(6L@0MLDuG8l9s6
%l;A8n-mpO3mJD4OI`+Z/V?Mn@gAjDB50DI:VfJVnNtSMS$m01FQ%)i9>]0/aCq""VV)giR<J1&mQ(JUPfJkQ\gY<WIW`9S1s/c3K
%h?FPO.SbM'DlK'$QYX9.n:KmLU)*:GeqeiU,)!n9+e_os-?]lPp/O+FB^XSBTpY1rd-3#F1kpS;ea/C1N?O%"%Gl7V2H)GD>__/S
%57G[^[tS78LnfjC4FL:gqJ=!p/q;EsQ1D]Lffe^j#_$S7SAA">;,Hn!4eEg1WX\Q;\%*t"]O+tmFUQiBZ(qsb3A?8W5Z+3CH_:n2
%AP"=qgp'$(?WH.=o0,>qn2Z`[T]Wu@at#?*.,G._#'WO<BF0VY%B`.^TaZNjjYs3Q/Q9i,+EXo/RY+J3d2hph:gMmO\7HXM,-3UJ
%?12WlggY*UO.XEG``<2M>Ssoo3EW:k;qS=d3,EetP0N;;-)*a'&HIAcN+:ueVcH,lB(63[jd7GPfltnG@PR<s7mDG@7LY>h;g"mS
%B)_R:r><ua.pm+pZm59]^k$-^Q%_H2\IVl]/$>Srl;8#-*kWM6jV0Hc$?REf@8qXP1l="KL`9+lf8EFKONbh.#4mm]S&ar,Z063;
%KFf@13Q%^uKL'MMko$nVNU*7CHlBq`h57M^Z[$![Pd*Nm-M]R.0kPPT#GbQZefdA"X:*TR5o?hJM9]fR'`4E<@hNg.%[gYbj;%^o
%K\/4[GB#sU&_-[m"oED>?K\M2`qeW#nN)P+*ZGiR.:A)-kZtfRmc)F?DITdMai;T1IHXWFpD*RRp[W\N6(H*)mg80/I$jF.0dTr0
%))$!Y/&3R[GqFU_ar/S8\qd/XepNmHZUE^G/PP0VMhVsF8)qj#2?gKEiaE&!QDjT5T`2gE9LCN?;4P_Z`dRfIIu6L$?S`"=6_+^_
%$A5\X#R/o;VG]ot<'4O_F]=O)HP>j;Fjj4DTZkXEY_:/[8R<gN77Xg;=1bmg>Yo/=A.T.Denako!25/d&G'.qEst^b_EfY$EOOdB
%iCE24B3b'Ml*S1Mh(^J%(3H*NF&\aSi(N\q!>U]D2Q3nBj8Jd.WbZ,.fmAIDQX;e\:!sG*/R(-N;BCbN&_g1a[n;CC(nr4ZCm06H
%m'<i$MEH)L96f8Z1mNJYkF;(pD^1'hFU*&rUK8PVeG6L]\n`HI\c1KkX1dbE3hrgA_FSt_`k_L=Vn%>h;Y^e>'ESuq;3sNUQ@\Sr
%_[,6h#B(hK,a&[6(`a0=4tNKt1uu.Q0u"V/'/u(4k9J$&Sg-I>rN't*dj`\WX,6\]V`;I^JEPs@!&:Rm\Pp4:RH_K9T-Q&/<!0sm
%EOf)6rKaZH?RcqYjQ`<kWgmNsDA:fKOa.^t/ni&h6!u$[NAF8Af)\PY[$5BV?^Y8j`jP-13N@,`obW<!3"\S;BF[f2dej_4ZI;+7
%'PsD2Ldt,C69gpI>gkD5I.lTU&PO.nKeG;=o!XNH*%ZOD!OC-h+OoA="6:.p"&"91@h_^RYbqfYA]V,1'`p'`_tC/H=dXeR1C`'Y
%%mu/8<I:kGZpqMMl^SCuJmHoSDT'jn\f!$*_Pe/=!=_)K0T<;2#9k&NDe9;tOaOA:T$m&gJsu[/Q/<[%6b#j#nGqKI@3lA`*KU]"
%>'GFh,WM&'nnDTE=mnpcC7(1b6Zp^Ol1.1O,@W*@+:-">TSIL_C;`6k7PRTMh1hf$!+:NYMD%1962l\f@8!m&+gqQ_!FWi2C?i\C
%1ZfJecsoAen3E\RS6&cSP*!Oll%Sm*3fMgH2oZ*(&*\!+hBE*-=%r]X4hG2.1),k\c%DZsFcJ^mG-]bV_ji0rL:mCaDBKK8rF&Sk
%4lt^Z;2i=3J_bYN[\#_eGk+n@=Xb&2Pi]#L+`=u^1GEW\o6@HAc-tD."P$W(W.V/1]-"G,/o)q&@C$37cJ'J]i3&,6X/A6K5+J6\
%"qoYm4@U\U'0*+cpbH$HfX=C?G`FQaf,WaV##cO)csVmOS"fjC;*,lk'7Yu#p3u?3o35rl_Y`!kZ\S>Eo[qT?9>NkigndV&e<=cG
%eeCGU#F:BT1L^#7OrT>sPd%:J`!ICLD%L2r77Y&T7#F]'HY1eZ.+eGujd?,c.tX$r(I:J"Qq(ndO$<MFq`6l/A]Y^d2W@sR"ZBbg
%K;iZOCRP9`FVOT.*$F4j82eEMeD\FWbfG<9X.i&.j(#.K8LCbR[1q7F]-?WJYGDn;,g:r0KU>Nj`S1K3FGf^Jc20&0*Pk"tK#U@#
%Ut=FQ[\i[E\V;:+;-H62T>9.U*"_!q[Y\"@QaY.]72Tbh$>]_Ak2T2UIf/^5BeOAHR0[TlS,g-@>j:rZ:=Iin,F;Ij>7!&TgHJMZ
%$<J`)L+15="OJkYN3%@r6>.dO8,`/R3N0CLa<%eP(gj"%aD&nB>g)(eO`H?/Pt8>pIWV'S[5h`tZ)9[W8:WS@GW`Zm`KF0e6u'8\
%r:'Jq`2:2D44mpWa1<\hI48p61h>6BTWFEr^JJb@6TE!8&i'2O,/E$/FV6Ju'h<,&iG]MYhT$/QT-gWZ?+jaQ9?>D(AEWdLq:9H4
%\o&!n<_BlRraS$;Ij1cdJk4O8qVsc=,St).cncHN%..f@erLoE55itK&eNXD0<ILWT^Q]$?6LoTDFF6-*J3MCZrNru6sH`%Q>r*Y
%Y'_YsUrfHbEUMkBB2=Fh`n[qIInA,@&`DEe"f;LtFIGb]Ua!q'qu)-XI3.QsfG`Q!2)nba6r7!l46:g0U\T#g5CRj)N%2eZ_?5r/
%dF^E,;Ge2AIaZ4BSt-2+T>@BK#;H/W%kg<oIR3p$Dg33T@4FK4`,i,/<Y)J=ZG>eDVifl;o4##jIVDPu$BnI%p(fJr8nMA@\e7eb
%HF<jn'$QKHlC33o,ic9OOg8V$W/-/2)>`OhaYBC9(q9?QEVW'G73shFo3.fXA#uVUZQ2>?L'a0d(+<utm3T,l?[CEb>F!V^h(cSR
%P^3S;hOZn?HUfjTL':;jT!hgoPVL*.Cu+;+1S(16=lg/oCgH)5/gB"<bn*9eW*45/PO&rGcjH&5bPSO/T?k9SqVLT>Leu,%XV'OH
%@0CkH^c!5Qa[".0,\:PrgjFdp_jh>C$/K:Lk*2".=*oj-4]Z*uD=R>pC"(h5DMjC^E+b0%gTlkp]ll:/UMLGO_#hTT]g<.t"MZid
%gZs])iD:+!+W&ghJVj9o_rHMhYXRA.)8(ANiAHqNK-a5&3.:_r`.Q3tcH`1Q@(:,bOW<I@WI"01QC03"#gh;<(;b7oph9l?S'ai1
%cm&Dse<[cNK;)PuYBQ&7Df_ab5NAMWc+l2;M,1J/Sb\A^PF<@#Kq9lK^"C;[]Z'aRD@[u?MoA8DE#aL@RKtTrBHNk8BP%r_N6Ad=
%];ucZ4;spiS0FO:P^TIph:.+mR9s9BW#n55iV"oWIr8)bk34mLaMN&F>4"0DU%28U<"X2hJBPXoj5ngE+Z"'*p);Hs4'tNUQ$h:E
%f_9H5(XF8[hM#+n3H=o"Og@'tV&?#N>eY?NKMGm'E[Y#.DA^.K)t9r!*jZde'XH(%gk-Ap&=*#>L,JSmdkI*K8irAn'^uF/09Ue6
%#*3gT];;PMfX'$$)VI\p0S!U8G,l[,'65&XDQA&@>[X\U/+A?M\bADFK6&LSOOI8)iAR,4Qs1V84;=(bCTYBF83#&MU;>B-%PL-*
%B,]s<]LLDlP`*qB>OV)^.Gjmjdi]G#,'?]Z4`f5;$]qI@PWF%\_9,asY)`*gS,F<-:_'*uB+5<rb+p/2Y\eA>8<t]'h[R*ln^B0U
%LXY3nEQ7ugVaF-hb(j9c%&nL7IAdck/&g:BDcU`c9A/R.H#l!Cq!=qoTuRCf6?S]50[u!2c!J6@oB3?J?WDCImOUhZm(gjU`*eB;
%Bqmm'#EG=XBMNC$&JREnm)s,G"X]4DK]3Z29gTNpA4TS;`t&7hI0G+;MS97e&ukS"2+mWL.P&)@jg:;lVRf4aWmUkRgmToS3V1dW
%Z!f9Nd#W47cuVqKhD%3:Npb%2N-H+qB[*\^-`Qo"W4u<(cnalFO,)#,r]0f"/(gld=\l1%T[Wn)ip.;7jP]#M`V^AHQ]0Y"r?S)`
%G%W)siO'1bTqYMNP9_eSe_K2Z>f/%YQo[g(g?[M#`?3Ee"bt-#EWk*CMda/nE"mNUZF.pXkR=eN.Xhn0\geQT@9n2'U:"?`'E27o
%U3Q3A\1sJD6t`C6pjIR>$nGH1jBbe%ZASZbZ1l_\LEnI9'.1S%1g0KNWGZsF+"BiZ%0\]5A.M47MScl$*1cKd%H:aj"!9`i50@Z1
%d5bd+?ac.fQ0e%_]SH"p5IAKfWeQ_6"@&INB6mB"P?UU*&aNtiE9,5t^3e17FR$mL^9dM%3hK2T.^j35$(AnWjL[!"S2BLo,;#Qr
%2mH`l(5ag[8+@B_Z1;nGG"iAk>#!9#3]37%rTCsn0kT1\qpUmpm4eGjV<02ZmXj472Cd+11V87['tsAe;=SqBoOj-*/R^Ufgduo8
%>EE>nn4K7Gj/R+oIf/^5=gY:s.^0[/"8Mi&gW\olI5%)r@@(4C\\Do^WZ+5;_,j3bLRjW<ne*Z`G9<gTBCODNh@>oKGK&h$j'u'#
%?R3I3j@0,!%6CA3:SuHKo4n][7aOj4S'?=fq+.9nrUL949]S=.*sh\9Wc41P8%VAV4f4R$cT6)%\:5biLH,K-21\_$>nL4;ZAJti
%F>a(Dl#.E#--f]uLA:c;THV2W8@Rg5MSiC>%.L'6b\S>=cX0;d:NM6u%b]t28(,U?=!Or0L#OXBN,=00D?<Pr-6=;^+NYgJ:@27M
%4::0s8M\^SFi\$9khtk(Z_1RtL!t8SH;&9u8RM)<P:BFoULI[5P?)Bo%8n*2G,ea=hV%@7%48F"c;=RTbk/`,GXa4(g[eoW34#iX
%Od\>sW,ibG1-`aH'Y,fu-!?bt"38#5E2:aJQ#c2J5"B4b6u<'Z:r0;HYOT&c,.T]4mI;p26Qu@p7VM,sJ\0/[e[.qjQ>-irTBiW]
%G*OXo2@k:iPbC&9->>JXY+e'iNF/:^$NVd2A<P?,o()Di;h>ssM)fRVY%e^2qmMu+SheVJJ9COFKOZF(_a%fdeU-k\;KS$.*3-NY
%:>)tcoTS$kUgc,'2%<EU)Ho@SGl0,+QS5M6G-?(1,k%&d:%eO7YG\P:Np9QNp\SQ&PT\"TUr6U.X,*M5/:l.j0eZ/G*8Y&joC4Q8
%bme6?F*!Z*Cc8BQn_=FZWIV'.1Y@o@&W"tONr(W,W+R(t0L`"7LcuN_CdeS$[Zf#<<+qCqL8"P=r&LiJpeq<Sh&\."ZrD;kC:'hU
%R(`]*Bm2;$70.l-c-#I\KD\$e.!SWSgl-h[WDgEfK""6u$qj2hN&%VNR<3gSZ#_H//I0g:7NKA6,\qGFS%<UN%m@?,3IMlBfNXQ]
%JhdAd;N5dAFZ+[VQAr?S9FJ$RL,GDS*6l/!aO#==qeuI<[?YtEf7^cD7<`ks:$$1j,br6m`lfo#^mM08FOB_t(jOBI:BRf$_N0!t
%U)XYi]+@k@=&IJpY#M5e]I8kB<6?H?dMZB6$-pEmS]lj)ANgGg@f>;:,mTu^`8Y-r4pQ3Oaj3Ua*=7>c5W9")lSIa==NB5l1hc2;
%UIZO@]@8.;bb#GkQ=o0II7/?P+!6us`"nL"f>iB$b&RNba=P2-@8o6ZHa"<c/F!?-Tt(ID?r/R/;?i6*#coO(4O_8$qn/$``XYIX
%7,8iI'J%8F&!*>pB33to$QL!rT%)LN3rqmTb)YWWC$NYUg/V%49cW338BinoWf&`j4hAMEBN7ZceM[/h=]iT0Hp7NfL/WsAE(qVB
%e/Htk)am/bc'3s&LdkSW5UHC>2.ub5LaK(.M_E@1>g23-;5n_*!A"9Y+$Vl:R_o`@Xj165\?N$4S&bgl2biIH"?nf/Z/V!!O_uDe
%;Z_#j!.&ZEJ2>H1d%;0>><X&W';5!<&'p;Fi=_t(6?4LdPqTT:<2-iP3M;1@O#fpC:)O$/U-gF%U#kKA2N0[nbumSFG]D8"pQDgK
%VaF.1B'o!]GAF%6f&R;1QdUDT9J!Z:q<LKp>CG86&^-Hs_dXUn"k5e^UtshRA/!L:8;rh.+jgY?(l]0?O8$[j,Q2Fg)U<:m0f5-S
%-F8+<(jsf.2DJ.;H;s)n+GSN_0Hj9.@Z)@s,)$r3-Ga;',B8$a%42qGNusrX%JB*f%7$J<qjQf`l@,6I0ZWVK\Et!ALKGE2Q.k!0
%\YPYPfE.J)&mG]F\EZ%mA%O0sAKd]&8)G@PmIW3,n_3jpHCI?[`;NXa9ECLIMsTB"L7iPLRJ%sX]ko["FqT$&(I7hY<=-SP^-7rF
%?:HNG+$Vl;g?E&,lip+l=":?S4VS_oB1mNA!->)K,?uoS7^!Ag:LS;n&5G1TTm&T3$:b^Lj)j&HB^C".I9PlM6^4^bRHg%igE^>E
%ZXG9-\Co"tj=r(Xj`j7fMENKMjAV-La-^j=$-DK_+p[3dT$Vl<NusrX]2:5NcSkT%*U:G2U_N`'N:o;Kj:BoT3nRg#?g:tR7,ldO
%lFUS[OdD`F0nmTH/o77VS*fK?*.N6\qXbfX8pG/L5]0(b-)?t9:m6d08.Id:dAKp3:C,@;=1<1,A\Hh2<4O"J)UM&6/$DNC:Uj`6
%fZjBiiVCrNkXd[\d0KD=^Jq^md]TVs4H)g']bMi.[ZFLlmC,7bMoj=V;s20tWAbFX.q+48m<02(R&ZL.cQT:%7;bEa3N-6kIJ-s?
%;$pZgB]""]8P0I'MN.oi2gfu?MFdEi\:2,9Fp7lDkZ5+_1,AWC:S/,Vp3Wp.*9u;F+NPhcquA__N(W%rOi$-!m88uYIPOQPh`t\J
%0PLh.8).&q9<ut"kU1gCrH9//#t!FB4C&(J\_Sl'fh?V51aIdT2KPlP.(,2k+]Vb.+c-(LY>lnO[o&k?h^*1^<GN't^HI)?m\uY3
%@[kiAU=)KPL0;f-gb5Il+Aj%n>7bD/Hg"=u>XngQMj2rZrZm`DWAQ]J5at<)2828'%dFmBkOfg-i-@_uGh/=cNa1miGW:(A8oW4E
%f'G"$k>i.[X#S`\@o/`c#^g]:/&+H)3@rS0a,a1fV7]W(]@UatKkOF)ff(K3C.("WT7t6]+Pc';f;VJ^?EneH-%rUGfJ0i3S_2/3
%<h%9#$U=_I"gSRrLF'lQ`3Qlm<I_9o<,f"s=?=+rT8FKo+V)D`;_6@K$s<c"KL4NboU^l35,hPuYdA#.)W'a7&=VH3_+H@#(Lsh2
%AdiPI&DJZFD>Vu2d#jhMqK,g\XH2ZoY*SmB@Q3XeGTEO+AlJg$1Kq<d1BjZ6.HMe[8-'Q)P"+N$2b`%e2HhK#Z0DIlPJ'o885p"Z
%g"5t<5NadW[:H^YAZ(F6e8;L`Z:`BoQpiFN6A80;dXXquj/46C`;t'V]<VFgesWIK`.Uq>hFb@kg,&%+*J4MRc3'RFO%mF)8'#di
%Ls.`gf7SZ=J16nthK*u?mP%b[Vu;^pF$>1hD`[go$V@?M20";TQZ[AXPI(p'BG/nRA=nn[ghB/%[EsYb!6eoY'i*@-6%Y2G]*'Bp
%8Q[5NM9QhcAZuLGVU6tWSX]G(b4s!F)kW/Yc"G)S^5qX-.Jrac@(1o:mmq)^pEj;SXWI_Q;"YA''@._jnX%$.#ghq7EmB7MiBojE
%='V&#lLK&.p/K!AO95Nd<9^gcEZ'Q^<FK,A?;jkciu)og*1M:Lm9n?U.^glp/n.'S_3`o4'dOX%DgCm<XI(cU-^?HJHNUOCmcW?r
%h[/o!J]<,fntjrX[>oTEoYO%>E%3pfZgsre+t*+RUj-a;!*H+8?R@]:X0+=A7YjOGfrD$^^-_P\7OL1]DQS!SEj(At:G&(i?"-[4
%YO@7fCN/,f(?s#breb4Hg9i?gfMoUlr-`DJ/t9S6pdE1h(P1\Q^R?g>#_!RbgGod6>/9jiN_IFL2hcXW\OI<#J=]'*1TB)nmY@KR
%`JD%Wa6Mr8/&Ks!48hMMIG*p?iCVjWd&o6tlCb@m'n!/>DL(X;iq"0@LQXpMn+M2<U5l;[L8\XT)O#R$og35smTWK'Z3i$-jO>:3
%r*3gnAWAbFkNcaS5X4B6JC&A.\C:JkVtP4P^moko023EKeF`QhlBX'%I?/O$EtekZqgQ]%K:sZ`[uBLM,5!?NqHX%9^s/2u$JFYF
%r9pOWeX?0&:T'lSa+rSg*G3C*r8ign(ZtLQkH,POT'nap/B7MaPj)K9S]ApfcI1;mpcK6r?7-8h^&Bd4e@`/ogb/`Q7rYL[J'YYE
%U1NV-O[9o!m4p-bZ^7)L@pEWKR%/K9:oJg:bUnE,F&TNkg`k4k't:HODu,uuY93,CN?\>h_NI7lI$_gP&fXj*Li8])0`EF5QSr)e
%86`GQ5p06hYp$[I+Z5V!_`1*['-Km*X%^@d#F=@$$A)-`Yc[`nTiXPUmV8h4n\mPTF<)e*Q@6nO&0t7\7`C+>e&QlT_0kqjNUa"I
%TH<hH:qE>G]3j#!ULIF<>>*>ohibP-!F$3G!(D$R$]aWdo0K45gV1qT$6Trnqn*l$X+pY+TTbX?m6f")^^$[&?`38F`Qm5Hr/N28
%5\>-(idtL:'BAWC:<q'>7LfTB$@=mBDp]*-rps,SIaGb%ZN4:??[J;.SM-HjWE-(#h38Z)/l-d0]V@Wb9dS?/E.uFO@b.EZG"\`M
%)_<'u6mRLhSJZ@'>MOhkLtA!223R@_\9da!oW8cUR84`Q0;CG%7<Ir`bWP;K"j<ZY=c@"K--#iY9#D.3k<L$?>M`%j%[7Wkb($Kd
%assJ2s4%gSOUd"7G]u73)&_6Z'3(<WW\^<iVBC4;Hj-+n&a%fT+l.@9?O&j*q5=jLNngp%IrlNN@,>Jo]f^#O`c1'G`dhFRC.qQ(
%2LoJlF`&u[P\gU)joO`eJW3Dr10NB5&7Fsrkn:@1[a@5F!KQ@eiM]g8_H]Ch4T9iEU<**-X"+PC6>ZDV8#Mi=&Z?+AW6sGrWnj@q
%-7:KL:P55BCGRsU_;<_5XXF,IdS$T+Iu)5Zn5>)L>lG/mJM0fNAZ*^4MI8@/Lg5t4YjrhkpD8]$s,4X734=K3P+qa(EH3W\NJ_n)
%$AWecg`&4i/_Z_ii8mTdIlB.NeHD:,!Smjd(VBg,MKXFHVfR?Z!3I#IQX/?NDBae_f9I%k1]gS_Gb6YX7e3+<8oj#]FD3#Jd\^I2
%mBurI&&&=u;;]jacBY=tEZ%`sY..DI:@k\"4tH``kfcZe#Q&OUPu9,h?n+5c62>&SD/_OlLFXU<'^Y(hm^G!$UgnqBF4$b+="fTl
%)NQq1'_UO!9'[=TCMa::!H17@mIdT1g\4JB.(kj/%:iU-&;qHW9Gl;(c.e]@GlI;mC6(g&QM%F6.boppM[HBcdLQ-d]>S+\=Y\#)
%D&@;U#l(I+pA.YXro81h^%a+NqTNhP0k.qb1EJ)BTT$'M\dC_`C\9/^6^D93V\>d(04Ume0.A2gXk,.:McK,1I*CI9roPqY-m/#O
%;Oe-_/ptUhVgl'"j4%iT+<T!_%omDUfs#?kjD%j#3ctHF27#H2.lB;,[Ej0>,NYd4C>h:!!>rG>Epko&R)9hn(,>a,PgQh9j.0X+
%b)@M1@(])<]tMm%qnZ47X_nc!e(dFnr.kISm$H[gXk>Xg<J5(\3WT:FYeO"H@+0-p05[H1SOR$;5'j1-qTLA((;LJ,l+7He1:"H8
%[T+'<DU@HI&UOc]c6/V@KQgr/d2AE[-Yb'.;1b>fg+(rcl?@[GJt'!&DBu>"2=*4IY48ci'LlKCj9u"IK$),T6#ElYro0*`j?aA/
%.5dLN9F-RlN-o6"3cJMUm"+j"iOD#'+rrLbJs;cE=223kXggb;!L7D,.f!a<A9&3ZiXp\c7m$t6D=]sQ/_?I/9n0-F/L[3*&8c.g
%&7`jB*g?>b^@n(cYhG/?Cs%95Wne(VSoeN&(c25)W:L.Hr+:3[X1hGQ0A(`Z:f1gX#`0`%eoY(m6Pa7nr2o(gr&kPN+]@9/+1E,^
%EKtICCqGT8r9PU%>/iO4hid6!)ks[L[;"KC($Omj<D,4Sq>HP;$Z5OTMn[H_r&TkHMb\f&#(74V9,%K4kFT%@T_@#1B$uOo@B0@b
%c$adSa#PO1;3_'Urj]Qt=uE!BQAV(I5`r#"YXK)]:NI,a>\,UG8s.Am#3)6<5&4/Ik<rempb_rY]0bZtL[=VfEC[<t36ek'G0]6n
%DB<G3+%-IfGu`?U<A-Z&UK'o09Qh-'OD^>H8LKB(16JKhSObkP]\M3LJUJS0Q\R-dW"k5[jO#,5*qUaDgdDsN9JD&Y3VYTG#`2'E
%GVV\]\3P%<baV#l.F=a\YdH(t'67iFNX`gkEcoNj:"d!dm`$0NQ:CpgGLZoB@EIOU;YK4_'$l(t7hskDD&hScS'@".'r7]@nOB"K
%s,eEQH!1A])su87S)aP3bQD]71c?h(]O])INPqp^HK6:SnB1P#m,#][XBs3.d/Nj;#X[FKWEeMNWjop7Q5-W==opc":-QlD<@(*,
%2q';t5i6ZVFTB4L,+05EjK;C'2oEQ(6MZ]cn/l.%%4ZF[5D=0b]]!pDk%%u$16'=WLnOj?f'r&`fn5?^dKNO?qr[AD)WYDijYp-g
%As;1%iEq+UCn<I\!4_[%[,!YR[i5R_Z=qi(a:Fl]X33F)cF/hOk8L.sBj%4\oq7=V*E/2B/h7rc4l(:/$bL,8VVpLl^dkb8-u[\Z
%[BN9.1-8be.f.BcQ7afoDi3m"Xcn6jkfa_s=b\5[cZq=P$.3tITCJ?2-mYD$D[T&X?SVbU@HGli(LrTc>MIYT#\BZY5D4f-mI&^N
%`Y2V^&JEo9!<!>bB8ioAlUq%H]cU&kcOgX/&nSgV&>C>0JW(iTec*C-K]_@=KCGQ"W.GI_?DZkK.'*SV'H5HA.&]lQEuf0jF@8Uj
%Bo$2HQ$7(H67"45n3GUD$jejSH9`&N+a6"OS0[^[,J<^Hrl5"kM,AZq3n45UiJsDL`7A-upHW2(GM\jYFOl332!+phH,8PdZ@Xfl
%!\7PhHA`K9o\n;LcGDkml><];&:Ri^;T<8kaOY.m>+(OU;DGC)eDg@S#j3+spRgdHob/2)k^GO)EmeuHp;E!W6`p3pp?EQp2JSm[
%=GZNh>Koco[!6G.,/5ZcUEn<0\A1VOXk;#:W<'p%p0Z?;ldo0%58pQT?kFq)4@s'&q_NO4pR/Zm^iC2^/:^h;-Mo9-A,L_3!6jPC
%Dp0acU;2h4.7oJkdDIboT,&pAp:/\=Fn><bi4/4j_<;a$k<h5c.'(j6I;@uK7J;&Q:#6!BoU`ofCNNp]H*DN'D<SiIWpZjqc_$G9
%o2@/D"l!4*@gh+F+CYVk6R]Un+k4u+mQ0o@m>Ic,Satn49]<B)]C306<C$Ai^Q,#.0I6I?)6eeaV5Pnf\TWlnjaI.tU1(ua2h`1>
%pPX!>`Uj*!m]Z6U(%[j#*1kVNm,H)>e!U7dFe-f%&'0f[$J*n#_K@c7:b;g]IHed5,KhM'ft<)e:M'q9J%a?irLV5%E_kgA]I.b4
%c:'MW5MuAnC%&V$p"uDAmGIofhu,M6rV8\XLO])+56(8)rV<)bh7pQ)J+l2,l0nZM5Q0''rqGkGs3om)c/8QmTDm<3s7k&-r51bu
%bFedqci;&YJ,Sp3s7GK(rg/-4Va(4Oci;`argu`kBO:1PJ+k&aL]?d\s5s=c*tCc(~>
%AI9_PrivateDataEnd
